
C8T6_FLASHWRITE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000062b8  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000370  080063c8  080063c8  000163c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006738  08006738  000201dc  2**0
                  CONTENTS
  4 .ARM          00000000  08006738  08006738  000201dc  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006738  08006738  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006738  08006738  00016738  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800673c  0800673c  0001673c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  08006740  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000064  200001e0  0800691c  000201e0  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20000244  0800691c  00020244  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00005694  00000000  00000000  00020205  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000016d9  00000000  00000000  00025899  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000005f0  00000000  00000000  00026f78  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000518  00000000  00000000  00027568  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00017467  00000000  00000000  00027a80  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00005f64  00000000  00000000  0003eee7  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00080ffc  00000000  00000000  00044e4b  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000c5e47  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000026e8  00000000  00000000  000c5ec4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001e0 	.word	0x200001e0
 800012c:	00000000 	.word	0x00000000
 8000130:	080063b0 	.word	0x080063b0

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001e4 	.word	0x200001e4
 800014c:	080063b0 	.word	0x080063b0

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800029e:	f1a4 0401 	sub.w	r4, r4, #1
 80002a2:	d1e9      	bne.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2uiz>:
 8000a88:	004a      	lsls	r2, r1, #1
 8000a8a:	d211      	bcs.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a90:	d211      	bcs.n	8000ab6 <__aeabi_d2uiz+0x2e>
 8000a92:	d50d      	bpl.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a9c:	d40e      	bmi.n	8000abc <__aeabi_d2uiz+0x34>
 8000a9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aa6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_d2uiz+0x3a>
 8000abc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0000 	mov.w	r0, #0
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_d2f>:
 8000ac8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000acc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ad0:	bf24      	itt	cs
 8000ad2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ad6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ada:	d90d      	bls.n	8000af8 <__aeabi_d2f+0x30>
 8000adc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ae0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000af0:	bf08      	it	eq
 8000af2:	f020 0001 	biceq.w	r0, r0, #1
 8000af6:	4770      	bx	lr
 8000af8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000afc:	d121      	bne.n	8000b42 <__aeabi_d2f+0x7a>
 8000afe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b02:	bfbc      	itt	lt
 8000b04:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b08:	4770      	bxlt	lr
 8000b0a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b12:	f1c2 0218 	rsb	r2, r2, #24
 8000b16:	f1c2 0c20 	rsb	ip, r2, #32
 8000b1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b22:	bf18      	it	ne
 8000b24:	f040 0001 	orrne.w	r0, r0, #1
 8000b28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b34:	ea40 000c 	orr.w	r0, r0, ip
 8000b38:	fa23 f302 	lsr.w	r3, r3, r2
 8000b3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b40:	e7cc      	b.n	8000adc <__aeabi_d2f+0x14>
 8000b42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b46:	d107      	bne.n	8000b58 <__aeabi_d2f+0x90>
 8000b48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b4c:	bf1e      	ittt	ne
 8000b4e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b52:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b56:	4770      	bxne	lr
 8000b58:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b5c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b60:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop

08000b68 <flash_memory_Init>:
// �����͸� ���� �������ؼ��� ���� ������ ������ �޸𸮸� ���� ��� �մϴ�.
static FLASH_EraseInitTypeDef EraseInitStruct;
static uint32_t PAGEError;

void flash_memory_Init(void)
{
 8000b68:	b480      	push	{r7}
 8000b6a:	af00      	add	r7, sp, #0
	EraseInitStruct.TypeErase   = FLASH_TYPEERASE_PAGES;  //0x00
 8000b6c:	4b06      	ldr	r3, [pc, #24]	; (8000b88 <flash_memory_Init+0x20>)
 8000b6e:	2200      	movs	r2, #0
 8000b70:	601a      	str	r2, [r3, #0]
	EraseInitStruct.PageAddress = FLASH_USER_START_ADDR;  // ����� �������� ���� ��巹��
 8000b72:	4b05      	ldr	r3, [pc, #20]	; (8000b88 <flash_memory_Init+0x20>)
 8000b74:	4a05      	ldr	r2, [pc, #20]	; (8000b8c <flash_memory_Init+0x24>)
 8000b76:	609a      	str	r2, [r3, #8]
	EraseInitStruct.NbPages     = (FLASH_USER_END_ADDR - FLASH_USER_START_ADDR) / FLASH_PAGE_SIZE; //���� ������ ��
 8000b78:	4b03      	ldr	r3, [pc, #12]	; (8000b88 <flash_memory_Init+0x20>)
 8000b7a:	2240      	movs	r2, #64	; 0x40
 8000b7c:	60da      	str	r2, [r3, #12]
}
 8000b7e:	bf00      	nop
 8000b80:	46bd      	mov	sp, r7
 8000b82:	bc80      	pop	{r7}
 8000b84:	4770      	bx	lr
 8000b86:	bf00      	nop
 8000b88:	200001fc 	.word	0x200001fc
 8000b8c:	08010000 	.word	0x08010000

08000b90 <flash_memory_erase>:

void flash_memory_erase(void)
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	af00      	add	r7, sp, #0
	//Flash�޸𸮸� ���� �� �� �ֵ��� ���� Ǯ�� �ݴϴ�.
	HAL_FLASH_Unlock();
 8000b94:	f000 fbea 	bl	800136c <HAL_FLASH_Unlock>

	//������ ����⿡ �����ϸ� ���ѷ����� ������ �Ͽ� ����� ���۵��� �����մϴ�.
	if (HAL_FLASHEx_Erase(&EraseInitStruct, &PAGEError) != HAL_OK) {
 8000b98:	4906      	ldr	r1, [pc, #24]	; (8000bb4 <flash_memory_erase+0x24>)
 8000b9a:	4807      	ldr	r0, [pc, #28]	; (8000bb8 <flash_memory_erase+0x28>)
 8000b9c:	f000 fcce 	bl	800153c <HAL_FLASHEx_Erase>
 8000ba0:	4603      	mov	r3, r0
 8000ba2:	2b00      	cmp	r3, #0
 8000ba4:	d003      	beq.n	8000bae <flash_memory_erase+0x1e>
		printf("Eraser Error\r\n");
 8000ba6:	4805      	ldr	r0, [pc, #20]	; (8000bbc <flash_memory_erase+0x2c>)
 8000ba8:	f002 f9a4 	bl	8002ef4 <puts>
		while(1);
 8000bac:	e7fe      	b.n	8000bac <flash_memory_erase+0x1c>
	}
}
 8000bae:	bf00      	nop
 8000bb0:	bd80      	pop	{r7, pc}
 8000bb2:	bf00      	nop
 8000bb4:	2000020c 	.word	0x2000020c
 8000bb8:	200001fc 	.word	0x200001fc
 8000bbc:	080063c8 	.word	0x080063c8

08000bc0 <flash_memory_write>:

void flash_memory_write(void)
{
 8000bc0:	b590      	push	{r4, r7, lr}
 8000bc2:	b085      	sub	sp, #20
 8000bc4:	af00      	add	r7, sp, #0
	uint32_t test = 0xABCDEF00;
 8000bc6:	4b18      	ldr	r3, [pc, #96]	; (8000c28 <flash_memory_write+0x68>)
 8000bc8:	607b      	str	r3, [r7, #4]

	 /////////������ ������ �������� ������ ���� ////////////////////////////////////////////////////
	 //HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)

    for(int m=0;m<64;m++)
 8000bca:	2300      	movs	r3, #0
 8000bcc:	60fb      	str	r3, [r7, #12]
 8000bce:	e021      	b.n	8000c14 <flash_memory_write+0x54>
	for(int n=0;n<256;n++)
 8000bd0:	2300      	movs	r3, #0
 8000bd2:	60bb      	str	r3, [r7, #8]
 8000bd4:	e018      	b.n	8000c08 <flash_memory_write+0x48>
	{
	  while (HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, USER_DATA1+(0x400*m)+(4*n), ((uint32_t)test)) != HAL_OK);
 8000bd6:	bf00      	nop
 8000bd8:	68fb      	ldr	r3, [r7, #12]
 8000bda:	029b      	lsls	r3, r3, #10
 8000bdc:	461a      	mov	r2, r3
 8000bde:	68bb      	ldr	r3, [r7, #8]
 8000be0:	009b      	lsls	r3, r3, #2
 8000be2:	4413      	add	r3, r2
 8000be4:	f103 6100 	add.w	r1, r3, #134217728	; 0x8000000
 8000be8:	f501 3180 	add.w	r1, r1, #65536	; 0x10000
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	f04f 0400 	mov.w	r4, #0
 8000bf2:	461a      	mov	r2, r3
 8000bf4:	4623      	mov	r3, r4
 8000bf6:	2002      	movs	r0, #2
 8000bf8:	f000 fb48 	bl	800128c <HAL_FLASH_Program>
 8000bfc:	4603      	mov	r3, r0
 8000bfe:	2b00      	cmp	r3, #0
 8000c00:	d1ea      	bne.n	8000bd8 <flash_memory_write+0x18>
	for(int n=0;n<256;n++)
 8000c02:	68bb      	ldr	r3, [r7, #8]
 8000c04:	3301      	adds	r3, #1
 8000c06:	60bb      	str	r3, [r7, #8]
 8000c08:	68bb      	ldr	r3, [r7, #8]
 8000c0a:	2bff      	cmp	r3, #255	; 0xff
 8000c0c:	dde3      	ble.n	8000bd6 <flash_memory_write+0x16>
    for(int m=0;m<64;m++)
 8000c0e:	68fb      	ldr	r3, [r7, #12]
 8000c10:	3301      	adds	r3, #1
 8000c12:	60fb      	str	r3, [r7, #12]
 8000c14:	68fb      	ldr	r3, [r7, #12]
 8000c16:	2b3f      	cmp	r3, #63	; 0x3f
 8000c18:	ddda      	ble.n	8000bd0 <flash_memory_write+0x10>
	  }
	  while (HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, USER_DATA4, ((uint32_t)0x33333333)) != HAL_OK){
		  //printf("Write Error\r\n");
	  } */

	 HAL_FLASH_Lock();
 8000c1a:	f000 fbcd 	bl	80013b8 <HAL_FLASH_Lock>
}
 8000c1e:	bf00      	nop
 8000c20:	3714      	adds	r7, #20
 8000c22:	46bd      	mov	sp, r7
 8000c24:	bd90      	pop	{r4, r7, pc}
 8000c26:	bf00      	nop
 8000c28:	abcdef00 	.word	0xabcdef00

08000c2c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c30:	f000 f9c4 	bl	8000fbc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c34:	f000 f814 	bl	8000c60 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c38:	f000 f858 	bl	8000cec <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */
  flash_memory_Init();
 8000c3c:	f7ff ff94 	bl	8000b68 <flash_memory_Init>
  flash_memory_erase();
 8000c40:	f7ff ffa6 	bl	8000b90 <flash_memory_erase>
  flash_memory_write();
 8000c44:	f7ff ffbc 	bl	8000bc0 <flash_memory_write>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8000c48:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000c4c:	4803      	ldr	r0, [pc, #12]	; (8000c5c <main+0x30>)
 8000c4e:	f000 fe8f 	bl	8001970 <HAL_GPIO_TogglePin>
      HAL_Delay(1000);
 8000c52:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000c56:	f000 fa13 	bl	8001080 <HAL_Delay>
	  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8000c5a:	e7f5      	b.n	8000c48 <main+0x1c>
 8000c5c:	40011000 	.word	0x40011000

08000c60 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c60:	b580      	push	{r7, lr}
 8000c62:	b090      	sub	sp, #64	; 0x40
 8000c64:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c66:	f107 0318 	add.w	r3, r7, #24
 8000c6a:	2228      	movs	r2, #40	; 0x28
 8000c6c:	2100      	movs	r1, #0
 8000c6e:	4618      	mov	r0, r3
 8000c70:	f001 faac 	bl	80021cc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c74:	1d3b      	adds	r3, r7, #4
 8000c76:	2200      	movs	r2, #0
 8000c78:	601a      	str	r2, [r3, #0]
 8000c7a:	605a      	str	r2, [r3, #4]
 8000c7c:	609a      	str	r2, [r3, #8]
 8000c7e:	60da      	str	r2, [r3, #12]
 8000c80:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000c82:	2301      	movs	r3, #1
 8000c84:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000c86:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000c8a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000c90:	2301      	movs	r3, #1
 8000c92:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c94:	2302      	movs	r3, #2
 8000c96:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000c98:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000c9c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000c9e:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000ca2:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ca4:	f107 0318 	add.w	r3, r7, #24
 8000ca8:	4618      	mov	r0, r3
 8000caa:	f000 fe7b 	bl	80019a4 <HAL_RCC_OscConfig>
 8000cae:	4603      	mov	r3, r0
 8000cb0:	2b00      	cmp	r3, #0
 8000cb2:	d001      	beq.n	8000cb8 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000cb4:	f000 f85a 	bl	8000d6c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000cb8:	230f      	movs	r3, #15
 8000cba:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000cbc:	2302      	movs	r3, #2
 8000cbe:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000cc0:	2300      	movs	r3, #0
 8000cc2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000cc4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000cc8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000cca:	2300      	movs	r3, #0
 8000ccc:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000cce:	1d3b      	adds	r3, r7, #4
 8000cd0:	2102      	movs	r1, #2
 8000cd2:	4618      	mov	r0, r3
 8000cd4:	f001 f8e6 	bl	8001ea4 <HAL_RCC_ClockConfig>
 8000cd8:	4603      	mov	r3, r0
 8000cda:	2b00      	cmp	r3, #0
 8000cdc:	d001      	beq.n	8000ce2 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000cde:	f000 f845 	bl	8000d6c <Error_Handler>
  }
}
 8000ce2:	bf00      	nop
 8000ce4:	3740      	adds	r7, #64	; 0x40
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	bd80      	pop	{r7, pc}
	...

08000cec <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	b086      	sub	sp, #24
 8000cf0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cf2:	f107 0308 	add.w	r3, r7, #8
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	601a      	str	r2, [r3, #0]
 8000cfa:	605a      	str	r2, [r3, #4]
 8000cfc:	609a      	str	r2, [r3, #8]
 8000cfe:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d00:	4b18      	ldr	r3, [pc, #96]	; (8000d64 <MX_GPIO_Init+0x78>)
 8000d02:	699b      	ldr	r3, [r3, #24]
 8000d04:	4a17      	ldr	r2, [pc, #92]	; (8000d64 <MX_GPIO_Init+0x78>)
 8000d06:	f043 0310 	orr.w	r3, r3, #16
 8000d0a:	6193      	str	r3, [r2, #24]
 8000d0c:	4b15      	ldr	r3, [pc, #84]	; (8000d64 <MX_GPIO_Init+0x78>)
 8000d0e:	699b      	ldr	r3, [r3, #24]
 8000d10:	f003 0310 	and.w	r3, r3, #16
 8000d14:	607b      	str	r3, [r7, #4]
 8000d16:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d18:	4b12      	ldr	r3, [pc, #72]	; (8000d64 <MX_GPIO_Init+0x78>)
 8000d1a:	699b      	ldr	r3, [r3, #24]
 8000d1c:	4a11      	ldr	r2, [pc, #68]	; (8000d64 <MX_GPIO_Init+0x78>)
 8000d1e:	f043 0320 	orr.w	r3, r3, #32
 8000d22:	6193      	str	r3, [r2, #24]
 8000d24:	4b0f      	ldr	r3, [pc, #60]	; (8000d64 <MX_GPIO_Init+0x78>)
 8000d26:	699b      	ldr	r3, [r3, #24]
 8000d28:	f003 0320 	and.w	r3, r3, #32
 8000d2c:	603b      	str	r3, [r7, #0]
 8000d2e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000d30:	2200      	movs	r2, #0
 8000d32:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000d36:	480c      	ldr	r0, [pc, #48]	; (8000d68 <MX_GPIO_Init+0x7c>)
 8000d38:	f000 fe02 	bl	8001940 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000d3c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000d40:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d42:	2301      	movs	r3, #1
 8000d44:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d46:	2300      	movs	r3, #0
 8000d48:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d4a:	2302      	movs	r3, #2
 8000d4c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d4e:	f107 0308 	add.w	r3, r7, #8
 8000d52:	4619      	mov	r1, r3
 8000d54:	4804      	ldr	r0, [pc, #16]	; (8000d68 <MX_GPIO_Init+0x7c>)
 8000d56:	f000 fc99 	bl	800168c <HAL_GPIO_Init>

}
 8000d5a:	bf00      	nop
 8000d5c:	3718      	adds	r7, #24
 8000d5e:	46bd      	mov	sp, r7
 8000d60:	bd80      	pop	{r7, pc}
 8000d62:	bf00      	nop
 8000d64:	40021000 	.word	0x40021000
 8000d68:	40011000 	.word	0x40011000

08000d6c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d6c:	b480      	push	{r7}
 8000d6e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d70:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d72:	e7fe      	b.n	8000d72 <Error_Handler+0x6>

08000d74 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d74:	b480      	push	{r7}
 8000d76:	b085      	sub	sp, #20
 8000d78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000d7a:	4b15      	ldr	r3, [pc, #84]	; (8000dd0 <HAL_MspInit+0x5c>)
 8000d7c:	699b      	ldr	r3, [r3, #24]
 8000d7e:	4a14      	ldr	r2, [pc, #80]	; (8000dd0 <HAL_MspInit+0x5c>)
 8000d80:	f043 0301 	orr.w	r3, r3, #1
 8000d84:	6193      	str	r3, [r2, #24]
 8000d86:	4b12      	ldr	r3, [pc, #72]	; (8000dd0 <HAL_MspInit+0x5c>)
 8000d88:	699b      	ldr	r3, [r3, #24]
 8000d8a:	f003 0301 	and.w	r3, r3, #1
 8000d8e:	60bb      	str	r3, [r7, #8]
 8000d90:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d92:	4b0f      	ldr	r3, [pc, #60]	; (8000dd0 <HAL_MspInit+0x5c>)
 8000d94:	69db      	ldr	r3, [r3, #28]
 8000d96:	4a0e      	ldr	r2, [pc, #56]	; (8000dd0 <HAL_MspInit+0x5c>)
 8000d98:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d9c:	61d3      	str	r3, [r2, #28]
 8000d9e:	4b0c      	ldr	r3, [pc, #48]	; (8000dd0 <HAL_MspInit+0x5c>)
 8000da0:	69db      	ldr	r3, [r3, #28]
 8000da2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000da6:	607b      	str	r3, [r7, #4]
 8000da8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8000daa:	4b0a      	ldr	r3, [pc, #40]	; (8000dd4 <HAL_MspInit+0x60>)
 8000dac:	685b      	ldr	r3, [r3, #4]
 8000dae:	60fb      	str	r3, [r7, #12]
 8000db0:	68fb      	ldr	r3, [r7, #12]
 8000db2:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000db6:	60fb      	str	r3, [r7, #12]
 8000db8:	68fb      	ldr	r3, [r7, #12]
 8000dba:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000dbe:	60fb      	str	r3, [r7, #12]
 8000dc0:	4a04      	ldr	r2, [pc, #16]	; (8000dd4 <HAL_MspInit+0x60>)
 8000dc2:	68fb      	ldr	r3, [r7, #12]
 8000dc4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000dc6:	bf00      	nop
 8000dc8:	3714      	adds	r7, #20
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	bc80      	pop	{r7}
 8000dce:	4770      	bx	lr
 8000dd0:	40021000 	.word	0x40021000
 8000dd4:	40010000 	.word	0x40010000

08000dd8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000dd8:	b480      	push	{r7}
 8000dda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ddc:	e7fe      	b.n	8000ddc <NMI_Handler+0x4>

08000dde <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000dde:	b480      	push	{r7}
 8000de0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000de2:	e7fe      	b.n	8000de2 <HardFault_Handler+0x4>

08000de4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000de4:	b480      	push	{r7}
 8000de6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000de8:	e7fe      	b.n	8000de8 <MemManage_Handler+0x4>

08000dea <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000dea:	b480      	push	{r7}
 8000dec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000dee:	e7fe      	b.n	8000dee <BusFault_Handler+0x4>

08000df0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000df0:	b480      	push	{r7}
 8000df2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000df4:	e7fe      	b.n	8000df4 <UsageFault_Handler+0x4>

08000df6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000df6:	b480      	push	{r7}
 8000df8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000dfa:	bf00      	nop
 8000dfc:	46bd      	mov	sp, r7
 8000dfe:	bc80      	pop	{r7}
 8000e00:	4770      	bx	lr

08000e02 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e02:	b480      	push	{r7}
 8000e04:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e06:	bf00      	nop
 8000e08:	46bd      	mov	sp, r7
 8000e0a:	bc80      	pop	{r7}
 8000e0c:	4770      	bx	lr

08000e0e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e0e:	b480      	push	{r7}
 8000e10:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e12:	bf00      	nop
 8000e14:	46bd      	mov	sp, r7
 8000e16:	bc80      	pop	{r7}
 8000e18:	4770      	bx	lr

08000e1a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e1a:	b580      	push	{r7, lr}
 8000e1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e1e:	f000 f913 	bl	8001048 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e22:	bf00      	nop
 8000e24:	bd80      	pop	{r7, pc}

08000e26 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000e26:	b580      	push	{r7, lr}
 8000e28:	b086      	sub	sp, #24
 8000e2a:	af00      	add	r7, sp, #0
 8000e2c:	60f8      	str	r0, [r7, #12]
 8000e2e:	60b9      	str	r1, [r7, #8]
 8000e30:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e32:	2300      	movs	r3, #0
 8000e34:	617b      	str	r3, [r7, #20]
 8000e36:	e00a      	b.n	8000e4e <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000e38:	f3af 8000 	nop.w
 8000e3c:	4601      	mov	r1, r0
 8000e3e:	68bb      	ldr	r3, [r7, #8]
 8000e40:	1c5a      	adds	r2, r3, #1
 8000e42:	60ba      	str	r2, [r7, #8]
 8000e44:	b2ca      	uxtb	r2, r1
 8000e46:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e48:	697b      	ldr	r3, [r7, #20]
 8000e4a:	3301      	adds	r3, #1
 8000e4c:	617b      	str	r3, [r7, #20]
 8000e4e:	697a      	ldr	r2, [r7, #20]
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	429a      	cmp	r2, r3
 8000e54:	dbf0      	blt.n	8000e38 <_read+0x12>
	}

return len;
 8000e56:	687b      	ldr	r3, [r7, #4]
}
 8000e58:	4618      	mov	r0, r3
 8000e5a:	3718      	adds	r7, #24
 8000e5c:	46bd      	mov	sp, r7
 8000e5e:	bd80      	pop	{r7, pc}

08000e60 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	b086      	sub	sp, #24
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	60f8      	str	r0, [r7, #12]
 8000e68:	60b9      	str	r1, [r7, #8]
 8000e6a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e6c:	2300      	movs	r3, #0
 8000e6e:	617b      	str	r3, [r7, #20]
 8000e70:	e009      	b.n	8000e86 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000e72:	68bb      	ldr	r3, [r7, #8]
 8000e74:	1c5a      	adds	r2, r3, #1
 8000e76:	60ba      	str	r2, [r7, #8]
 8000e78:	781b      	ldrb	r3, [r3, #0]
 8000e7a:	4618      	mov	r0, r3
 8000e7c:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e80:	697b      	ldr	r3, [r7, #20]
 8000e82:	3301      	adds	r3, #1
 8000e84:	617b      	str	r3, [r7, #20]
 8000e86:	697a      	ldr	r2, [r7, #20]
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	429a      	cmp	r2, r3
 8000e8c:	dbf1      	blt.n	8000e72 <_write+0x12>
	}
	return len;
 8000e8e:	687b      	ldr	r3, [r7, #4]
}
 8000e90:	4618      	mov	r0, r3
 8000e92:	3718      	adds	r7, #24
 8000e94:	46bd      	mov	sp, r7
 8000e96:	bd80      	pop	{r7, pc}

08000e98 <_close>:

int _close(int file)
{
 8000e98:	b480      	push	{r7}
 8000e9a:	b083      	sub	sp, #12
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	6078      	str	r0, [r7, #4]
	return -1;
 8000ea0:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000ea4:	4618      	mov	r0, r3
 8000ea6:	370c      	adds	r7, #12
 8000ea8:	46bd      	mov	sp, r7
 8000eaa:	bc80      	pop	{r7}
 8000eac:	4770      	bx	lr

08000eae <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000eae:	b480      	push	{r7}
 8000eb0:	b083      	sub	sp, #12
 8000eb2:	af00      	add	r7, sp, #0
 8000eb4:	6078      	str	r0, [r7, #4]
 8000eb6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000eb8:	683b      	ldr	r3, [r7, #0]
 8000eba:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000ebe:	605a      	str	r2, [r3, #4]
	return 0;
 8000ec0:	2300      	movs	r3, #0
}
 8000ec2:	4618      	mov	r0, r3
 8000ec4:	370c      	adds	r7, #12
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	bc80      	pop	{r7}
 8000eca:	4770      	bx	lr

08000ecc <_isatty>:

int _isatty(int file)
{
 8000ecc:	b480      	push	{r7}
 8000ece:	b083      	sub	sp, #12
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	6078      	str	r0, [r7, #4]
	return 1;
 8000ed4:	2301      	movs	r3, #1
}
 8000ed6:	4618      	mov	r0, r3
 8000ed8:	370c      	adds	r7, #12
 8000eda:	46bd      	mov	sp, r7
 8000edc:	bc80      	pop	{r7}
 8000ede:	4770      	bx	lr

08000ee0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000ee0:	b480      	push	{r7}
 8000ee2:	b085      	sub	sp, #20
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	60f8      	str	r0, [r7, #12]
 8000ee8:	60b9      	str	r1, [r7, #8]
 8000eea:	607a      	str	r2, [r7, #4]
	return 0;
 8000eec:	2300      	movs	r3, #0
}
 8000eee:	4618      	mov	r0, r3
 8000ef0:	3714      	adds	r7, #20
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	bc80      	pop	{r7}
 8000ef6:	4770      	bx	lr

08000ef8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	b086      	sub	sp, #24
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000f00:	4a14      	ldr	r2, [pc, #80]	; (8000f54 <_sbrk+0x5c>)
 8000f02:	4b15      	ldr	r3, [pc, #84]	; (8000f58 <_sbrk+0x60>)
 8000f04:	1ad3      	subs	r3, r2, r3
 8000f06:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000f08:	697b      	ldr	r3, [r7, #20]
 8000f0a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000f0c:	4b13      	ldr	r3, [pc, #76]	; (8000f5c <_sbrk+0x64>)
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	d102      	bne.n	8000f1a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000f14:	4b11      	ldr	r3, [pc, #68]	; (8000f5c <_sbrk+0x64>)
 8000f16:	4a12      	ldr	r2, [pc, #72]	; (8000f60 <_sbrk+0x68>)
 8000f18:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000f1a:	4b10      	ldr	r3, [pc, #64]	; (8000f5c <_sbrk+0x64>)
 8000f1c:	681a      	ldr	r2, [r3, #0]
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	4413      	add	r3, r2
 8000f22:	693a      	ldr	r2, [r7, #16]
 8000f24:	429a      	cmp	r2, r3
 8000f26:	d207      	bcs.n	8000f38 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000f28:	f001 f926 	bl	8002178 <__errno>
 8000f2c:	4602      	mov	r2, r0
 8000f2e:	230c      	movs	r3, #12
 8000f30:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8000f32:	f04f 33ff 	mov.w	r3, #4294967295
 8000f36:	e009      	b.n	8000f4c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000f38:	4b08      	ldr	r3, [pc, #32]	; (8000f5c <_sbrk+0x64>)
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000f3e:	4b07      	ldr	r3, [pc, #28]	; (8000f5c <_sbrk+0x64>)
 8000f40:	681a      	ldr	r2, [r3, #0]
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	4413      	add	r3, r2
 8000f46:	4a05      	ldr	r2, [pc, #20]	; (8000f5c <_sbrk+0x64>)
 8000f48:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000f4a:	68fb      	ldr	r3, [r7, #12]
}
 8000f4c:	4618      	mov	r0, r3
 8000f4e:	3718      	adds	r7, #24
 8000f50:	46bd      	mov	sp, r7
 8000f52:	bd80      	pop	{r7, pc}
 8000f54:	20005000 	.word	0x20005000
 8000f58:	00000400 	.word	0x00000400
 8000f5c:	20000210 	.word	0x20000210
 8000f60:	20000248 	.word	0x20000248

08000f64 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000f64:	b480      	push	{r7}
 8000f66:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f68:	bf00      	nop
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	bc80      	pop	{r7}
 8000f6e:	4770      	bx	lr

08000f70 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8000f70:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8000f72:	e003      	b.n	8000f7c <LoopCopyDataInit>

08000f74 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000f74:	4b0b      	ldr	r3, [pc, #44]	; (8000fa4 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8000f76:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000f78:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8000f7a:	3104      	adds	r1, #4

08000f7c <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000f7c:	480a      	ldr	r0, [pc, #40]	; (8000fa8 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8000f7e:	4b0b      	ldr	r3, [pc, #44]	; (8000fac <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8000f80:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8000f82:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8000f84:	d3f6      	bcc.n	8000f74 <CopyDataInit>
  ldr r2, =_sbss
 8000f86:	4a0a      	ldr	r2, [pc, #40]	; (8000fb0 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8000f88:	e002      	b.n	8000f90 <LoopFillZerobss>

08000f8a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8000f8a:	2300      	movs	r3, #0
  str r3, [r2], #4
 8000f8c:	f842 3b04 	str.w	r3, [r2], #4

08000f90 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8000f90:	4b08      	ldr	r3, [pc, #32]	; (8000fb4 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8000f92:	429a      	cmp	r2, r3
  bcc FillZerobss
 8000f94:	d3f9      	bcc.n	8000f8a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000f96:	f7ff ffe5 	bl	8000f64 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000f9a:	f001 f8f3 	bl	8002184 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000f9e:	f7ff fe45 	bl	8000c2c <main>
  bx lr
 8000fa2:	4770      	bx	lr
  ldr r3, =_sidata
 8000fa4:	08006740 	.word	0x08006740
  ldr r0, =_sdata
 8000fa8:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000fac:	200001dc 	.word	0x200001dc
  ldr r2, =_sbss
 8000fb0:	200001e0 	.word	0x200001e0
  ldr r3, = _ebss
 8000fb4:	20000244 	.word	0x20000244

08000fb8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000fb8:	e7fe      	b.n	8000fb8 <ADC1_2_IRQHandler>
	...

08000fbc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000fc0:	4b08      	ldr	r3, [pc, #32]	; (8000fe4 <HAL_Init+0x28>)
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	4a07      	ldr	r2, [pc, #28]	; (8000fe4 <HAL_Init+0x28>)
 8000fc6:	f043 0310 	orr.w	r3, r3, #16
 8000fca:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000fcc:	2003      	movs	r0, #3
 8000fce:	f000 f929 	bl	8001224 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000fd2:	2000      	movs	r0, #0
 8000fd4:	f000 f808 	bl	8000fe8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000fd8:	f7ff fecc 	bl	8000d74 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000fdc:	2300      	movs	r3, #0
}
 8000fde:	4618      	mov	r0, r3
 8000fe0:	bd80      	pop	{r7, pc}
 8000fe2:	bf00      	nop
 8000fe4:	40022000 	.word	0x40022000

08000fe8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b082      	sub	sp, #8
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ff0:	4b12      	ldr	r3, [pc, #72]	; (800103c <HAL_InitTick+0x54>)
 8000ff2:	681a      	ldr	r2, [r3, #0]
 8000ff4:	4b12      	ldr	r3, [pc, #72]	; (8001040 <HAL_InitTick+0x58>)
 8000ff6:	781b      	ldrb	r3, [r3, #0]
 8000ff8:	4619      	mov	r1, r3
 8000ffa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ffe:	fbb3 f3f1 	udiv	r3, r3, r1
 8001002:	fbb2 f3f3 	udiv	r3, r2, r3
 8001006:	4618      	mov	r0, r3
 8001008:	f000 f933 	bl	8001272 <HAL_SYSTICK_Config>
 800100c:	4603      	mov	r3, r0
 800100e:	2b00      	cmp	r3, #0
 8001010:	d001      	beq.n	8001016 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001012:	2301      	movs	r3, #1
 8001014:	e00e      	b.n	8001034 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	2b0f      	cmp	r3, #15
 800101a:	d80a      	bhi.n	8001032 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800101c:	2200      	movs	r2, #0
 800101e:	6879      	ldr	r1, [r7, #4]
 8001020:	f04f 30ff 	mov.w	r0, #4294967295
 8001024:	f000 f909 	bl	800123a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001028:	4a06      	ldr	r2, [pc, #24]	; (8001044 <HAL_InitTick+0x5c>)
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800102e:	2300      	movs	r3, #0
 8001030:	e000      	b.n	8001034 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001032:	2301      	movs	r3, #1
}
 8001034:	4618      	mov	r0, r3
 8001036:	3708      	adds	r7, #8
 8001038:	46bd      	mov	sp, r7
 800103a:	bd80      	pop	{r7, pc}
 800103c:	20000000 	.word	0x20000000
 8001040:	20000008 	.word	0x20000008
 8001044:	20000004 	.word	0x20000004

08001048 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001048:	b480      	push	{r7}
 800104a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800104c:	4b05      	ldr	r3, [pc, #20]	; (8001064 <HAL_IncTick+0x1c>)
 800104e:	781b      	ldrb	r3, [r3, #0]
 8001050:	461a      	mov	r2, r3
 8001052:	4b05      	ldr	r3, [pc, #20]	; (8001068 <HAL_IncTick+0x20>)
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	4413      	add	r3, r2
 8001058:	4a03      	ldr	r2, [pc, #12]	; (8001068 <HAL_IncTick+0x20>)
 800105a:	6013      	str	r3, [r2, #0]
}
 800105c:	bf00      	nop
 800105e:	46bd      	mov	sp, r7
 8001060:	bc80      	pop	{r7}
 8001062:	4770      	bx	lr
 8001064:	20000008 	.word	0x20000008
 8001068:	2000021c 	.word	0x2000021c

0800106c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800106c:	b480      	push	{r7}
 800106e:	af00      	add	r7, sp, #0
  return uwTick;
 8001070:	4b02      	ldr	r3, [pc, #8]	; (800107c <HAL_GetTick+0x10>)
 8001072:	681b      	ldr	r3, [r3, #0]
}
 8001074:	4618      	mov	r0, r3
 8001076:	46bd      	mov	sp, r7
 8001078:	bc80      	pop	{r7}
 800107a:	4770      	bx	lr
 800107c:	2000021c 	.word	0x2000021c

08001080 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	b084      	sub	sp, #16
 8001084:	af00      	add	r7, sp, #0
 8001086:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001088:	f7ff fff0 	bl	800106c <HAL_GetTick>
 800108c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001092:	68fb      	ldr	r3, [r7, #12]
 8001094:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001098:	d005      	beq.n	80010a6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800109a:	4b09      	ldr	r3, [pc, #36]	; (80010c0 <HAL_Delay+0x40>)
 800109c:	781b      	ldrb	r3, [r3, #0]
 800109e:	461a      	mov	r2, r3
 80010a0:	68fb      	ldr	r3, [r7, #12]
 80010a2:	4413      	add	r3, r2
 80010a4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80010a6:	bf00      	nop
 80010a8:	f7ff ffe0 	bl	800106c <HAL_GetTick>
 80010ac:	4602      	mov	r2, r0
 80010ae:	68bb      	ldr	r3, [r7, #8]
 80010b0:	1ad3      	subs	r3, r2, r3
 80010b2:	68fa      	ldr	r2, [r7, #12]
 80010b4:	429a      	cmp	r2, r3
 80010b6:	d8f7      	bhi.n	80010a8 <HAL_Delay+0x28>
  {
  }
}
 80010b8:	bf00      	nop
 80010ba:	3710      	adds	r7, #16
 80010bc:	46bd      	mov	sp, r7
 80010be:	bd80      	pop	{r7, pc}
 80010c0:	20000008 	.word	0x20000008

080010c4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010c4:	b480      	push	{r7}
 80010c6:	b085      	sub	sp, #20
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	f003 0307 	and.w	r3, r3, #7
 80010d2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80010d4:	4b0c      	ldr	r3, [pc, #48]	; (8001108 <__NVIC_SetPriorityGrouping+0x44>)
 80010d6:	68db      	ldr	r3, [r3, #12]
 80010d8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80010da:	68ba      	ldr	r2, [r7, #8]
 80010dc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80010e0:	4013      	ands	r3, r2
 80010e2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80010e4:	68fb      	ldr	r3, [r7, #12]
 80010e6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80010e8:	68bb      	ldr	r3, [r7, #8]
 80010ea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80010ec:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80010f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80010f4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80010f6:	4a04      	ldr	r2, [pc, #16]	; (8001108 <__NVIC_SetPriorityGrouping+0x44>)
 80010f8:	68bb      	ldr	r3, [r7, #8]
 80010fa:	60d3      	str	r3, [r2, #12]
}
 80010fc:	bf00      	nop
 80010fe:	3714      	adds	r7, #20
 8001100:	46bd      	mov	sp, r7
 8001102:	bc80      	pop	{r7}
 8001104:	4770      	bx	lr
 8001106:	bf00      	nop
 8001108:	e000ed00 	.word	0xe000ed00

0800110c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800110c:	b480      	push	{r7}
 800110e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001110:	4b04      	ldr	r3, [pc, #16]	; (8001124 <__NVIC_GetPriorityGrouping+0x18>)
 8001112:	68db      	ldr	r3, [r3, #12]
 8001114:	0a1b      	lsrs	r3, r3, #8
 8001116:	f003 0307 	and.w	r3, r3, #7
}
 800111a:	4618      	mov	r0, r3
 800111c:	46bd      	mov	sp, r7
 800111e:	bc80      	pop	{r7}
 8001120:	4770      	bx	lr
 8001122:	bf00      	nop
 8001124:	e000ed00 	.word	0xe000ed00

08001128 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001128:	b480      	push	{r7}
 800112a:	b083      	sub	sp, #12
 800112c:	af00      	add	r7, sp, #0
 800112e:	4603      	mov	r3, r0
 8001130:	6039      	str	r1, [r7, #0]
 8001132:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001134:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001138:	2b00      	cmp	r3, #0
 800113a:	db0a      	blt.n	8001152 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800113c:	683b      	ldr	r3, [r7, #0]
 800113e:	b2da      	uxtb	r2, r3
 8001140:	490c      	ldr	r1, [pc, #48]	; (8001174 <__NVIC_SetPriority+0x4c>)
 8001142:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001146:	0112      	lsls	r2, r2, #4
 8001148:	b2d2      	uxtb	r2, r2
 800114a:	440b      	add	r3, r1
 800114c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001150:	e00a      	b.n	8001168 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001152:	683b      	ldr	r3, [r7, #0]
 8001154:	b2da      	uxtb	r2, r3
 8001156:	4908      	ldr	r1, [pc, #32]	; (8001178 <__NVIC_SetPriority+0x50>)
 8001158:	79fb      	ldrb	r3, [r7, #7]
 800115a:	f003 030f 	and.w	r3, r3, #15
 800115e:	3b04      	subs	r3, #4
 8001160:	0112      	lsls	r2, r2, #4
 8001162:	b2d2      	uxtb	r2, r2
 8001164:	440b      	add	r3, r1
 8001166:	761a      	strb	r2, [r3, #24]
}
 8001168:	bf00      	nop
 800116a:	370c      	adds	r7, #12
 800116c:	46bd      	mov	sp, r7
 800116e:	bc80      	pop	{r7}
 8001170:	4770      	bx	lr
 8001172:	bf00      	nop
 8001174:	e000e100 	.word	0xe000e100
 8001178:	e000ed00 	.word	0xe000ed00

0800117c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800117c:	b480      	push	{r7}
 800117e:	b089      	sub	sp, #36	; 0x24
 8001180:	af00      	add	r7, sp, #0
 8001182:	60f8      	str	r0, [r7, #12]
 8001184:	60b9      	str	r1, [r7, #8]
 8001186:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001188:	68fb      	ldr	r3, [r7, #12]
 800118a:	f003 0307 	and.w	r3, r3, #7
 800118e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001190:	69fb      	ldr	r3, [r7, #28]
 8001192:	f1c3 0307 	rsb	r3, r3, #7
 8001196:	2b04      	cmp	r3, #4
 8001198:	bf28      	it	cs
 800119a:	2304      	movcs	r3, #4
 800119c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800119e:	69fb      	ldr	r3, [r7, #28]
 80011a0:	3304      	adds	r3, #4
 80011a2:	2b06      	cmp	r3, #6
 80011a4:	d902      	bls.n	80011ac <NVIC_EncodePriority+0x30>
 80011a6:	69fb      	ldr	r3, [r7, #28]
 80011a8:	3b03      	subs	r3, #3
 80011aa:	e000      	b.n	80011ae <NVIC_EncodePriority+0x32>
 80011ac:	2300      	movs	r3, #0
 80011ae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011b0:	f04f 32ff 	mov.w	r2, #4294967295
 80011b4:	69bb      	ldr	r3, [r7, #24]
 80011b6:	fa02 f303 	lsl.w	r3, r2, r3
 80011ba:	43da      	mvns	r2, r3
 80011bc:	68bb      	ldr	r3, [r7, #8]
 80011be:	401a      	ands	r2, r3
 80011c0:	697b      	ldr	r3, [r7, #20]
 80011c2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80011c4:	f04f 31ff 	mov.w	r1, #4294967295
 80011c8:	697b      	ldr	r3, [r7, #20]
 80011ca:	fa01 f303 	lsl.w	r3, r1, r3
 80011ce:	43d9      	mvns	r1, r3
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011d4:	4313      	orrs	r3, r2
         );
}
 80011d6:	4618      	mov	r0, r3
 80011d8:	3724      	adds	r7, #36	; 0x24
 80011da:	46bd      	mov	sp, r7
 80011dc:	bc80      	pop	{r7}
 80011de:	4770      	bx	lr

080011e0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	b082      	sub	sp, #8
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	3b01      	subs	r3, #1
 80011ec:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80011f0:	d301      	bcc.n	80011f6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80011f2:	2301      	movs	r3, #1
 80011f4:	e00f      	b.n	8001216 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80011f6:	4a0a      	ldr	r2, [pc, #40]	; (8001220 <SysTick_Config+0x40>)
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	3b01      	subs	r3, #1
 80011fc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80011fe:	210f      	movs	r1, #15
 8001200:	f04f 30ff 	mov.w	r0, #4294967295
 8001204:	f7ff ff90 	bl	8001128 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001208:	4b05      	ldr	r3, [pc, #20]	; (8001220 <SysTick_Config+0x40>)
 800120a:	2200      	movs	r2, #0
 800120c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800120e:	4b04      	ldr	r3, [pc, #16]	; (8001220 <SysTick_Config+0x40>)
 8001210:	2207      	movs	r2, #7
 8001212:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001214:	2300      	movs	r3, #0
}
 8001216:	4618      	mov	r0, r3
 8001218:	3708      	adds	r7, #8
 800121a:	46bd      	mov	sp, r7
 800121c:	bd80      	pop	{r7, pc}
 800121e:	bf00      	nop
 8001220:	e000e010 	.word	0xe000e010

08001224 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001224:	b580      	push	{r7, lr}
 8001226:	b082      	sub	sp, #8
 8001228:	af00      	add	r7, sp, #0
 800122a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800122c:	6878      	ldr	r0, [r7, #4]
 800122e:	f7ff ff49 	bl	80010c4 <__NVIC_SetPriorityGrouping>
}
 8001232:	bf00      	nop
 8001234:	3708      	adds	r7, #8
 8001236:	46bd      	mov	sp, r7
 8001238:	bd80      	pop	{r7, pc}

0800123a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800123a:	b580      	push	{r7, lr}
 800123c:	b086      	sub	sp, #24
 800123e:	af00      	add	r7, sp, #0
 8001240:	4603      	mov	r3, r0
 8001242:	60b9      	str	r1, [r7, #8]
 8001244:	607a      	str	r2, [r7, #4]
 8001246:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001248:	2300      	movs	r3, #0
 800124a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800124c:	f7ff ff5e 	bl	800110c <__NVIC_GetPriorityGrouping>
 8001250:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001252:	687a      	ldr	r2, [r7, #4]
 8001254:	68b9      	ldr	r1, [r7, #8]
 8001256:	6978      	ldr	r0, [r7, #20]
 8001258:	f7ff ff90 	bl	800117c <NVIC_EncodePriority>
 800125c:	4602      	mov	r2, r0
 800125e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001262:	4611      	mov	r1, r2
 8001264:	4618      	mov	r0, r3
 8001266:	f7ff ff5f 	bl	8001128 <__NVIC_SetPriority>
}
 800126a:	bf00      	nop
 800126c:	3718      	adds	r7, #24
 800126e:	46bd      	mov	sp, r7
 8001270:	bd80      	pop	{r7, pc}

08001272 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001272:	b580      	push	{r7, lr}
 8001274:	b082      	sub	sp, #8
 8001276:	af00      	add	r7, sp, #0
 8001278:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800127a:	6878      	ldr	r0, [r7, #4]
 800127c:	f7ff ffb0 	bl	80011e0 <SysTick_Config>
 8001280:	4603      	mov	r3, r0
}
 8001282:	4618      	mov	r0, r3
 8001284:	3708      	adds	r7, #8
 8001286:	46bd      	mov	sp, r7
 8001288:	bd80      	pop	{r7, pc}
	...

0800128c <HAL_FLASH_Program>:
  * @param  Data:         Specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 800128c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800128e:	b087      	sub	sp, #28
 8001290:	af00      	add	r7, sp, #0
 8001292:	60f8      	str	r0, [r7, #12]
 8001294:	60b9      	str	r1, [r7, #8]
 8001296:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 800129a:	2301      	movs	r3, #1
 800129c:	75fb      	strb	r3, [r7, #23]
  uint8_t index = 0;
 800129e:	2300      	movs	r3, #0
 80012a0:	75bb      	strb	r3, [r7, #22]
  uint8_t nbiterations = 0;
 80012a2:	2300      	movs	r3, #0
 80012a4:	757b      	strb	r3, [r7, #21]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80012a6:	4b2f      	ldr	r3, [pc, #188]	; (8001364 <HAL_FLASH_Program+0xd8>)
 80012a8:	7e1b      	ldrb	r3, [r3, #24]
 80012aa:	2b01      	cmp	r3, #1
 80012ac:	d101      	bne.n	80012b2 <HAL_FLASH_Program+0x26>
 80012ae:	2302      	movs	r3, #2
 80012b0:	e054      	b.n	800135c <HAL_FLASH_Program+0xd0>
 80012b2:	4b2c      	ldr	r3, [pc, #176]	; (8001364 <HAL_FLASH_Program+0xd8>)
 80012b4:	2201      	movs	r2, #1
 80012b6:	761a      	strb	r2, [r3, #24]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80012b8:	f24c 3050 	movw	r0, #50000	; 0xc350
 80012bc:	f000 f8a8 	bl	8001410 <FLASH_WaitForLastOperation>
 80012c0:	4603      	mov	r3, r0
 80012c2:	75fb      	strb	r3, [r7, #23]
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperationBank2(FLASH_TIMEOUT_VALUE);
  }
#endif /* FLASH_BANK2_END */
  
  if(status == HAL_OK)
 80012c4:	7dfb      	ldrb	r3, [r7, #23]
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d144      	bne.n	8001354 <HAL_FLASH_Program+0xc8>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 80012ca:	68fb      	ldr	r3, [r7, #12]
 80012cc:	2b01      	cmp	r3, #1
 80012ce:	d102      	bne.n	80012d6 <HAL_FLASH_Program+0x4a>
    {
      /* Program halfword (16-bit) at a specified address. */
      nbiterations = 1U;
 80012d0:	2301      	movs	r3, #1
 80012d2:	757b      	strb	r3, [r7, #21]
 80012d4:	e007      	b.n	80012e6 <HAL_FLASH_Program+0x5a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 80012d6:	68fb      	ldr	r3, [r7, #12]
 80012d8:	2b02      	cmp	r3, #2
 80012da:	d102      	bne.n	80012e2 <HAL_FLASH_Program+0x56>
    {
      /* Program word (32-bit = 2*16-bit) at a specified address. */
      nbiterations = 2U;
 80012dc:	2302      	movs	r3, #2
 80012de:	757b      	strb	r3, [r7, #21]
 80012e0:	e001      	b.n	80012e6 <HAL_FLASH_Program+0x5a>
    }
    else
    {
      /* Program double word (64-bit = 4*16-bit) at a specified address. */
      nbiterations = 4U;
 80012e2:	2304      	movs	r3, #4
 80012e4:	757b      	strb	r3, [r7, #21]
    }

    for (index = 0U; index < nbiterations; index++)
 80012e6:	2300      	movs	r3, #0
 80012e8:	75bb      	strb	r3, [r7, #22]
 80012ea:	e02d      	b.n	8001348 <HAL_FLASH_Program+0xbc>
    {
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 80012ec:	7dbb      	ldrb	r3, [r7, #22]
 80012ee:	005a      	lsls	r2, r3, #1
 80012f0:	68bb      	ldr	r3, [r7, #8]
 80012f2:	eb02 0c03 	add.w	ip, r2, r3
 80012f6:	7dbb      	ldrb	r3, [r7, #22]
 80012f8:	0119      	lsls	r1, r3, #4
 80012fa:	e9d7 2300 	ldrd	r2, r3, [r7]
 80012fe:	f1c1 0620 	rsb	r6, r1, #32
 8001302:	f1a1 0020 	sub.w	r0, r1, #32
 8001306:	fa22 f401 	lsr.w	r4, r2, r1
 800130a:	fa03 f606 	lsl.w	r6, r3, r6
 800130e:	4334      	orrs	r4, r6
 8001310:	fa23 f000 	lsr.w	r0, r3, r0
 8001314:	4304      	orrs	r4, r0
 8001316:	fa23 f501 	lsr.w	r5, r3, r1
 800131a:	b2a3      	uxth	r3, r4
 800131c:	4619      	mov	r1, r3
 800131e:	4660      	mov	r0, ip
 8001320:	f000 f85a 	bl	80013d8 <FLASH_Program_HalfWord>
#if defined(FLASH_BANK2_END)
      if(Address <= FLASH_BANK1_END)
      {
#endif /* FLASH_BANK2_END */
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8001324:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001328:	f000 f872 	bl	8001410 <FLASH_WaitForLastOperation>
 800132c:	4603      	mov	r3, r0
 800132e:	75fb      	strb	r3, [r7, #23]
    
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8001330:	4b0d      	ldr	r3, [pc, #52]	; (8001368 <HAL_FLASH_Program+0xdc>)
 8001332:	691b      	ldr	r3, [r3, #16]
 8001334:	4a0c      	ldr	r2, [pc, #48]	; (8001368 <HAL_FLASH_Program+0xdc>)
 8001336:	f023 0301 	bic.w	r3, r3, #1
 800133a:	6113      	str	r3, [r2, #16]
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR2, FLASH_CR2_PG);
      }
#endif /* FLASH_BANK2_END */
      /* In case of error, stop programation procedure */
      if (status != HAL_OK)
 800133c:	7dfb      	ldrb	r3, [r7, #23]
 800133e:	2b00      	cmp	r3, #0
 8001340:	d107      	bne.n	8001352 <HAL_FLASH_Program+0xc6>
    for (index = 0U; index < nbiterations; index++)
 8001342:	7dbb      	ldrb	r3, [r7, #22]
 8001344:	3301      	adds	r3, #1
 8001346:	75bb      	strb	r3, [r7, #22]
 8001348:	7dba      	ldrb	r2, [r7, #22]
 800134a:	7d7b      	ldrb	r3, [r7, #21]
 800134c:	429a      	cmp	r2, r3
 800134e:	d3cd      	bcc.n	80012ec <HAL_FLASH_Program+0x60>
 8001350:	e000      	b.n	8001354 <HAL_FLASH_Program+0xc8>
      {
        break;
 8001352:	bf00      	nop
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8001354:	4b03      	ldr	r3, [pc, #12]	; (8001364 <HAL_FLASH_Program+0xd8>)
 8001356:	2200      	movs	r2, #0
 8001358:	761a      	strb	r2, [r3, #24]

  return status;
 800135a:	7dfb      	ldrb	r3, [r7, #23]
}
 800135c:	4618      	mov	r0, r3
 800135e:	371c      	adds	r7, #28
 8001360:	46bd      	mov	sp, r7
 8001362:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001364:	20000220 	.word	0x20000220
 8001368:	40022000 	.word	0x40022000

0800136c <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 800136c:	b480      	push	{r7}
 800136e:	b083      	sub	sp, #12
 8001370:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8001372:	2300      	movs	r3, #0
 8001374:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8001376:	4b0d      	ldr	r3, [pc, #52]	; (80013ac <HAL_FLASH_Unlock+0x40>)
 8001378:	691b      	ldr	r3, [r3, #16]
 800137a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800137e:	2b00      	cmp	r3, #0
 8001380:	d00d      	beq.n	800139e <HAL_FLASH_Unlock+0x32>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8001382:	4b0a      	ldr	r3, [pc, #40]	; (80013ac <HAL_FLASH_Unlock+0x40>)
 8001384:	4a0a      	ldr	r2, [pc, #40]	; (80013b0 <HAL_FLASH_Unlock+0x44>)
 8001386:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8001388:	4b08      	ldr	r3, [pc, #32]	; (80013ac <HAL_FLASH_Unlock+0x40>)
 800138a:	4a0a      	ldr	r2, [pc, #40]	; (80013b4 <HAL_FLASH_Unlock+0x48>)
 800138c:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800138e:	4b07      	ldr	r3, [pc, #28]	; (80013ac <HAL_FLASH_Unlock+0x40>)
 8001390:	691b      	ldr	r3, [r3, #16]
 8001392:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001396:	2b00      	cmp	r3, #0
 8001398:	d001      	beq.n	800139e <HAL_FLASH_Unlock+0x32>
    {
      status = HAL_ERROR;
 800139a:	2301      	movs	r3, #1
 800139c:	71fb      	strb	r3, [r7, #7]
      status = HAL_ERROR;
    }
  }
#endif /* FLASH_BANK2_END */

  return status;
 800139e:	79fb      	ldrb	r3, [r7, #7]
}
 80013a0:	4618      	mov	r0, r3
 80013a2:	370c      	adds	r7, #12
 80013a4:	46bd      	mov	sp, r7
 80013a6:	bc80      	pop	{r7}
 80013a8:	4770      	bx	lr
 80013aa:	bf00      	nop
 80013ac:	40022000 	.word	0x40022000
 80013b0:	45670123 	.word	0x45670123
 80013b4:	cdef89ab 	.word	0xcdef89ab

080013b8 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 80013b8:	b480      	push	{r7}
 80013ba:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 80013bc:	4b05      	ldr	r3, [pc, #20]	; (80013d4 <HAL_FLASH_Lock+0x1c>)
 80013be:	691b      	ldr	r3, [r3, #16]
 80013c0:	4a04      	ldr	r2, [pc, #16]	; (80013d4 <HAL_FLASH_Lock+0x1c>)
 80013c2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80013c6:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  /* Set the LOCK Bit to lock the FLASH BANK2 Registers access */
  SET_BIT(FLASH->CR2, FLASH_CR2_LOCK);

#endif /* FLASH_BANK2_END */
  return HAL_OK;  
 80013c8:	2300      	movs	r3, #0
}
 80013ca:	4618      	mov	r0, r3
 80013cc:	46bd      	mov	sp, r7
 80013ce:	bc80      	pop	{r7}
 80013d0:	4770      	bx	lr
 80013d2:	bf00      	nop
 80013d4:	40022000 	.word	0x40022000

080013d8 <FLASH_Program_HalfWord>:
  * @param  Address specify the address to be programmed.
  * @param  Data    specify the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 80013d8:	b480      	push	{r7}
 80013da:	b083      	sub	sp, #12
 80013dc:	af00      	add	r7, sp, #0
 80013de:	6078      	str	r0, [r7, #4]
 80013e0:	460b      	mov	r3, r1
 80013e2:	807b      	strh	r3, [r7, #2]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80013e4:	4b08      	ldr	r3, [pc, #32]	; (8001408 <FLASH_Program_HalfWord+0x30>)
 80013e6:	2200      	movs	r2, #0
 80013e8:	61da      	str	r2, [r3, #28]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to program the new data */
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 80013ea:	4b08      	ldr	r3, [pc, #32]	; (800140c <FLASH_Program_HalfWord+0x34>)
 80013ec:	691b      	ldr	r3, [r3, #16]
 80013ee:	4a07      	ldr	r2, [pc, #28]	; (800140c <FLASH_Program_HalfWord+0x34>)
 80013f0:	f043 0301 	orr.w	r3, r3, #1
 80013f4:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR2, FLASH_CR2_PG);
  }
#endif /* FLASH_BANK2_END */

  /* Write data in the address */
  *(__IO uint16_t*)Address = Data;
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	887a      	ldrh	r2, [r7, #2]
 80013fa:	801a      	strh	r2, [r3, #0]
}
 80013fc:	bf00      	nop
 80013fe:	370c      	adds	r7, #12
 8001400:	46bd      	mov	sp, r7
 8001402:	bc80      	pop	{r7}
 8001404:	4770      	bx	lr
 8001406:	bf00      	nop
 8001408:	20000220 	.word	0x20000220
 800140c:	40022000 	.word	0x40022000

08001410 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8001410:	b580      	push	{r7, lr}
 8001412:	b084      	sub	sp, #16
 8001414:	af00      	add	r7, sp, #0
 8001416:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 8001418:	f7ff fe28 	bl	800106c <HAL_GetTick>
 800141c:	60f8      	str	r0, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 800141e:	e010      	b.n	8001442 <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001426:	d00c      	beq.n	8001442 <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	2b00      	cmp	r3, #0
 800142c:	d007      	beq.n	800143e <FLASH_WaitForLastOperation+0x2e>
 800142e:	f7ff fe1d 	bl	800106c <HAL_GetTick>
 8001432:	4602      	mov	r2, r0
 8001434:	68fb      	ldr	r3, [r7, #12]
 8001436:	1ad3      	subs	r3, r2, r3
 8001438:	687a      	ldr	r2, [r7, #4]
 800143a:	429a      	cmp	r2, r3
 800143c:	d201      	bcs.n	8001442 <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 800143e:	2303      	movs	r3, #3
 8001440:	e025      	b.n	800148e <FLASH_WaitForLastOperation+0x7e>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8001442:	4b15      	ldr	r3, [pc, #84]	; (8001498 <FLASH_WaitForLastOperation+0x88>)
 8001444:	68db      	ldr	r3, [r3, #12]
 8001446:	f003 0301 	and.w	r3, r3, #1
 800144a:	2b00      	cmp	r3, #0
 800144c:	d1e8      	bne.n	8001420 <FLASH_WaitForLastOperation+0x10>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 800144e:	4b12      	ldr	r3, [pc, #72]	; (8001498 <FLASH_WaitForLastOperation+0x88>)
 8001450:	68db      	ldr	r3, [r3, #12]
 8001452:	f003 0320 	and.w	r3, r3, #32
 8001456:	2b00      	cmp	r3, #0
 8001458:	d002      	beq.n	8001460 <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 800145a:	4b0f      	ldr	r3, [pc, #60]	; (8001498 <FLASH_WaitForLastOperation+0x88>)
 800145c:	2220      	movs	r2, #32
 800145e:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8001460:	4b0d      	ldr	r3, [pc, #52]	; (8001498 <FLASH_WaitForLastOperation+0x88>)
 8001462:	68db      	ldr	r3, [r3, #12]
 8001464:	f003 0310 	and.w	r3, r3, #16
 8001468:	2b00      	cmp	r3, #0
 800146a:	d10b      	bne.n	8001484 <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 800146c:	4b0a      	ldr	r3, [pc, #40]	; (8001498 <FLASH_WaitForLastOperation+0x88>)
 800146e:	69db      	ldr	r3, [r3, #28]
 8001470:	f003 0301 	and.w	r3, r3, #1
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8001474:	2b00      	cmp	r3, #0
 8001476:	d105      	bne.n	8001484 <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8001478:	4b07      	ldr	r3, [pc, #28]	; (8001498 <FLASH_WaitForLastOperation+0x88>)
 800147a:	68db      	ldr	r3, [r3, #12]
 800147c:	f003 0304 	and.w	r3, r3, #4
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8001480:	2b00      	cmp	r3, #0
 8001482:	d003      	beq.n	800148c <FLASH_WaitForLastOperation+0x7c>
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8001484:	f000 f80a 	bl	800149c <FLASH_SetErrorCode>
    return HAL_ERROR;
 8001488:	2301      	movs	r3, #1
 800148a:	e000      	b.n	800148e <FLASH_WaitForLastOperation+0x7e>
  }

  /* There is no error flag set */
  return HAL_OK;
 800148c:	2300      	movs	r3, #0
}
 800148e:	4618      	mov	r0, r3
 8001490:	3710      	adds	r7, #16
 8001492:	46bd      	mov	sp, r7
 8001494:	bd80      	pop	{r7, pc}
 8001496:	bf00      	nop
 8001498:	40022000 	.word	0x40022000

0800149c <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 800149c:	b480      	push	{r7}
 800149e:	b083      	sub	sp, #12
 80014a0:	af00      	add	r7, sp, #0
  uint32_t flags = 0U;
 80014a2:	2300      	movs	r3, #0
 80014a4:	607b      	str	r3, [r7, #4]
  
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 80014a6:	4b23      	ldr	r3, [pc, #140]	; (8001534 <FLASH_SetErrorCode+0x98>)
 80014a8:	68db      	ldr	r3, [r3, #12]
 80014aa:	f003 0310 	and.w	r3, r3, #16
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d009      	beq.n	80014c6 <FLASH_SetErrorCode+0x2a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 80014b2:	4b21      	ldr	r3, [pc, #132]	; (8001538 <FLASH_SetErrorCode+0x9c>)
 80014b4:	69db      	ldr	r3, [r3, #28]
 80014b6:	f043 0302 	orr.w	r3, r3, #2
 80014ba:	4a1f      	ldr	r2, [pc, #124]	; (8001538 <FLASH_SetErrorCode+0x9c>)
 80014bc:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_WRPERR | FLASH_FLAG_WRPERR_BANK2;
#else
    flags |= FLASH_FLAG_WRPERR;
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	f043 0310 	orr.w	r3, r3, #16
 80014c4:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 80014c6:	4b1b      	ldr	r3, [pc, #108]	; (8001534 <FLASH_SetErrorCode+0x98>)
 80014c8:	68db      	ldr	r3, [r3, #12]
 80014ca:	f003 0304 	and.w	r3, r3, #4
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d009      	beq.n	80014e6 <FLASH_SetErrorCode+0x4a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 80014d2:	4b19      	ldr	r3, [pc, #100]	; (8001538 <FLASH_SetErrorCode+0x9c>)
 80014d4:	69db      	ldr	r3, [r3, #28]
 80014d6:	f043 0301 	orr.w	r3, r3, #1
 80014da:	4a17      	ldr	r2, [pc, #92]	; (8001538 <FLASH_SetErrorCode+0x9c>)
 80014dc:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_PGERR | FLASH_FLAG_PGERR_BANK2;
#else
    flags |= FLASH_FLAG_PGERR;
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	f043 0304 	orr.w	r3, r3, #4
 80014e4:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 80014e6:	4b13      	ldr	r3, [pc, #76]	; (8001534 <FLASH_SetErrorCode+0x98>)
 80014e8:	69db      	ldr	r3, [r3, #28]
 80014ea:	f003 0301 	and.w	r3, r3, #1
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d00b      	beq.n	800150a <FLASH_SetErrorCode+0x6e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 80014f2:	4b11      	ldr	r3, [pc, #68]	; (8001538 <FLASH_SetErrorCode+0x9c>)
 80014f4:	69db      	ldr	r3, [r3, #28]
 80014f6:	f043 0304 	orr.w	r3, r3, #4
 80014fa:	4a0f      	ldr	r2, [pc, #60]	; (8001538 <FLASH_SetErrorCode+0x9c>)
 80014fc:	61d3      	str	r3, [r2, #28]
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 80014fe:	4b0d      	ldr	r3, [pc, #52]	; (8001534 <FLASH_SetErrorCode+0x98>)
 8001500:	69db      	ldr	r3, [r3, #28]
 8001502:	4a0c      	ldr	r2, [pc, #48]	; (8001534 <FLASH_SetErrorCode+0x98>)
 8001504:	f023 0301 	bic.w	r3, r3, #1
 8001508:	61d3      	str	r3, [r2, #28]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	f240 1201 	movw	r2, #257	; 0x101
 8001510:	4293      	cmp	r3, r2
 8001512:	d106      	bne.n	8001522 <FLASH_SetErrorCode+0x86>
 8001514:	4b07      	ldr	r3, [pc, #28]	; (8001534 <FLASH_SetErrorCode+0x98>)
 8001516:	69db      	ldr	r3, [r3, #28]
 8001518:	4a06      	ldr	r2, [pc, #24]	; (8001534 <FLASH_SetErrorCode+0x98>)
 800151a:	f023 0301 	bic.w	r3, r3, #1
 800151e:	61d3      	str	r3, [r2, #28]
}  
 8001520:	e002      	b.n	8001528 <FLASH_SetErrorCode+0x8c>
  __HAL_FLASH_CLEAR_FLAG(flags);
 8001522:	4a04      	ldr	r2, [pc, #16]	; (8001534 <FLASH_SetErrorCode+0x98>)
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	60d3      	str	r3, [r2, #12]
}  
 8001528:	bf00      	nop
 800152a:	370c      	adds	r7, #12
 800152c:	46bd      	mov	sp, r7
 800152e:	bc80      	pop	{r7}
 8001530:	4770      	bx	lr
 8001532:	bf00      	nop
 8001534:	40022000 	.word	0x40022000
 8001538:	20000220 	.word	0x20000220

0800153c <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFF means that all the pages have been correctly erased)
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	b084      	sub	sp, #16
 8001540:	af00      	add	r7, sp, #0
 8001542:	6078      	str	r0, [r7, #4]
 8001544:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8001546:	2301      	movs	r3, #1
 8001548:	73fb      	strb	r3, [r7, #15]
  uint32_t address = 0U;
 800154a:	2300      	movs	r3, #0
 800154c:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800154e:	4b2f      	ldr	r3, [pc, #188]	; (800160c <HAL_FLASHEx_Erase+0xd0>)
 8001550:	7e1b      	ldrb	r3, [r3, #24]
 8001552:	2b01      	cmp	r3, #1
 8001554:	d101      	bne.n	800155a <HAL_FLASHEx_Erase+0x1e>
 8001556:	2302      	movs	r3, #2
 8001558:	e053      	b.n	8001602 <HAL_FLASHEx_Erase+0xc6>
 800155a:	4b2c      	ldr	r3, [pc, #176]	; (800160c <HAL_FLASHEx_Erase+0xd0>)
 800155c:	2201      	movs	r2, #1
 800155e:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	2b02      	cmp	r3, #2
 8001566:	d116      	bne.n	8001596 <HAL_FLASHEx_Erase+0x5a>
    else 
#endif /* FLASH_BANK2_END */
    {
      /* Mass Erase requested for Bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8001568:	f24c 3050 	movw	r0, #50000	; 0xc350
 800156c:	f7ff ff50 	bl	8001410 <FLASH_WaitForLastOperation>
 8001570:	4603      	mov	r3, r0
 8001572:	2b00      	cmp	r3, #0
 8001574:	d141      	bne.n	80015fa <HAL_FLASHEx_Erase+0xbe>
      {
        /*Mass erase to be done*/
        FLASH_MassErase(FLASH_BANK_1);
 8001576:	2001      	movs	r0, #1
 8001578:	f000 f84c 	bl	8001614 <FLASH_MassErase>
        
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800157c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001580:	f7ff ff46 	bl	8001410 <FLASH_WaitForLastOperation>
 8001584:	4603      	mov	r3, r0
 8001586:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the MER Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 8001588:	4b21      	ldr	r3, [pc, #132]	; (8001610 <HAL_FLASHEx_Erase+0xd4>)
 800158a:	691b      	ldr	r3, [r3, #16]
 800158c:	4a20      	ldr	r2, [pc, #128]	; (8001610 <HAL_FLASHEx_Erase+0xd4>)
 800158e:	f023 0304 	bic.w	r3, r3, #4
 8001592:	6113      	str	r3, [r2, #16]
 8001594:	e031      	b.n	80015fa <HAL_FLASHEx_Erase+0xbe>
    else
#endif /* FLASH_BANK2_END */
   {
      /* Page Erase requested on address located on bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8001596:	f24c 3050 	movw	r0, #50000	; 0xc350
 800159a:	f7ff ff39 	bl	8001410 <FLASH_WaitForLastOperation>
 800159e:	4603      	mov	r3, r0
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d12a      	bne.n	80015fa <HAL_FLASHEx_Erase+0xbe>
      {
        /*Initialization of PageError variable*/
        *PageError = 0xFFFFFFFFU;
 80015a4:	683b      	ldr	r3, [r7, #0]
 80015a6:	f04f 32ff 	mov.w	r2, #4294967295
 80015aa:	601a      	str	r2, [r3, #0]
        
        /* Erase page by page to be done*/
        for(address = pEraseInit->PageAddress;
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	689b      	ldr	r3, [r3, #8]
 80015b0:	60bb      	str	r3, [r7, #8]
 80015b2:	e019      	b.n	80015e8 <HAL_FLASHEx_Erase+0xac>
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
            address += FLASH_PAGE_SIZE)
        {
          FLASH_PageErase(address);
 80015b4:	68b8      	ldr	r0, [r7, #8]
 80015b6:	f000 f849 	bl	800164c <FLASH_PageErase>
          
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80015ba:	f24c 3050 	movw	r0, #50000	; 0xc350
 80015be:	f7ff ff27 	bl	8001410 <FLASH_WaitForLastOperation>
 80015c2:	4603      	mov	r3, r0
 80015c4:	73fb      	strb	r3, [r7, #15]
          
          /* If the erase operation is completed, disable the PER Bit */
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 80015c6:	4b12      	ldr	r3, [pc, #72]	; (8001610 <HAL_FLASHEx_Erase+0xd4>)
 80015c8:	691b      	ldr	r3, [r3, #16]
 80015ca:	4a11      	ldr	r2, [pc, #68]	; (8001610 <HAL_FLASHEx_Erase+0xd4>)
 80015cc:	f023 0302 	bic.w	r3, r3, #2
 80015d0:	6113      	str	r3, [r2, #16]
          
          if (status != HAL_OK)
 80015d2:	7bfb      	ldrb	r3, [r7, #15]
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d003      	beq.n	80015e0 <HAL_FLASHEx_Erase+0xa4>
          {
            /* In case of error, stop erase procedure and return the faulty address */
            *PageError = address;
 80015d8:	683b      	ldr	r3, [r7, #0]
 80015da:	68ba      	ldr	r2, [r7, #8]
 80015dc:	601a      	str	r2, [r3, #0]
            break;
 80015de:	e00c      	b.n	80015fa <HAL_FLASHEx_Erase+0xbe>
            address += FLASH_PAGE_SIZE)
 80015e0:	68bb      	ldr	r3, [r7, #8]
 80015e2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80015e6:	60bb      	str	r3, [r7, #8]
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	68db      	ldr	r3, [r3, #12]
 80015ec:	029a      	lsls	r2, r3, #10
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	689b      	ldr	r3, [r3, #8]
 80015f2:	4413      	add	r3, r2
        for(address = pEraseInit->PageAddress;
 80015f4:	68ba      	ldr	r2, [r7, #8]
 80015f6:	429a      	cmp	r2, r3
 80015f8:	d3dc      	bcc.n	80015b4 <HAL_FLASHEx_Erase+0x78>
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80015fa:	4b04      	ldr	r3, [pc, #16]	; (800160c <HAL_FLASHEx_Erase+0xd0>)
 80015fc:	2200      	movs	r2, #0
 80015fe:	761a      	strb	r2, [r3, #24]

  return status;
 8001600:	7bfb      	ldrb	r3, [r7, #15]
}
 8001602:	4618      	mov	r0, r3
 8001604:	3710      	adds	r7, #16
 8001606:	46bd      	mov	sp, r7
 8001608:	bd80      	pop	{r7, pc}
 800160a:	bf00      	nop
 800160c:	20000220 	.word	0x20000220
 8001610:	40022000 	.word	0x40022000

08001614 <FLASH_MassErase>:
  @endif
  *
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 8001614:	b480      	push	{r7}
 8001616:	b083      	sub	sp, #12
 8001618:	af00      	add	r7, sp, #0
 800161a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_BANK(Banks));

  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800161c:	4b09      	ldr	r3, [pc, #36]	; (8001644 <FLASH_MassErase+0x30>)
 800161e:	2200      	movs	r2, #0
 8001620:	61da      	str	r2, [r3, #28]
#if !defined(FLASH_BANK2_END)
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif /* FLASH_BANK2_END */  
    /* Only bank1 will be erased*/
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 8001622:	4b09      	ldr	r3, [pc, #36]	; (8001648 <FLASH_MassErase+0x34>)
 8001624:	691b      	ldr	r3, [r3, #16]
 8001626:	4a08      	ldr	r2, [pc, #32]	; (8001648 <FLASH_MassErase+0x34>)
 8001628:	f043 0304 	orr.w	r3, r3, #4
 800162c:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 800162e:	4b06      	ldr	r3, [pc, #24]	; (8001648 <FLASH_MassErase+0x34>)
 8001630:	691b      	ldr	r3, [r3, #16]
 8001632:	4a05      	ldr	r2, [pc, #20]	; (8001648 <FLASH_MassErase+0x34>)
 8001634:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001638:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 800163a:	bf00      	nop
 800163c:	370c      	adds	r7, #12
 800163e:	46bd      	mov	sp, r7
 8001640:	bc80      	pop	{r7}
 8001642:	4770      	bx	lr
 8001644:	20000220 	.word	0x20000220
 8001648:	40022000 	.word	0x40022000

0800164c <FLASH_PageErase>:
  *         The value of this parameter depend on device used within the same series      
  * 
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
 800164c:	b480      	push	{r7}
 800164e:	b083      	sub	sp, #12
 8001650:	af00      	add	r7, sp, #0
 8001652:	6078      	str	r0, [r7, #4]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8001654:	4b0b      	ldr	r3, [pc, #44]	; (8001684 <FLASH_PageErase+0x38>)
 8001656:	2200      	movs	r2, #0
 8001658:	61da      	str	r2, [r3, #28]
  }
  else
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 800165a:	4b0b      	ldr	r3, [pc, #44]	; (8001688 <FLASH_PageErase+0x3c>)
 800165c:	691b      	ldr	r3, [r3, #16]
 800165e:	4a0a      	ldr	r2, [pc, #40]	; (8001688 <FLASH_PageErase+0x3c>)
 8001660:	f043 0302 	orr.w	r3, r3, #2
 8001664:	6113      	str	r3, [r2, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 8001666:	4a08      	ldr	r2, [pc, #32]	; (8001688 <FLASH_PageErase+0x3c>)
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 800166c:	4b06      	ldr	r3, [pc, #24]	; (8001688 <FLASH_PageErase+0x3c>)
 800166e:	691b      	ldr	r3, [r3, #16]
 8001670:	4a05      	ldr	r2, [pc, #20]	; (8001688 <FLASH_PageErase+0x3c>)
 8001672:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001676:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 8001678:	bf00      	nop
 800167a:	370c      	adds	r7, #12
 800167c:	46bd      	mov	sp, r7
 800167e:	bc80      	pop	{r7}
 8001680:	4770      	bx	lr
 8001682:	bf00      	nop
 8001684:	20000220 	.word	0x20000220
 8001688:	40022000 	.word	0x40022000

0800168c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800168c:	b480      	push	{r7}
 800168e:	b08b      	sub	sp, #44	; 0x2c
 8001690:	af00      	add	r7, sp, #0
 8001692:	6078      	str	r0, [r7, #4]
 8001694:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001696:	2300      	movs	r3, #0
 8001698:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800169a:	2300      	movs	r3, #0
 800169c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800169e:	e127      	b.n	80018f0 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80016a0:	2201      	movs	r2, #1
 80016a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016a4:	fa02 f303 	lsl.w	r3, r2, r3
 80016a8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80016aa:	683b      	ldr	r3, [r7, #0]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	69fa      	ldr	r2, [r7, #28]
 80016b0:	4013      	ands	r3, r2
 80016b2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80016b4:	69ba      	ldr	r2, [r7, #24]
 80016b6:	69fb      	ldr	r3, [r7, #28]
 80016b8:	429a      	cmp	r2, r3
 80016ba:	f040 8116 	bne.w	80018ea <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80016be:	683b      	ldr	r3, [r7, #0]
 80016c0:	685b      	ldr	r3, [r3, #4]
 80016c2:	2b12      	cmp	r3, #18
 80016c4:	d034      	beq.n	8001730 <HAL_GPIO_Init+0xa4>
 80016c6:	2b12      	cmp	r3, #18
 80016c8:	d80d      	bhi.n	80016e6 <HAL_GPIO_Init+0x5a>
 80016ca:	2b02      	cmp	r3, #2
 80016cc:	d02b      	beq.n	8001726 <HAL_GPIO_Init+0x9a>
 80016ce:	2b02      	cmp	r3, #2
 80016d0:	d804      	bhi.n	80016dc <HAL_GPIO_Init+0x50>
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d031      	beq.n	800173a <HAL_GPIO_Init+0xae>
 80016d6:	2b01      	cmp	r3, #1
 80016d8:	d01c      	beq.n	8001714 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80016da:	e048      	b.n	800176e <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80016dc:	2b03      	cmp	r3, #3
 80016de:	d043      	beq.n	8001768 <HAL_GPIO_Init+0xdc>
 80016e0:	2b11      	cmp	r3, #17
 80016e2:	d01b      	beq.n	800171c <HAL_GPIO_Init+0x90>
          break;
 80016e4:	e043      	b.n	800176e <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80016e6:	4a89      	ldr	r2, [pc, #548]	; (800190c <HAL_GPIO_Init+0x280>)
 80016e8:	4293      	cmp	r3, r2
 80016ea:	d026      	beq.n	800173a <HAL_GPIO_Init+0xae>
 80016ec:	4a87      	ldr	r2, [pc, #540]	; (800190c <HAL_GPIO_Init+0x280>)
 80016ee:	4293      	cmp	r3, r2
 80016f0:	d806      	bhi.n	8001700 <HAL_GPIO_Init+0x74>
 80016f2:	4a87      	ldr	r2, [pc, #540]	; (8001910 <HAL_GPIO_Init+0x284>)
 80016f4:	4293      	cmp	r3, r2
 80016f6:	d020      	beq.n	800173a <HAL_GPIO_Init+0xae>
 80016f8:	4a86      	ldr	r2, [pc, #536]	; (8001914 <HAL_GPIO_Init+0x288>)
 80016fa:	4293      	cmp	r3, r2
 80016fc:	d01d      	beq.n	800173a <HAL_GPIO_Init+0xae>
          break;
 80016fe:	e036      	b.n	800176e <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001700:	4a85      	ldr	r2, [pc, #532]	; (8001918 <HAL_GPIO_Init+0x28c>)
 8001702:	4293      	cmp	r3, r2
 8001704:	d019      	beq.n	800173a <HAL_GPIO_Init+0xae>
 8001706:	4a85      	ldr	r2, [pc, #532]	; (800191c <HAL_GPIO_Init+0x290>)
 8001708:	4293      	cmp	r3, r2
 800170a:	d016      	beq.n	800173a <HAL_GPIO_Init+0xae>
 800170c:	4a84      	ldr	r2, [pc, #528]	; (8001920 <HAL_GPIO_Init+0x294>)
 800170e:	4293      	cmp	r3, r2
 8001710:	d013      	beq.n	800173a <HAL_GPIO_Init+0xae>
          break;
 8001712:	e02c      	b.n	800176e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001714:	683b      	ldr	r3, [r7, #0]
 8001716:	68db      	ldr	r3, [r3, #12]
 8001718:	623b      	str	r3, [r7, #32]
          break;
 800171a:	e028      	b.n	800176e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800171c:	683b      	ldr	r3, [r7, #0]
 800171e:	68db      	ldr	r3, [r3, #12]
 8001720:	3304      	adds	r3, #4
 8001722:	623b      	str	r3, [r7, #32]
          break;
 8001724:	e023      	b.n	800176e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001726:	683b      	ldr	r3, [r7, #0]
 8001728:	68db      	ldr	r3, [r3, #12]
 800172a:	3308      	adds	r3, #8
 800172c:	623b      	str	r3, [r7, #32]
          break;
 800172e:	e01e      	b.n	800176e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001730:	683b      	ldr	r3, [r7, #0]
 8001732:	68db      	ldr	r3, [r3, #12]
 8001734:	330c      	adds	r3, #12
 8001736:	623b      	str	r3, [r7, #32]
          break;
 8001738:	e019      	b.n	800176e <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800173a:	683b      	ldr	r3, [r7, #0]
 800173c:	689b      	ldr	r3, [r3, #8]
 800173e:	2b00      	cmp	r3, #0
 8001740:	d102      	bne.n	8001748 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001742:	2304      	movs	r3, #4
 8001744:	623b      	str	r3, [r7, #32]
          break;
 8001746:	e012      	b.n	800176e <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001748:	683b      	ldr	r3, [r7, #0]
 800174a:	689b      	ldr	r3, [r3, #8]
 800174c:	2b01      	cmp	r3, #1
 800174e:	d105      	bne.n	800175c <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001750:	2308      	movs	r3, #8
 8001752:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	69fa      	ldr	r2, [r7, #28]
 8001758:	611a      	str	r2, [r3, #16]
          break;
 800175a:	e008      	b.n	800176e <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800175c:	2308      	movs	r3, #8
 800175e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	69fa      	ldr	r2, [r7, #28]
 8001764:	615a      	str	r2, [r3, #20]
          break;
 8001766:	e002      	b.n	800176e <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001768:	2300      	movs	r3, #0
 800176a:	623b      	str	r3, [r7, #32]
          break;
 800176c:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800176e:	69bb      	ldr	r3, [r7, #24]
 8001770:	2bff      	cmp	r3, #255	; 0xff
 8001772:	d801      	bhi.n	8001778 <HAL_GPIO_Init+0xec>
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	e001      	b.n	800177c <HAL_GPIO_Init+0xf0>
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	3304      	adds	r3, #4
 800177c:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800177e:	69bb      	ldr	r3, [r7, #24]
 8001780:	2bff      	cmp	r3, #255	; 0xff
 8001782:	d802      	bhi.n	800178a <HAL_GPIO_Init+0xfe>
 8001784:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001786:	009b      	lsls	r3, r3, #2
 8001788:	e002      	b.n	8001790 <HAL_GPIO_Init+0x104>
 800178a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800178c:	3b08      	subs	r3, #8
 800178e:	009b      	lsls	r3, r3, #2
 8001790:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001792:	697b      	ldr	r3, [r7, #20]
 8001794:	681a      	ldr	r2, [r3, #0]
 8001796:	210f      	movs	r1, #15
 8001798:	693b      	ldr	r3, [r7, #16]
 800179a:	fa01 f303 	lsl.w	r3, r1, r3
 800179e:	43db      	mvns	r3, r3
 80017a0:	401a      	ands	r2, r3
 80017a2:	6a39      	ldr	r1, [r7, #32]
 80017a4:	693b      	ldr	r3, [r7, #16]
 80017a6:	fa01 f303 	lsl.w	r3, r1, r3
 80017aa:	431a      	orrs	r2, r3
 80017ac:	697b      	ldr	r3, [r7, #20]
 80017ae:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80017b0:	683b      	ldr	r3, [r7, #0]
 80017b2:	685b      	ldr	r3, [r3, #4]
 80017b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	f000 8096 	beq.w	80018ea <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80017be:	4b59      	ldr	r3, [pc, #356]	; (8001924 <HAL_GPIO_Init+0x298>)
 80017c0:	699b      	ldr	r3, [r3, #24]
 80017c2:	4a58      	ldr	r2, [pc, #352]	; (8001924 <HAL_GPIO_Init+0x298>)
 80017c4:	f043 0301 	orr.w	r3, r3, #1
 80017c8:	6193      	str	r3, [r2, #24]
 80017ca:	4b56      	ldr	r3, [pc, #344]	; (8001924 <HAL_GPIO_Init+0x298>)
 80017cc:	699b      	ldr	r3, [r3, #24]
 80017ce:	f003 0301 	and.w	r3, r3, #1
 80017d2:	60bb      	str	r3, [r7, #8]
 80017d4:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80017d6:	4a54      	ldr	r2, [pc, #336]	; (8001928 <HAL_GPIO_Init+0x29c>)
 80017d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017da:	089b      	lsrs	r3, r3, #2
 80017dc:	3302      	adds	r3, #2
 80017de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80017e2:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80017e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017e6:	f003 0303 	and.w	r3, r3, #3
 80017ea:	009b      	lsls	r3, r3, #2
 80017ec:	220f      	movs	r2, #15
 80017ee:	fa02 f303 	lsl.w	r3, r2, r3
 80017f2:	43db      	mvns	r3, r3
 80017f4:	68fa      	ldr	r2, [r7, #12]
 80017f6:	4013      	ands	r3, r2
 80017f8:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	4a4b      	ldr	r2, [pc, #300]	; (800192c <HAL_GPIO_Init+0x2a0>)
 80017fe:	4293      	cmp	r3, r2
 8001800:	d013      	beq.n	800182a <HAL_GPIO_Init+0x19e>
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	4a4a      	ldr	r2, [pc, #296]	; (8001930 <HAL_GPIO_Init+0x2a4>)
 8001806:	4293      	cmp	r3, r2
 8001808:	d00d      	beq.n	8001826 <HAL_GPIO_Init+0x19a>
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	4a49      	ldr	r2, [pc, #292]	; (8001934 <HAL_GPIO_Init+0x2a8>)
 800180e:	4293      	cmp	r3, r2
 8001810:	d007      	beq.n	8001822 <HAL_GPIO_Init+0x196>
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	4a48      	ldr	r2, [pc, #288]	; (8001938 <HAL_GPIO_Init+0x2ac>)
 8001816:	4293      	cmp	r3, r2
 8001818:	d101      	bne.n	800181e <HAL_GPIO_Init+0x192>
 800181a:	2303      	movs	r3, #3
 800181c:	e006      	b.n	800182c <HAL_GPIO_Init+0x1a0>
 800181e:	2304      	movs	r3, #4
 8001820:	e004      	b.n	800182c <HAL_GPIO_Init+0x1a0>
 8001822:	2302      	movs	r3, #2
 8001824:	e002      	b.n	800182c <HAL_GPIO_Init+0x1a0>
 8001826:	2301      	movs	r3, #1
 8001828:	e000      	b.n	800182c <HAL_GPIO_Init+0x1a0>
 800182a:	2300      	movs	r3, #0
 800182c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800182e:	f002 0203 	and.w	r2, r2, #3
 8001832:	0092      	lsls	r2, r2, #2
 8001834:	4093      	lsls	r3, r2
 8001836:	68fa      	ldr	r2, [r7, #12]
 8001838:	4313      	orrs	r3, r2
 800183a:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800183c:	493a      	ldr	r1, [pc, #232]	; (8001928 <HAL_GPIO_Init+0x29c>)
 800183e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001840:	089b      	lsrs	r3, r3, #2
 8001842:	3302      	adds	r3, #2
 8001844:	68fa      	ldr	r2, [r7, #12]
 8001846:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800184a:	683b      	ldr	r3, [r7, #0]
 800184c:	685b      	ldr	r3, [r3, #4]
 800184e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001852:	2b00      	cmp	r3, #0
 8001854:	d006      	beq.n	8001864 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001856:	4b39      	ldr	r3, [pc, #228]	; (800193c <HAL_GPIO_Init+0x2b0>)
 8001858:	681a      	ldr	r2, [r3, #0]
 800185a:	4938      	ldr	r1, [pc, #224]	; (800193c <HAL_GPIO_Init+0x2b0>)
 800185c:	69bb      	ldr	r3, [r7, #24]
 800185e:	4313      	orrs	r3, r2
 8001860:	600b      	str	r3, [r1, #0]
 8001862:	e006      	b.n	8001872 <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001864:	4b35      	ldr	r3, [pc, #212]	; (800193c <HAL_GPIO_Init+0x2b0>)
 8001866:	681a      	ldr	r2, [r3, #0]
 8001868:	69bb      	ldr	r3, [r7, #24]
 800186a:	43db      	mvns	r3, r3
 800186c:	4933      	ldr	r1, [pc, #204]	; (800193c <HAL_GPIO_Init+0x2b0>)
 800186e:	4013      	ands	r3, r2
 8001870:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001872:	683b      	ldr	r3, [r7, #0]
 8001874:	685b      	ldr	r3, [r3, #4]
 8001876:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800187a:	2b00      	cmp	r3, #0
 800187c:	d006      	beq.n	800188c <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800187e:	4b2f      	ldr	r3, [pc, #188]	; (800193c <HAL_GPIO_Init+0x2b0>)
 8001880:	685a      	ldr	r2, [r3, #4]
 8001882:	492e      	ldr	r1, [pc, #184]	; (800193c <HAL_GPIO_Init+0x2b0>)
 8001884:	69bb      	ldr	r3, [r7, #24]
 8001886:	4313      	orrs	r3, r2
 8001888:	604b      	str	r3, [r1, #4]
 800188a:	e006      	b.n	800189a <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800188c:	4b2b      	ldr	r3, [pc, #172]	; (800193c <HAL_GPIO_Init+0x2b0>)
 800188e:	685a      	ldr	r2, [r3, #4]
 8001890:	69bb      	ldr	r3, [r7, #24]
 8001892:	43db      	mvns	r3, r3
 8001894:	4929      	ldr	r1, [pc, #164]	; (800193c <HAL_GPIO_Init+0x2b0>)
 8001896:	4013      	ands	r3, r2
 8001898:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800189a:	683b      	ldr	r3, [r7, #0]
 800189c:	685b      	ldr	r3, [r3, #4]
 800189e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d006      	beq.n	80018b4 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80018a6:	4b25      	ldr	r3, [pc, #148]	; (800193c <HAL_GPIO_Init+0x2b0>)
 80018a8:	689a      	ldr	r2, [r3, #8]
 80018aa:	4924      	ldr	r1, [pc, #144]	; (800193c <HAL_GPIO_Init+0x2b0>)
 80018ac:	69bb      	ldr	r3, [r7, #24]
 80018ae:	4313      	orrs	r3, r2
 80018b0:	608b      	str	r3, [r1, #8]
 80018b2:	e006      	b.n	80018c2 <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80018b4:	4b21      	ldr	r3, [pc, #132]	; (800193c <HAL_GPIO_Init+0x2b0>)
 80018b6:	689a      	ldr	r2, [r3, #8]
 80018b8:	69bb      	ldr	r3, [r7, #24]
 80018ba:	43db      	mvns	r3, r3
 80018bc:	491f      	ldr	r1, [pc, #124]	; (800193c <HAL_GPIO_Init+0x2b0>)
 80018be:	4013      	ands	r3, r2
 80018c0:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80018c2:	683b      	ldr	r3, [r7, #0]
 80018c4:	685b      	ldr	r3, [r3, #4]
 80018c6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d006      	beq.n	80018dc <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80018ce:	4b1b      	ldr	r3, [pc, #108]	; (800193c <HAL_GPIO_Init+0x2b0>)
 80018d0:	68da      	ldr	r2, [r3, #12]
 80018d2:	491a      	ldr	r1, [pc, #104]	; (800193c <HAL_GPIO_Init+0x2b0>)
 80018d4:	69bb      	ldr	r3, [r7, #24]
 80018d6:	4313      	orrs	r3, r2
 80018d8:	60cb      	str	r3, [r1, #12]
 80018da:	e006      	b.n	80018ea <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80018dc:	4b17      	ldr	r3, [pc, #92]	; (800193c <HAL_GPIO_Init+0x2b0>)
 80018de:	68da      	ldr	r2, [r3, #12]
 80018e0:	69bb      	ldr	r3, [r7, #24]
 80018e2:	43db      	mvns	r3, r3
 80018e4:	4915      	ldr	r1, [pc, #84]	; (800193c <HAL_GPIO_Init+0x2b0>)
 80018e6:	4013      	ands	r3, r2
 80018e8:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80018ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018ec:	3301      	adds	r3, #1
 80018ee:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80018f0:	683b      	ldr	r3, [r7, #0]
 80018f2:	681a      	ldr	r2, [r3, #0]
 80018f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018f6:	fa22 f303 	lsr.w	r3, r2, r3
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	f47f aed0 	bne.w	80016a0 <HAL_GPIO_Init+0x14>
  }
}
 8001900:	bf00      	nop
 8001902:	372c      	adds	r7, #44	; 0x2c
 8001904:	46bd      	mov	sp, r7
 8001906:	bc80      	pop	{r7}
 8001908:	4770      	bx	lr
 800190a:	bf00      	nop
 800190c:	10210000 	.word	0x10210000
 8001910:	10110000 	.word	0x10110000
 8001914:	10120000 	.word	0x10120000
 8001918:	10310000 	.word	0x10310000
 800191c:	10320000 	.word	0x10320000
 8001920:	10220000 	.word	0x10220000
 8001924:	40021000 	.word	0x40021000
 8001928:	40010000 	.word	0x40010000
 800192c:	40010800 	.word	0x40010800
 8001930:	40010c00 	.word	0x40010c00
 8001934:	40011000 	.word	0x40011000
 8001938:	40011400 	.word	0x40011400
 800193c:	40010400 	.word	0x40010400

08001940 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001940:	b480      	push	{r7}
 8001942:	b083      	sub	sp, #12
 8001944:	af00      	add	r7, sp, #0
 8001946:	6078      	str	r0, [r7, #4]
 8001948:	460b      	mov	r3, r1
 800194a:	807b      	strh	r3, [r7, #2]
 800194c:	4613      	mov	r3, r2
 800194e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001950:	787b      	ldrb	r3, [r7, #1]
 8001952:	2b00      	cmp	r3, #0
 8001954:	d003      	beq.n	800195e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001956:	887a      	ldrh	r2, [r7, #2]
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800195c:	e003      	b.n	8001966 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800195e:	887b      	ldrh	r3, [r7, #2]
 8001960:	041a      	lsls	r2, r3, #16
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	611a      	str	r2, [r3, #16]
}
 8001966:	bf00      	nop
 8001968:	370c      	adds	r7, #12
 800196a:	46bd      	mov	sp, r7
 800196c:	bc80      	pop	{r7}
 800196e:	4770      	bx	lr

08001970 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001970:	b480      	push	{r7}
 8001972:	b085      	sub	sp, #20
 8001974:	af00      	add	r7, sp, #0
 8001976:	6078      	str	r0, [r7, #4]
 8001978:	460b      	mov	r3, r1
 800197a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	68db      	ldr	r3, [r3, #12]
 8001980:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001982:	887a      	ldrh	r2, [r7, #2]
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	4013      	ands	r3, r2
 8001988:	041a      	lsls	r2, r3, #16
 800198a:	68fb      	ldr	r3, [r7, #12]
 800198c:	43d9      	mvns	r1, r3
 800198e:	887b      	ldrh	r3, [r7, #2]
 8001990:	400b      	ands	r3, r1
 8001992:	431a      	orrs	r2, r3
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	611a      	str	r2, [r3, #16]
}
 8001998:	bf00      	nop
 800199a:	3714      	adds	r7, #20
 800199c:	46bd      	mov	sp, r7
 800199e:	bc80      	pop	{r7}
 80019a0:	4770      	bx	lr
	...

080019a4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80019a4:	b580      	push	{r7, lr}
 80019a6:	b086      	sub	sp, #24
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d101      	bne.n	80019b6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80019b2:	2301      	movs	r3, #1
 80019b4:	e26c      	b.n	8001e90 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	f003 0301 	and.w	r3, r3, #1
 80019be:	2b00      	cmp	r3, #0
 80019c0:	f000 8087 	beq.w	8001ad2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80019c4:	4b92      	ldr	r3, [pc, #584]	; (8001c10 <HAL_RCC_OscConfig+0x26c>)
 80019c6:	685b      	ldr	r3, [r3, #4]
 80019c8:	f003 030c 	and.w	r3, r3, #12
 80019cc:	2b04      	cmp	r3, #4
 80019ce:	d00c      	beq.n	80019ea <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80019d0:	4b8f      	ldr	r3, [pc, #572]	; (8001c10 <HAL_RCC_OscConfig+0x26c>)
 80019d2:	685b      	ldr	r3, [r3, #4]
 80019d4:	f003 030c 	and.w	r3, r3, #12
 80019d8:	2b08      	cmp	r3, #8
 80019da:	d112      	bne.n	8001a02 <HAL_RCC_OscConfig+0x5e>
 80019dc:	4b8c      	ldr	r3, [pc, #560]	; (8001c10 <HAL_RCC_OscConfig+0x26c>)
 80019de:	685b      	ldr	r3, [r3, #4]
 80019e0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80019e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80019e8:	d10b      	bne.n	8001a02 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019ea:	4b89      	ldr	r3, [pc, #548]	; (8001c10 <HAL_RCC_OscConfig+0x26c>)
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d06c      	beq.n	8001ad0 <HAL_RCC_OscConfig+0x12c>
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	685b      	ldr	r3, [r3, #4]
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d168      	bne.n	8001ad0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80019fe:	2301      	movs	r3, #1
 8001a00:	e246      	b.n	8001e90 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	685b      	ldr	r3, [r3, #4]
 8001a06:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a0a:	d106      	bne.n	8001a1a <HAL_RCC_OscConfig+0x76>
 8001a0c:	4b80      	ldr	r3, [pc, #512]	; (8001c10 <HAL_RCC_OscConfig+0x26c>)
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	4a7f      	ldr	r2, [pc, #508]	; (8001c10 <HAL_RCC_OscConfig+0x26c>)
 8001a12:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a16:	6013      	str	r3, [r2, #0]
 8001a18:	e02e      	b.n	8001a78 <HAL_RCC_OscConfig+0xd4>
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	685b      	ldr	r3, [r3, #4]
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d10c      	bne.n	8001a3c <HAL_RCC_OscConfig+0x98>
 8001a22:	4b7b      	ldr	r3, [pc, #492]	; (8001c10 <HAL_RCC_OscConfig+0x26c>)
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	4a7a      	ldr	r2, [pc, #488]	; (8001c10 <HAL_RCC_OscConfig+0x26c>)
 8001a28:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a2c:	6013      	str	r3, [r2, #0]
 8001a2e:	4b78      	ldr	r3, [pc, #480]	; (8001c10 <HAL_RCC_OscConfig+0x26c>)
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	4a77      	ldr	r2, [pc, #476]	; (8001c10 <HAL_RCC_OscConfig+0x26c>)
 8001a34:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001a38:	6013      	str	r3, [r2, #0]
 8001a3a:	e01d      	b.n	8001a78 <HAL_RCC_OscConfig+0xd4>
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	685b      	ldr	r3, [r3, #4]
 8001a40:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001a44:	d10c      	bne.n	8001a60 <HAL_RCC_OscConfig+0xbc>
 8001a46:	4b72      	ldr	r3, [pc, #456]	; (8001c10 <HAL_RCC_OscConfig+0x26c>)
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	4a71      	ldr	r2, [pc, #452]	; (8001c10 <HAL_RCC_OscConfig+0x26c>)
 8001a4c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001a50:	6013      	str	r3, [r2, #0]
 8001a52:	4b6f      	ldr	r3, [pc, #444]	; (8001c10 <HAL_RCC_OscConfig+0x26c>)
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	4a6e      	ldr	r2, [pc, #440]	; (8001c10 <HAL_RCC_OscConfig+0x26c>)
 8001a58:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a5c:	6013      	str	r3, [r2, #0]
 8001a5e:	e00b      	b.n	8001a78 <HAL_RCC_OscConfig+0xd4>
 8001a60:	4b6b      	ldr	r3, [pc, #428]	; (8001c10 <HAL_RCC_OscConfig+0x26c>)
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	4a6a      	ldr	r2, [pc, #424]	; (8001c10 <HAL_RCC_OscConfig+0x26c>)
 8001a66:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a6a:	6013      	str	r3, [r2, #0]
 8001a6c:	4b68      	ldr	r3, [pc, #416]	; (8001c10 <HAL_RCC_OscConfig+0x26c>)
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	4a67      	ldr	r2, [pc, #412]	; (8001c10 <HAL_RCC_OscConfig+0x26c>)
 8001a72:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001a76:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	685b      	ldr	r3, [r3, #4]
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d013      	beq.n	8001aa8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a80:	f7ff faf4 	bl	800106c <HAL_GetTick>
 8001a84:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a86:	e008      	b.n	8001a9a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a88:	f7ff faf0 	bl	800106c <HAL_GetTick>
 8001a8c:	4602      	mov	r2, r0
 8001a8e:	693b      	ldr	r3, [r7, #16]
 8001a90:	1ad3      	subs	r3, r2, r3
 8001a92:	2b64      	cmp	r3, #100	; 0x64
 8001a94:	d901      	bls.n	8001a9a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001a96:	2303      	movs	r3, #3
 8001a98:	e1fa      	b.n	8001e90 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a9a:	4b5d      	ldr	r3, [pc, #372]	; (8001c10 <HAL_RCC_OscConfig+0x26c>)
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d0f0      	beq.n	8001a88 <HAL_RCC_OscConfig+0xe4>
 8001aa6:	e014      	b.n	8001ad2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001aa8:	f7ff fae0 	bl	800106c <HAL_GetTick>
 8001aac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001aae:	e008      	b.n	8001ac2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ab0:	f7ff fadc 	bl	800106c <HAL_GetTick>
 8001ab4:	4602      	mov	r2, r0
 8001ab6:	693b      	ldr	r3, [r7, #16]
 8001ab8:	1ad3      	subs	r3, r2, r3
 8001aba:	2b64      	cmp	r3, #100	; 0x64
 8001abc:	d901      	bls.n	8001ac2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001abe:	2303      	movs	r3, #3
 8001ac0:	e1e6      	b.n	8001e90 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ac2:	4b53      	ldr	r3, [pc, #332]	; (8001c10 <HAL_RCC_OscConfig+0x26c>)
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d1f0      	bne.n	8001ab0 <HAL_RCC_OscConfig+0x10c>
 8001ace:	e000      	b.n	8001ad2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ad0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	f003 0302 	and.w	r3, r3, #2
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d063      	beq.n	8001ba6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001ade:	4b4c      	ldr	r3, [pc, #304]	; (8001c10 <HAL_RCC_OscConfig+0x26c>)
 8001ae0:	685b      	ldr	r3, [r3, #4]
 8001ae2:	f003 030c 	and.w	r3, r3, #12
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d00b      	beq.n	8001b02 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001aea:	4b49      	ldr	r3, [pc, #292]	; (8001c10 <HAL_RCC_OscConfig+0x26c>)
 8001aec:	685b      	ldr	r3, [r3, #4]
 8001aee:	f003 030c 	and.w	r3, r3, #12
 8001af2:	2b08      	cmp	r3, #8
 8001af4:	d11c      	bne.n	8001b30 <HAL_RCC_OscConfig+0x18c>
 8001af6:	4b46      	ldr	r3, [pc, #280]	; (8001c10 <HAL_RCC_OscConfig+0x26c>)
 8001af8:	685b      	ldr	r3, [r3, #4]
 8001afa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d116      	bne.n	8001b30 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b02:	4b43      	ldr	r3, [pc, #268]	; (8001c10 <HAL_RCC_OscConfig+0x26c>)
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	f003 0302 	and.w	r3, r3, #2
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d005      	beq.n	8001b1a <HAL_RCC_OscConfig+0x176>
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	691b      	ldr	r3, [r3, #16]
 8001b12:	2b01      	cmp	r3, #1
 8001b14:	d001      	beq.n	8001b1a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001b16:	2301      	movs	r3, #1
 8001b18:	e1ba      	b.n	8001e90 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b1a:	4b3d      	ldr	r3, [pc, #244]	; (8001c10 <HAL_RCC_OscConfig+0x26c>)
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	695b      	ldr	r3, [r3, #20]
 8001b26:	00db      	lsls	r3, r3, #3
 8001b28:	4939      	ldr	r1, [pc, #228]	; (8001c10 <HAL_RCC_OscConfig+0x26c>)
 8001b2a:	4313      	orrs	r3, r2
 8001b2c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b2e:	e03a      	b.n	8001ba6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	691b      	ldr	r3, [r3, #16]
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d020      	beq.n	8001b7a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001b38:	4b36      	ldr	r3, [pc, #216]	; (8001c14 <HAL_RCC_OscConfig+0x270>)
 8001b3a:	2201      	movs	r2, #1
 8001b3c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b3e:	f7ff fa95 	bl	800106c <HAL_GetTick>
 8001b42:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b44:	e008      	b.n	8001b58 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b46:	f7ff fa91 	bl	800106c <HAL_GetTick>
 8001b4a:	4602      	mov	r2, r0
 8001b4c:	693b      	ldr	r3, [r7, #16]
 8001b4e:	1ad3      	subs	r3, r2, r3
 8001b50:	2b02      	cmp	r3, #2
 8001b52:	d901      	bls.n	8001b58 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001b54:	2303      	movs	r3, #3
 8001b56:	e19b      	b.n	8001e90 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b58:	4b2d      	ldr	r3, [pc, #180]	; (8001c10 <HAL_RCC_OscConfig+0x26c>)
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	f003 0302 	and.w	r3, r3, #2
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d0f0      	beq.n	8001b46 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b64:	4b2a      	ldr	r3, [pc, #168]	; (8001c10 <HAL_RCC_OscConfig+0x26c>)
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	695b      	ldr	r3, [r3, #20]
 8001b70:	00db      	lsls	r3, r3, #3
 8001b72:	4927      	ldr	r1, [pc, #156]	; (8001c10 <HAL_RCC_OscConfig+0x26c>)
 8001b74:	4313      	orrs	r3, r2
 8001b76:	600b      	str	r3, [r1, #0]
 8001b78:	e015      	b.n	8001ba6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001b7a:	4b26      	ldr	r3, [pc, #152]	; (8001c14 <HAL_RCC_OscConfig+0x270>)
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b80:	f7ff fa74 	bl	800106c <HAL_GetTick>
 8001b84:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b86:	e008      	b.n	8001b9a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b88:	f7ff fa70 	bl	800106c <HAL_GetTick>
 8001b8c:	4602      	mov	r2, r0
 8001b8e:	693b      	ldr	r3, [r7, #16]
 8001b90:	1ad3      	subs	r3, r2, r3
 8001b92:	2b02      	cmp	r3, #2
 8001b94:	d901      	bls.n	8001b9a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001b96:	2303      	movs	r3, #3
 8001b98:	e17a      	b.n	8001e90 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b9a:	4b1d      	ldr	r3, [pc, #116]	; (8001c10 <HAL_RCC_OscConfig+0x26c>)
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	f003 0302 	and.w	r3, r3, #2
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d1f0      	bne.n	8001b88 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	f003 0308 	and.w	r3, r3, #8
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d03a      	beq.n	8001c28 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	699b      	ldr	r3, [r3, #24]
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d019      	beq.n	8001bee <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001bba:	4b17      	ldr	r3, [pc, #92]	; (8001c18 <HAL_RCC_OscConfig+0x274>)
 8001bbc:	2201      	movs	r2, #1
 8001bbe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001bc0:	f7ff fa54 	bl	800106c <HAL_GetTick>
 8001bc4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001bc6:	e008      	b.n	8001bda <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001bc8:	f7ff fa50 	bl	800106c <HAL_GetTick>
 8001bcc:	4602      	mov	r2, r0
 8001bce:	693b      	ldr	r3, [r7, #16]
 8001bd0:	1ad3      	subs	r3, r2, r3
 8001bd2:	2b02      	cmp	r3, #2
 8001bd4:	d901      	bls.n	8001bda <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001bd6:	2303      	movs	r3, #3
 8001bd8:	e15a      	b.n	8001e90 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001bda:	4b0d      	ldr	r3, [pc, #52]	; (8001c10 <HAL_RCC_OscConfig+0x26c>)
 8001bdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bde:	f003 0302 	and.w	r3, r3, #2
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d0f0      	beq.n	8001bc8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001be6:	2001      	movs	r0, #1
 8001be8:	f000 faa8 	bl	800213c <RCC_Delay>
 8001bec:	e01c      	b.n	8001c28 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001bee:	4b0a      	ldr	r3, [pc, #40]	; (8001c18 <HAL_RCC_OscConfig+0x274>)
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001bf4:	f7ff fa3a 	bl	800106c <HAL_GetTick>
 8001bf8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001bfa:	e00f      	b.n	8001c1c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001bfc:	f7ff fa36 	bl	800106c <HAL_GetTick>
 8001c00:	4602      	mov	r2, r0
 8001c02:	693b      	ldr	r3, [r7, #16]
 8001c04:	1ad3      	subs	r3, r2, r3
 8001c06:	2b02      	cmp	r3, #2
 8001c08:	d908      	bls.n	8001c1c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001c0a:	2303      	movs	r3, #3
 8001c0c:	e140      	b.n	8001e90 <HAL_RCC_OscConfig+0x4ec>
 8001c0e:	bf00      	nop
 8001c10:	40021000 	.word	0x40021000
 8001c14:	42420000 	.word	0x42420000
 8001c18:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c1c:	4b9e      	ldr	r3, [pc, #632]	; (8001e98 <HAL_RCC_OscConfig+0x4f4>)
 8001c1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c20:	f003 0302 	and.w	r3, r3, #2
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d1e9      	bne.n	8001bfc <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	f003 0304 	and.w	r3, r3, #4
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	f000 80a6 	beq.w	8001d82 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001c36:	2300      	movs	r3, #0
 8001c38:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001c3a:	4b97      	ldr	r3, [pc, #604]	; (8001e98 <HAL_RCC_OscConfig+0x4f4>)
 8001c3c:	69db      	ldr	r3, [r3, #28]
 8001c3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d10d      	bne.n	8001c62 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001c46:	4b94      	ldr	r3, [pc, #592]	; (8001e98 <HAL_RCC_OscConfig+0x4f4>)
 8001c48:	69db      	ldr	r3, [r3, #28]
 8001c4a:	4a93      	ldr	r2, [pc, #588]	; (8001e98 <HAL_RCC_OscConfig+0x4f4>)
 8001c4c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c50:	61d3      	str	r3, [r2, #28]
 8001c52:	4b91      	ldr	r3, [pc, #580]	; (8001e98 <HAL_RCC_OscConfig+0x4f4>)
 8001c54:	69db      	ldr	r3, [r3, #28]
 8001c56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c5a:	60bb      	str	r3, [r7, #8]
 8001c5c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001c5e:	2301      	movs	r3, #1
 8001c60:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c62:	4b8e      	ldr	r3, [pc, #568]	; (8001e9c <HAL_RCC_OscConfig+0x4f8>)
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d118      	bne.n	8001ca0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001c6e:	4b8b      	ldr	r3, [pc, #556]	; (8001e9c <HAL_RCC_OscConfig+0x4f8>)
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	4a8a      	ldr	r2, [pc, #552]	; (8001e9c <HAL_RCC_OscConfig+0x4f8>)
 8001c74:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c78:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001c7a:	f7ff f9f7 	bl	800106c <HAL_GetTick>
 8001c7e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c80:	e008      	b.n	8001c94 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c82:	f7ff f9f3 	bl	800106c <HAL_GetTick>
 8001c86:	4602      	mov	r2, r0
 8001c88:	693b      	ldr	r3, [r7, #16]
 8001c8a:	1ad3      	subs	r3, r2, r3
 8001c8c:	2b64      	cmp	r3, #100	; 0x64
 8001c8e:	d901      	bls.n	8001c94 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001c90:	2303      	movs	r3, #3
 8001c92:	e0fd      	b.n	8001e90 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c94:	4b81      	ldr	r3, [pc, #516]	; (8001e9c <HAL_RCC_OscConfig+0x4f8>)
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d0f0      	beq.n	8001c82 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	68db      	ldr	r3, [r3, #12]
 8001ca4:	2b01      	cmp	r3, #1
 8001ca6:	d106      	bne.n	8001cb6 <HAL_RCC_OscConfig+0x312>
 8001ca8:	4b7b      	ldr	r3, [pc, #492]	; (8001e98 <HAL_RCC_OscConfig+0x4f4>)
 8001caa:	6a1b      	ldr	r3, [r3, #32]
 8001cac:	4a7a      	ldr	r2, [pc, #488]	; (8001e98 <HAL_RCC_OscConfig+0x4f4>)
 8001cae:	f043 0301 	orr.w	r3, r3, #1
 8001cb2:	6213      	str	r3, [r2, #32]
 8001cb4:	e02d      	b.n	8001d12 <HAL_RCC_OscConfig+0x36e>
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	68db      	ldr	r3, [r3, #12]
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d10c      	bne.n	8001cd8 <HAL_RCC_OscConfig+0x334>
 8001cbe:	4b76      	ldr	r3, [pc, #472]	; (8001e98 <HAL_RCC_OscConfig+0x4f4>)
 8001cc0:	6a1b      	ldr	r3, [r3, #32]
 8001cc2:	4a75      	ldr	r2, [pc, #468]	; (8001e98 <HAL_RCC_OscConfig+0x4f4>)
 8001cc4:	f023 0301 	bic.w	r3, r3, #1
 8001cc8:	6213      	str	r3, [r2, #32]
 8001cca:	4b73      	ldr	r3, [pc, #460]	; (8001e98 <HAL_RCC_OscConfig+0x4f4>)
 8001ccc:	6a1b      	ldr	r3, [r3, #32]
 8001cce:	4a72      	ldr	r2, [pc, #456]	; (8001e98 <HAL_RCC_OscConfig+0x4f4>)
 8001cd0:	f023 0304 	bic.w	r3, r3, #4
 8001cd4:	6213      	str	r3, [r2, #32]
 8001cd6:	e01c      	b.n	8001d12 <HAL_RCC_OscConfig+0x36e>
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	68db      	ldr	r3, [r3, #12]
 8001cdc:	2b05      	cmp	r3, #5
 8001cde:	d10c      	bne.n	8001cfa <HAL_RCC_OscConfig+0x356>
 8001ce0:	4b6d      	ldr	r3, [pc, #436]	; (8001e98 <HAL_RCC_OscConfig+0x4f4>)
 8001ce2:	6a1b      	ldr	r3, [r3, #32]
 8001ce4:	4a6c      	ldr	r2, [pc, #432]	; (8001e98 <HAL_RCC_OscConfig+0x4f4>)
 8001ce6:	f043 0304 	orr.w	r3, r3, #4
 8001cea:	6213      	str	r3, [r2, #32]
 8001cec:	4b6a      	ldr	r3, [pc, #424]	; (8001e98 <HAL_RCC_OscConfig+0x4f4>)
 8001cee:	6a1b      	ldr	r3, [r3, #32]
 8001cf0:	4a69      	ldr	r2, [pc, #420]	; (8001e98 <HAL_RCC_OscConfig+0x4f4>)
 8001cf2:	f043 0301 	orr.w	r3, r3, #1
 8001cf6:	6213      	str	r3, [r2, #32]
 8001cf8:	e00b      	b.n	8001d12 <HAL_RCC_OscConfig+0x36e>
 8001cfa:	4b67      	ldr	r3, [pc, #412]	; (8001e98 <HAL_RCC_OscConfig+0x4f4>)
 8001cfc:	6a1b      	ldr	r3, [r3, #32]
 8001cfe:	4a66      	ldr	r2, [pc, #408]	; (8001e98 <HAL_RCC_OscConfig+0x4f4>)
 8001d00:	f023 0301 	bic.w	r3, r3, #1
 8001d04:	6213      	str	r3, [r2, #32]
 8001d06:	4b64      	ldr	r3, [pc, #400]	; (8001e98 <HAL_RCC_OscConfig+0x4f4>)
 8001d08:	6a1b      	ldr	r3, [r3, #32]
 8001d0a:	4a63      	ldr	r2, [pc, #396]	; (8001e98 <HAL_RCC_OscConfig+0x4f4>)
 8001d0c:	f023 0304 	bic.w	r3, r3, #4
 8001d10:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	68db      	ldr	r3, [r3, #12]
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d015      	beq.n	8001d46 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d1a:	f7ff f9a7 	bl	800106c <HAL_GetTick>
 8001d1e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d20:	e00a      	b.n	8001d38 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d22:	f7ff f9a3 	bl	800106c <HAL_GetTick>
 8001d26:	4602      	mov	r2, r0
 8001d28:	693b      	ldr	r3, [r7, #16]
 8001d2a:	1ad3      	subs	r3, r2, r3
 8001d2c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d30:	4293      	cmp	r3, r2
 8001d32:	d901      	bls.n	8001d38 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001d34:	2303      	movs	r3, #3
 8001d36:	e0ab      	b.n	8001e90 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d38:	4b57      	ldr	r3, [pc, #348]	; (8001e98 <HAL_RCC_OscConfig+0x4f4>)
 8001d3a:	6a1b      	ldr	r3, [r3, #32]
 8001d3c:	f003 0302 	and.w	r3, r3, #2
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d0ee      	beq.n	8001d22 <HAL_RCC_OscConfig+0x37e>
 8001d44:	e014      	b.n	8001d70 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d46:	f7ff f991 	bl	800106c <HAL_GetTick>
 8001d4a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d4c:	e00a      	b.n	8001d64 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d4e:	f7ff f98d 	bl	800106c <HAL_GetTick>
 8001d52:	4602      	mov	r2, r0
 8001d54:	693b      	ldr	r3, [r7, #16]
 8001d56:	1ad3      	subs	r3, r2, r3
 8001d58:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d5c:	4293      	cmp	r3, r2
 8001d5e:	d901      	bls.n	8001d64 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001d60:	2303      	movs	r3, #3
 8001d62:	e095      	b.n	8001e90 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d64:	4b4c      	ldr	r3, [pc, #304]	; (8001e98 <HAL_RCC_OscConfig+0x4f4>)
 8001d66:	6a1b      	ldr	r3, [r3, #32]
 8001d68:	f003 0302 	and.w	r3, r3, #2
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d1ee      	bne.n	8001d4e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001d70:	7dfb      	ldrb	r3, [r7, #23]
 8001d72:	2b01      	cmp	r3, #1
 8001d74:	d105      	bne.n	8001d82 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001d76:	4b48      	ldr	r3, [pc, #288]	; (8001e98 <HAL_RCC_OscConfig+0x4f4>)
 8001d78:	69db      	ldr	r3, [r3, #28]
 8001d7a:	4a47      	ldr	r2, [pc, #284]	; (8001e98 <HAL_RCC_OscConfig+0x4f4>)
 8001d7c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001d80:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	69db      	ldr	r3, [r3, #28]
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	f000 8081 	beq.w	8001e8e <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001d8c:	4b42      	ldr	r3, [pc, #264]	; (8001e98 <HAL_RCC_OscConfig+0x4f4>)
 8001d8e:	685b      	ldr	r3, [r3, #4]
 8001d90:	f003 030c 	and.w	r3, r3, #12
 8001d94:	2b08      	cmp	r3, #8
 8001d96:	d061      	beq.n	8001e5c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	69db      	ldr	r3, [r3, #28]
 8001d9c:	2b02      	cmp	r3, #2
 8001d9e:	d146      	bne.n	8001e2e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001da0:	4b3f      	ldr	r3, [pc, #252]	; (8001ea0 <HAL_RCC_OscConfig+0x4fc>)
 8001da2:	2200      	movs	r2, #0
 8001da4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001da6:	f7ff f961 	bl	800106c <HAL_GetTick>
 8001daa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001dac:	e008      	b.n	8001dc0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001dae:	f7ff f95d 	bl	800106c <HAL_GetTick>
 8001db2:	4602      	mov	r2, r0
 8001db4:	693b      	ldr	r3, [r7, #16]
 8001db6:	1ad3      	subs	r3, r2, r3
 8001db8:	2b02      	cmp	r3, #2
 8001dba:	d901      	bls.n	8001dc0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001dbc:	2303      	movs	r3, #3
 8001dbe:	e067      	b.n	8001e90 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001dc0:	4b35      	ldr	r3, [pc, #212]	; (8001e98 <HAL_RCC_OscConfig+0x4f4>)
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d1f0      	bne.n	8001dae <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	6a1b      	ldr	r3, [r3, #32]
 8001dd0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001dd4:	d108      	bne.n	8001de8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001dd6:	4b30      	ldr	r3, [pc, #192]	; (8001e98 <HAL_RCC_OscConfig+0x4f4>)
 8001dd8:	685b      	ldr	r3, [r3, #4]
 8001dda:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	689b      	ldr	r3, [r3, #8]
 8001de2:	492d      	ldr	r1, [pc, #180]	; (8001e98 <HAL_RCC_OscConfig+0x4f4>)
 8001de4:	4313      	orrs	r3, r2
 8001de6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001de8:	4b2b      	ldr	r3, [pc, #172]	; (8001e98 <HAL_RCC_OscConfig+0x4f4>)
 8001dea:	685b      	ldr	r3, [r3, #4]
 8001dec:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	6a19      	ldr	r1, [r3, #32]
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001df8:	430b      	orrs	r3, r1
 8001dfa:	4927      	ldr	r1, [pc, #156]	; (8001e98 <HAL_RCC_OscConfig+0x4f4>)
 8001dfc:	4313      	orrs	r3, r2
 8001dfe:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001e00:	4b27      	ldr	r3, [pc, #156]	; (8001ea0 <HAL_RCC_OscConfig+0x4fc>)
 8001e02:	2201      	movs	r2, #1
 8001e04:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e06:	f7ff f931 	bl	800106c <HAL_GetTick>
 8001e0a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001e0c:	e008      	b.n	8001e20 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e0e:	f7ff f92d 	bl	800106c <HAL_GetTick>
 8001e12:	4602      	mov	r2, r0
 8001e14:	693b      	ldr	r3, [r7, #16]
 8001e16:	1ad3      	subs	r3, r2, r3
 8001e18:	2b02      	cmp	r3, #2
 8001e1a:	d901      	bls.n	8001e20 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001e1c:	2303      	movs	r3, #3
 8001e1e:	e037      	b.n	8001e90 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001e20:	4b1d      	ldr	r3, [pc, #116]	; (8001e98 <HAL_RCC_OscConfig+0x4f4>)
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d0f0      	beq.n	8001e0e <HAL_RCC_OscConfig+0x46a>
 8001e2c:	e02f      	b.n	8001e8e <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e2e:	4b1c      	ldr	r3, [pc, #112]	; (8001ea0 <HAL_RCC_OscConfig+0x4fc>)
 8001e30:	2200      	movs	r2, #0
 8001e32:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e34:	f7ff f91a 	bl	800106c <HAL_GetTick>
 8001e38:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e3a:	e008      	b.n	8001e4e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e3c:	f7ff f916 	bl	800106c <HAL_GetTick>
 8001e40:	4602      	mov	r2, r0
 8001e42:	693b      	ldr	r3, [r7, #16]
 8001e44:	1ad3      	subs	r3, r2, r3
 8001e46:	2b02      	cmp	r3, #2
 8001e48:	d901      	bls.n	8001e4e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001e4a:	2303      	movs	r3, #3
 8001e4c:	e020      	b.n	8001e90 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e4e:	4b12      	ldr	r3, [pc, #72]	; (8001e98 <HAL_RCC_OscConfig+0x4f4>)
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d1f0      	bne.n	8001e3c <HAL_RCC_OscConfig+0x498>
 8001e5a:	e018      	b.n	8001e8e <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	69db      	ldr	r3, [r3, #28]
 8001e60:	2b01      	cmp	r3, #1
 8001e62:	d101      	bne.n	8001e68 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001e64:	2301      	movs	r3, #1
 8001e66:	e013      	b.n	8001e90 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001e68:	4b0b      	ldr	r3, [pc, #44]	; (8001e98 <HAL_RCC_OscConfig+0x4f4>)
 8001e6a:	685b      	ldr	r3, [r3, #4]
 8001e6c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	6a1b      	ldr	r3, [r3, #32]
 8001e78:	429a      	cmp	r2, r3
 8001e7a:	d106      	bne.n	8001e8a <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e86:	429a      	cmp	r2, r3
 8001e88:	d001      	beq.n	8001e8e <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8001e8a:	2301      	movs	r3, #1
 8001e8c:	e000      	b.n	8001e90 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8001e8e:	2300      	movs	r3, #0
}
 8001e90:	4618      	mov	r0, r3
 8001e92:	3718      	adds	r7, #24
 8001e94:	46bd      	mov	sp, r7
 8001e96:	bd80      	pop	{r7, pc}
 8001e98:	40021000 	.word	0x40021000
 8001e9c:	40007000 	.word	0x40007000
 8001ea0:	42420060 	.word	0x42420060

08001ea4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	b084      	sub	sp, #16
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	6078      	str	r0, [r7, #4]
 8001eac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d101      	bne.n	8001eb8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001eb4:	2301      	movs	r3, #1
 8001eb6:	e0d0      	b.n	800205a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001eb8:	4b6a      	ldr	r3, [pc, #424]	; (8002064 <HAL_RCC_ClockConfig+0x1c0>)
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	f003 0307 	and.w	r3, r3, #7
 8001ec0:	683a      	ldr	r2, [r7, #0]
 8001ec2:	429a      	cmp	r2, r3
 8001ec4:	d910      	bls.n	8001ee8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ec6:	4b67      	ldr	r3, [pc, #412]	; (8002064 <HAL_RCC_ClockConfig+0x1c0>)
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	f023 0207 	bic.w	r2, r3, #7
 8001ece:	4965      	ldr	r1, [pc, #404]	; (8002064 <HAL_RCC_ClockConfig+0x1c0>)
 8001ed0:	683b      	ldr	r3, [r7, #0]
 8001ed2:	4313      	orrs	r3, r2
 8001ed4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ed6:	4b63      	ldr	r3, [pc, #396]	; (8002064 <HAL_RCC_ClockConfig+0x1c0>)
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	f003 0307 	and.w	r3, r3, #7
 8001ede:	683a      	ldr	r2, [r7, #0]
 8001ee0:	429a      	cmp	r2, r3
 8001ee2:	d001      	beq.n	8001ee8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001ee4:	2301      	movs	r3, #1
 8001ee6:	e0b8      	b.n	800205a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	f003 0302 	and.w	r3, r3, #2
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d020      	beq.n	8001f36 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	f003 0304 	and.w	r3, r3, #4
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d005      	beq.n	8001f0c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001f00:	4b59      	ldr	r3, [pc, #356]	; (8002068 <HAL_RCC_ClockConfig+0x1c4>)
 8001f02:	685b      	ldr	r3, [r3, #4]
 8001f04:	4a58      	ldr	r2, [pc, #352]	; (8002068 <HAL_RCC_ClockConfig+0x1c4>)
 8001f06:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001f0a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	f003 0308 	and.w	r3, r3, #8
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d005      	beq.n	8001f24 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001f18:	4b53      	ldr	r3, [pc, #332]	; (8002068 <HAL_RCC_ClockConfig+0x1c4>)
 8001f1a:	685b      	ldr	r3, [r3, #4]
 8001f1c:	4a52      	ldr	r2, [pc, #328]	; (8002068 <HAL_RCC_ClockConfig+0x1c4>)
 8001f1e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001f22:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001f24:	4b50      	ldr	r3, [pc, #320]	; (8002068 <HAL_RCC_ClockConfig+0x1c4>)
 8001f26:	685b      	ldr	r3, [r3, #4]
 8001f28:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	689b      	ldr	r3, [r3, #8]
 8001f30:	494d      	ldr	r1, [pc, #308]	; (8002068 <HAL_RCC_ClockConfig+0x1c4>)
 8001f32:	4313      	orrs	r3, r2
 8001f34:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	f003 0301 	and.w	r3, r3, #1
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d040      	beq.n	8001fc4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	685b      	ldr	r3, [r3, #4]
 8001f46:	2b01      	cmp	r3, #1
 8001f48:	d107      	bne.n	8001f5a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f4a:	4b47      	ldr	r3, [pc, #284]	; (8002068 <HAL_RCC_ClockConfig+0x1c4>)
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d115      	bne.n	8001f82 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f56:	2301      	movs	r3, #1
 8001f58:	e07f      	b.n	800205a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	685b      	ldr	r3, [r3, #4]
 8001f5e:	2b02      	cmp	r3, #2
 8001f60:	d107      	bne.n	8001f72 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f62:	4b41      	ldr	r3, [pc, #260]	; (8002068 <HAL_RCC_ClockConfig+0x1c4>)
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d109      	bne.n	8001f82 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f6e:	2301      	movs	r3, #1
 8001f70:	e073      	b.n	800205a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f72:	4b3d      	ldr	r3, [pc, #244]	; (8002068 <HAL_RCC_ClockConfig+0x1c4>)
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	f003 0302 	and.w	r3, r3, #2
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d101      	bne.n	8001f82 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f7e:	2301      	movs	r3, #1
 8001f80:	e06b      	b.n	800205a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001f82:	4b39      	ldr	r3, [pc, #228]	; (8002068 <HAL_RCC_ClockConfig+0x1c4>)
 8001f84:	685b      	ldr	r3, [r3, #4]
 8001f86:	f023 0203 	bic.w	r2, r3, #3
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	685b      	ldr	r3, [r3, #4]
 8001f8e:	4936      	ldr	r1, [pc, #216]	; (8002068 <HAL_RCC_ClockConfig+0x1c4>)
 8001f90:	4313      	orrs	r3, r2
 8001f92:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001f94:	f7ff f86a 	bl	800106c <HAL_GetTick>
 8001f98:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f9a:	e00a      	b.n	8001fb2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f9c:	f7ff f866 	bl	800106c <HAL_GetTick>
 8001fa0:	4602      	mov	r2, r0
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	1ad3      	subs	r3, r2, r3
 8001fa6:	f241 3288 	movw	r2, #5000	; 0x1388
 8001faa:	4293      	cmp	r3, r2
 8001fac:	d901      	bls.n	8001fb2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001fae:	2303      	movs	r3, #3
 8001fb0:	e053      	b.n	800205a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001fb2:	4b2d      	ldr	r3, [pc, #180]	; (8002068 <HAL_RCC_ClockConfig+0x1c4>)
 8001fb4:	685b      	ldr	r3, [r3, #4]
 8001fb6:	f003 020c 	and.w	r2, r3, #12
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	685b      	ldr	r3, [r3, #4]
 8001fbe:	009b      	lsls	r3, r3, #2
 8001fc0:	429a      	cmp	r2, r3
 8001fc2:	d1eb      	bne.n	8001f9c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001fc4:	4b27      	ldr	r3, [pc, #156]	; (8002064 <HAL_RCC_ClockConfig+0x1c0>)
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	f003 0307 	and.w	r3, r3, #7
 8001fcc:	683a      	ldr	r2, [r7, #0]
 8001fce:	429a      	cmp	r2, r3
 8001fd0:	d210      	bcs.n	8001ff4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001fd2:	4b24      	ldr	r3, [pc, #144]	; (8002064 <HAL_RCC_ClockConfig+0x1c0>)
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	f023 0207 	bic.w	r2, r3, #7
 8001fda:	4922      	ldr	r1, [pc, #136]	; (8002064 <HAL_RCC_ClockConfig+0x1c0>)
 8001fdc:	683b      	ldr	r3, [r7, #0]
 8001fde:	4313      	orrs	r3, r2
 8001fe0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001fe2:	4b20      	ldr	r3, [pc, #128]	; (8002064 <HAL_RCC_ClockConfig+0x1c0>)
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	f003 0307 	and.w	r3, r3, #7
 8001fea:	683a      	ldr	r2, [r7, #0]
 8001fec:	429a      	cmp	r2, r3
 8001fee:	d001      	beq.n	8001ff4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001ff0:	2301      	movs	r3, #1
 8001ff2:	e032      	b.n	800205a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	f003 0304 	and.w	r3, r3, #4
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d008      	beq.n	8002012 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002000:	4b19      	ldr	r3, [pc, #100]	; (8002068 <HAL_RCC_ClockConfig+0x1c4>)
 8002002:	685b      	ldr	r3, [r3, #4]
 8002004:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	68db      	ldr	r3, [r3, #12]
 800200c:	4916      	ldr	r1, [pc, #88]	; (8002068 <HAL_RCC_ClockConfig+0x1c4>)
 800200e:	4313      	orrs	r3, r2
 8002010:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	f003 0308 	and.w	r3, r3, #8
 800201a:	2b00      	cmp	r3, #0
 800201c:	d009      	beq.n	8002032 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800201e:	4b12      	ldr	r3, [pc, #72]	; (8002068 <HAL_RCC_ClockConfig+0x1c4>)
 8002020:	685b      	ldr	r3, [r3, #4]
 8002022:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	691b      	ldr	r3, [r3, #16]
 800202a:	00db      	lsls	r3, r3, #3
 800202c:	490e      	ldr	r1, [pc, #56]	; (8002068 <HAL_RCC_ClockConfig+0x1c4>)
 800202e:	4313      	orrs	r3, r2
 8002030:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002032:	f000 f821 	bl	8002078 <HAL_RCC_GetSysClockFreq>
 8002036:	4601      	mov	r1, r0
 8002038:	4b0b      	ldr	r3, [pc, #44]	; (8002068 <HAL_RCC_ClockConfig+0x1c4>)
 800203a:	685b      	ldr	r3, [r3, #4]
 800203c:	091b      	lsrs	r3, r3, #4
 800203e:	f003 030f 	and.w	r3, r3, #15
 8002042:	4a0a      	ldr	r2, [pc, #40]	; (800206c <HAL_RCC_ClockConfig+0x1c8>)
 8002044:	5cd3      	ldrb	r3, [r2, r3]
 8002046:	fa21 f303 	lsr.w	r3, r1, r3
 800204a:	4a09      	ldr	r2, [pc, #36]	; (8002070 <HAL_RCC_ClockConfig+0x1cc>)
 800204c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800204e:	4b09      	ldr	r3, [pc, #36]	; (8002074 <HAL_RCC_ClockConfig+0x1d0>)
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	4618      	mov	r0, r3
 8002054:	f7fe ffc8 	bl	8000fe8 <HAL_InitTick>

  return HAL_OK;
 8002058:	2300      	movs	r3, #0
}
 800205a:	4618      	mov	r0, r3
 800205c:	3710      	adds	r7, #16
 800205e:	46bd      	mov	sp, r7
 8002060:	bd80      	pop	{r7, pc}
 8002062:	bf00      	nop
 8002064:	40022000 	.word	0x40022000
 8002068:	40021000 	.word	0x40021000
 800206c:	08006404 	.word	0x08006404
 8002070:	20000000 	.word	0x20000000
 8002074:	20000004 	.word	0x20000004

08002078 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002078:	b490      	push	{r4, r7}
 800207a:	b08a      	sub	sp, #40	; 0x28
 800207c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800207e:	4b2a      	ldr	r3, [pc, #168]	; (8002128 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002080:	1d3c      	adds	r4, r7, #4
 8002082:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002084:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002088:	4b28      	ldr	r3, [pc, #160]	; (800212c <HAL_RCC_GetSysClockFreq+0xb4>)
 800208a:	881b      	ldrh	r3, [r3, #0]
 800208c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800208e:	2300      	movs	r3, #0
 8002090:	61fb      	str	r3, [r7, #28]
 8002092:	2300      	movs	r3, #0
 8002094:	61bb      	str	r3, [r7, #24]
 8002096:	2300      	movs	r3, #0
 8002098:	627b      	str	r3, [r7, #36]	; 0x24
 800209a:	2300      	movs	r3, #0
 800209c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800209e:	2300      	movs	r3, #0
 80020a0:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80020a2:	4b23      	ldr	r3, [pc, #140]	; (8002130 <HAL_RCC_GetSysClockFreq+0xb8>)
 80020a4:	685b      	ldr	r3, [r3, #4]
 80020a6:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80020a8:	69fb      	ldr	r3, [r7, #28]
 80020aa:	f003 030c 	and.w	r3, r3, #12
 80020ae:	2b04      	cmp	r3, #4
 80020b0:	d002      	beq.n	80020b8 <HAL_RCC_GetSysClockFreq+0x40>
 80020b2:	2b08      	cmp	r3, #8
 80020b4:	d003      	beq.n	80020be <HAL_RCC_GetSysClockFreq+0x46>
 80020b6:	e02d      	b.n	8002114 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80020b8:	4b1e      	ldr	r3, [pc, #120]	; (8002134 <HAL_RCC_GetSysClockFreq+0xbc>)
 80020ba:	623b      	str	r3, [r7, #32]
      break;
 80020bc:	e02d      	b.n	800211a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80020be:	69fb      	ldr	r3, [r7, #28]
 80020c0:	0c9b      	lsrs	r3, r3, #18
 80020c2:	f003 030f 	and.w	r3, r3, #15
 80020c6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80020ca:	4413      	add	r3, r2
 80020cc:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80020d0:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80020d2:	69fb      	ldr	r3, [r7, #28]
 80020d4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d013      	beq.n	8002104 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80020dc:	4b14      	ldr	r3, [pc, #80]	; (8002130 <HAL_RCC_GetSysClockFreq+0xb8>)
 80020de:	685b      	ldr	r3, [r3, #4]
 80020e0:	0c5b      	lsrs	r3, r3, #17
 80020e2:	f003 0301 	and.w	r3, r3, #1
 80020e6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80020ea:	4413      	add	r3, r2
 80020ec:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80020f0:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80020f2:	697b      	ldr	r3, [r7, #20]
 80020f4:	4a0f      	ldr	r2, [pc, #60]	; (8002134 <HAL_RCC_GetSysClockFreq+0xbc>)
 80020f6:	fb02 f203 	mul.w	r2, r2, r3
 80020fa:	69bb      	ldr	r3, [r7, #24]
 80020fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8002100:	627b      	str	r3, [r7, #36]	; 0x24
 8002102:	e004      	b.n	800210e <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002104:	697b      	ldr	r3, [r7, #20]
 8002106:	4a0c      	ldr	r2, [pc, #48]	; (8002138 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002108:	fb02 f303 	mul.w	r3, r2, r3
 800210c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800210e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002110:	623b      	str	r3, [r7, #32]
      break;
 8002112:	e002      	b.n	800211a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002114:	4b07      	ldr	r3, [pc, #28]	; (8002134 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002116:	623b      	str	r3, [r7, #32]
      break;
 8002118:	bf00      	nop
    }
  }
  return sysclockfreq;
 800211a:	6a3b      	ldr	r3, [r7, #32]
}
 800211c:	4618      	mov	r0, r3
 800211e:	3728      	adds	r7, #40	; 0x28
 8002120:	46bd      	mov	sp, r7
 8002122:	bc90      	pop	{r4, r7}
 8002124:	4770      	bx	lr
 8002126:	bf00      	nop
 8002128:	080063f0 	.word	0x080063f0
 800212c:	08006400 	.word	0x08006400
 8002130:	40021000 	.word	0x40021000
 8002134:	007a1200 	.word	0x007a1200
 8002138:	003d0900 	.word	0x003d0900

0800213c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800213c:	b480      	push	{r7}
 800213e:	b085      	sub	sp, #20
 8002140:	af00      	add	r7, sp, #0
 8002142:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002144:	4b0a      	ldr	r3, [pc, #40]	; (8002170 <RCC_Delay+0x34>)
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	4a0a      	ldr	r2, [pc, #40]	; (8002174 <RCC_Delay+0x38>)
 800214a:	fba2 2303 	umull	r2, r3, r2, r3
 800214e:	0a5b      	lsrs	r3, r3, #9
 8002150:	687a      	ldr	r2, [r7, #4]
 8002152:	fb02 f303 	mul.w	r3, r2, r3
 8002156:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002158:	bf00      	nop
  }
  while (Delay --);
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	1e5a      	subs	r2, r3, #1
 800215e:	60fa      	str	r2, [r7, #12]
 8002160:	2b00      	cmp	r3, #0
 8002162:	d1f9      	bne.n	8002158 <RCC_Delay+0x1c>
}
 8002164:	bf00      	nop
 8002166:	3714      	adds	r7, #20
 8002168:	46bd      	mov	sp, r7
 800216a:	bc80      	pop	{r7}
 800216c:	4770      	bx	lr
 800216e:	bf00      	nop
 8002170:	20000000 	.word	0x20000000
 8002174:	10624dd3 	.word	0x10624dd3

08002178 <__errno>:
 8002178:	4b01      	ldr	r3, [pc, #4]	; (8002180 <__errno+0x8>)
 800217a:	6818      	ldr	r0, [r3, #0]
 800217c:	4770      	bx	lr
 800217e:	bf00      	nop
 8002180:	2000000c 	.word	0x2000000c

08002184 <__libc_init_array>:
 8002184:	b570      	push	{r4, r5, r6, lr}
 8002186:	2500      	movs	r5, #0
 8002188:	4e0c      	ldr	r6, [pc, #48]	; (80021bc <__libc_init_array+0x38>)
 800218a:	4c0d      	ldr	r4, [pc, #52]	; (80021c0 <__libc_init_array+0x3c>)
 800218c:	1ba4      	subs	r4, r4, r6
 800218e:	10a4      	asrs	r4, r4, #2
 8002190:	42a5      	cmp	r5, r4
 8002192:	d109      	bne.n	80021a8 <__libc_init_array+0x24>
 8002194:	f004 f90c 	bl	80063b0 <_init>
 8002198:	2500      	movs	r5, #0
 800219a:	4e0a      	ldr	r6, [pc, #40]	; (80021c4 <__libc_init_array+0x40>)
 800219c:	4c0a      	ldr	r4, [pc, #40]	; (80021c8 <__libc_init_array+0x44>)
 800219e:	1ba4      	subs	r4, r4, r6
 80021a0:	10a4      	asrs	r4, r4, #2
 80021a2:	42a5      	cmp	r5, r4
 80021a4:	d105      	bne.n	80021b2 <__libc_init_array+0x2e>
 80021a6:	bd70      	pop	{r4, r5, r6, pc}
 80021a8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80021ac:	4798      	blx	r3
 80021ae:	3501      	adds	r5, #1
 80021b0:	e7ee      	b.n	8002190 <__libc_init_array+0xc>
 80021b2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80021b6:	4798      	blx	r3
 80021b8:	3501      	adds	r5, #1
 80021ba:	e7f2      	b.n	80021a2 <__libc_init_array+0x1e>
 80021bc:	08006738 	.word	0x08006738
 80021c0:	08006738 	.word	0x08006738
 80021c4:	08006738 	.word	0x08006738
 80021c8:	0800673c 	.word	0x0800673c

080021cc <memset>:
 80021cc:	4603      	mov	r3, r0
 80021ce:	4402      	add	r2, r0
 80021d0:	4293      	cmp	r3, r2
 80021d2:	d100      	bne.n	80021d6 <memset+0xa>
 80021d4:	4770      	bx	lr
 80021d6:	f803 1b01 	strb.w	r1, [r3], #1
 80021da:	e7f9      	b.n	80021d0 <memset+0x4>

080021dc <__cvt>:
 80021dc:	2b00      	cmp	r3, #0
 80021de:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80021e2:	461e      	mov	r6, r3
 80021e4:	bfbb      	ittet	lt
 80021e6:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 80021ea:	461e      	movlt	r6, r3
 80021ec:	2300      	movge	r3, #0
 80021ee:	232d      	movlt	r3, #45	; 0x2d
 80021f0:	b088      	sub	sp, #32
 80021f2:	9f14      	ldr	r7, [sp, #80]	; 0x50
 80021f4:	e9dd 1a12 	ldrd	r1, sl, [sp, #72]	; 0x48
 80021f8:	f027 0720 	bic.w	r7, r7, #32
 80021fc:	2f46      	cmp	r7, #70	; 0x46
 80021fe:	4614      	mov	r4, r2
 8002200:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8002202:	700b      	strb	r3, [r1, #0]
 8002204:	d004      	beq.n	8002210 <__cvt+0x34>
 8002206:	2f45      	cmp	r7, #69	; 0x45
 8002208:	d100      	bne.n	800220c <__cvt+0x30>
 800220a:	3501      	adds	r5, #1
 800220c:	2302      	movs	r3, #2
 800220e:	e000      	b.n	8002212 <__cvt+0x36>
 8002210:	2303      	movs	r3, #3
 8002212:	aa07      	add	r2, sp, #28
 8002214:	9204      	str	r2, [sp, #16]
 8002216:	aa06      	add	r2, sp, #24
 8002218:	e9cd a202 	strd	sl, r2, [sp, #8]
 800221c:	e9cd 3500 	strd	r3, r5, [sp]
 8002220:	4622      	mov	r2, r4
 8002222:	4633      	mov	r3, r6
 8002224:	f001 fea0 	bl	8003f68 <_dtoa_r>
 8002228:	2f47      	cmp	r7, #71	; 0x47
 800222a:	4680      	mov	r8, r0
 800222c:	d102      	bne.n	8002234 <__cvt+0x58>
 800222e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8002230:	07db      	lsls	r3, r3, #31
 8002232:	d526      	bpl.n	8002282 <__cvt+0xa6>
 8002234:	2f46      	cmp	r7, #70	; 0x46
 8002236:	eb08 0905 	add.w	r9, r8, r5
 800223a:	d111      	bne.n	8002260 <__cvt+0x84>
 800223c:	f898 3000 	ldrb.w	r3, [r8]
 8002240:	2b30      	cmp	r3, #48	; 0x30
 8002242:	d10a      	bne.n	800225a <__cvt+0x7e>
 8002244:	2200      	movs	r2, #0
 8002246:	2300      	movs	r3, #0
 8002248:	4620      	mov	r0, r4
 800224a:	4631      	mov	r1, r6
 800224c:	f7fe fbac 	bl	80009a8 <__aeabi_dcmpeq>
 8002250:	b918      	cbnz	r0, 800225a <__cvt+0x7e>
 8002252:	f1c5 0501 	rsb	r5, r5, #1
 8002256:	f8ca 5000 	str.w	r5, [sl]
 800225a:	f8da 3000 	ldr.w	r3, [sl]
 800225e:	4499      	add	r9, r3
 8002260:	2200      	movs	r2, #0
 8002262:	2300      	movs	r3, #0
 8002264:	4620      	mov	r0, r4
 8002266:	4631      	mov	r1, r6
 8002268:	f7fe fb9e 	bl	80009a8 <__aeabi_dcmpeq>
 800226c:	b938      	cbnz	r0, 800227e <__cvt+0xa2>
 800226e:	2230      	movs	r2, #48	; 0x30
 8002270:	9b07      	ldr	r3, [sp, #28]
 8002272:	454b      	cmp	r3, r9
 8002274:	d205      	bcs.n	8002282 <__cvt+0xa6>
 8002276:	1c59      	adds	r1, r3, #1
 8002278:	9107      	str	r1, [sp, #28]
 800227a:	701a      	strb	r2, [r3, #0]
 800227c:	e7f8      	b.n	8002270 <__cvt+0x94>
 800227e:	f8cd 901c 	str.w	r9, [sp, #28]
 8002282:	4640      	mov	r0, r8
 8002284:	9b07      	ldr	r3, [sp, #28]
 8002286:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8002288:	eba3 0308 	sub.w	r3, r3, r8
 800228c:	6013      	str	r3, [r2, #0]
 800228e:	b008      	add	sp, #32
 8002290:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08002294 <__exponent>:
 8002294:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002296:	2900      	cmp	r1, #0
 8002298:	bfb4      	ite	lt
 800229a:	232d      	movlt	r3, #45	; 0x2d
 800229c:	232b      	movge	r3, #43	; 0x2b
 800229e:	4604      	mov	r4, r0
 80022a0:	bfb8      	it	lt
 80022a2:	4249      	neglt	r1, r1
 80022a4:	2909      	cmp	r1, #9
 80022a6:	f804 2b02 	strb.w	r2, [r4], #2
 80022aa:	7043      	strb	r3, [r0, #1]
 80022ac:	dd21      	ble.n	80022f2 <__exponent+0x5e>
 80022ae:	f10d 0307 	add.w	r3, sp, #7
 80022b2:	461f      	mov	r7, r3
 80022b4:	260a      	movs	r6, #10
 80022b6:	fb91 f5f6 	sdiv	r5, r1, r6
 80022ba:	fb06 1115 	mls	r1, r6, r5, r1
 80022be:	2d09      	cmp	r5, #9
 80022c0:	f101 0130 	add.w	r1, r1, #48	; 0x30
 80022c4:	f803 1c01 	strb.w	r1, [r3, #-1]
 80022c8:	f103 32ff 	add.w	r2, r3, #4294967295
 80022cc:	4629      	mov	r1, r5
 80022ce:	dc09      	bgt.n	80022e4 <__exponent+0x50>
 80022d0:	3130      	adds	r1, #48	; 0x30
 80022d2:	3b02      	subs	r3, #2
 80022d4:	f802 1c01 	strb.w	r1, [r2, #-1]
 80022d8:	42bb      	cmp	r3, r7
 80022da:	4622      	mov	r2, r4
 80022dc:	d304      	bcc.n	80022e8 <__exponent+0x54>
 80022de:	1a10      	subs	r0, r2, r0
 80022e0:	b003      	add	sp, #12
 80022e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80022e4:	4613      	mov	r3, r2
 80022e6:	e7e6      	b.n	80022b6 <__exponent+0x22>
 80022e8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80022ec:	f804 2b01 	strb.w	r2, [r4], #1
 80022f0:	e7f2      	b.n	80022d8 <__exponent+0x44>
 80022f2:	2330      	movs	r3, #48	; 0x30
 80022f4:	4419      	add	r1, r3
 80022f6:	7083      	strb	r3, [r0, #2]
 80022f8:	1d02      	adds	r2, r0, #4
 80022fa:	70c1      	strb	r1, [r0, #3]
 80022fc:	e7ef      	b.n	80022de <__exponent+0x4a>
	...

08002300 <_printf_float>:
 8002300:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002304:	b091      	sub	sp, #68	; 0x44
 8002306:	460c      	mov	r4, r1
 8002308:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 800230a:	4693      	mov	fp, r2
 800230c:	461e      	mov	r6, r3
 800230e:	4605      	mov	r5, r0
 8002310:	f003 f886 	bl	8005420 <_localeconv_r>
 8002314:	6803      	ldr	r3, [r0, #0]
 8002316:	4618      	mov	r0, r3
 8002318:	9309      	str	r3, [sp, #36]	; 0x24
 800231a:	f7fd ff19 	bl	8000150 <strlen>
 800231e:	2300      	movs	r3, #0
 8002320:	930e      	str	r3, [sp, #56]	; 0x38
 8002322:	683b      	ldr	r3, [r7, #0]
 8002324:	900a      	str	r0, [sp, #40]	; 0x28
 8002326:	3307      	adds	r3, #7
 8002328:	f023 0307 	bic.w	r3, r3, #7
 800232c:	f103 0208 	add.w	r2, r3, #8
 8002330:	f894 8018 	ldrb.w	r8, [r4, #24]
 8002334:	f8d4 a000 	ldr.w	sl, [r4]
 8002338:	603a      	str	r2, [r7, #0]
 800233a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800233e:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8002342:	e9d4 7912 	ldrd	r7, r9, [r4, #72]	; 0x48
 8002346:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800234a:	930b      	str	r3, [sp, #44]	; 0x2c
 800234c:	f04f 32ff 	mov.w	r2, #4294967295
 8002350:	4ba6      	ldr	r3, [pc, #664]	; (80025ec <_printf_float+0x2ec>)
 8002352:	4638      	mov	r0, r7
 8002354:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8002356:	f7fe fb59 	bl	8000a0c <__aeabi_dcmpun>
 800235a:	bb68      	cbnz	r0, 80023b8 <_printf_float+0xb8>
 800235c:	f04f 32ff 	mov.w	r2, #4294967295
 8002360:	4ba2      	ldr	r3, [pc, #648]	; (80025ec <_printf_float+0x2ec>)
 8002362:	4638      	mov	r0, r7
 8002364:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8002366:	f7fe fb33 	bl	80009d0 <__aeabi_dcmple>
 800236a:	bb28      	cbnz	r0, 80023b8 <_printf_float+0xb8>
 800236c:	2200      	movs	r2, #0
 800236e:	2300      	movs	r3, #0
 8002370:	4638      	mov	r0, r7
 8002372:	4649      	mov	r1, r9
 8002374:	f7fe fb22 	bl	80009bc <__aeabi_dcmplt>
 8002378:	b110      	cbz	r0, 8002380 <_printf_float+0x80>
 800237a:	232d      	movs	r3, #45	; 0x2d
 800237c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002380:	4f9b      	ldr	r7, [pc, #620]	; (80025f0 <_printf_float+0x2f0>)
 8002382:	4b9c      	ldr	r3, [pc, #624]	; (80025f4 <_printf_float+0x2f4>)
 8002384:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8002388:	bf98      	it	ls
 800238a:	461f      	movls	r7, r3
 800238c:	2303      	movs	r3, #3
 800238e:	f04f 0900 	mov.w	r9, #0
 8002392:	6123      	str	r3, [r4, #16]
 8002394:	f02a 0304 	bic.w	r3, sl, #4
 8002398:	6023      	str	r3, [r4, #0]
 800239a:	9600      	str	r6, [sp, #0]
 800239c:	465b      	mov	r3, fp
 800239e:	aa0f      	add	r2, sp, #60	; 0x3c
 80023a0:	4621      	mov	r1, r4
 80023a2:	4628      	mov	r0, r5
 80023a4:	f000 f9e2 	bl	800276c <_printf_common>
 80023a8:	3001      	adds	r0, #1
 80023aa:	f040 8090 	bne.w	80024ce <_printf_float+0x1ce>
 80023ae:	f04f 30ff 	mov.w	r0, #4294967295
 80023b2:	b011      	add	sp, #68	; 0x44
 80023b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80023b8:	463a      	mov	r2, r7
 80023ba:	464b      	mov	r3, r9
 80023bc:	4638      	mov	r0, r7
 80023be:	4649      	mov	r1, r9
 80023c0:	f7fe fb24 	bl	8000a0c <__aeabi_dcmpun>
 80023c4:	b110      	cbz	r0, 80023cc <_printf_float+0xcc>
 80023c6:	4f8c      	ldr	r7, [pc, #560]	; (80025f8 <_printf_float+0x2f8>)
 80023c8:	4b8c      	ldr	r3, [pc, #560]	; (80025fc <_printf_float+0x2fc>)
 80023ca:	e7db      	b.n	8002384 <_printf_float+0x84>
 80023cc:	6863      	ldr	r3, [r4, #4]
 80023ce:	f44a 6280 	orr.w	r2, sl, #1024	; 0x400
 80023d2:	1c59      	adds	r1, r3, #1
 80023d4:	a80d      	add	r0, sp, #52	; 0x34
 80023d6:	a90e      	add	r1, sp, #56	; 0x38
 80023d8:	d140      	bne.n	800245c <_printf_float+0x15c>
 80023da:	2306      	movs	r3, #6
 80023dc:	6063      	str	r3, [r4, #4]
 80023de:	f04f 0c00 	mov.w	ip, #0
 80023e2:	f10d 0333 	add.w	r3, sp, #51	; 0x33
 80023e6:	e9cd 2301 	strd	r2, r3, [sp, #4]
 80023ea:	6863      	ldr	r3, [r4, #4]
 80023ec:	6022      	str	r2, [r4, #0]
 80023ee:	e9cd 0803 	strd	r0, r8, [sp, #12]
 80023f2:	9300      	str	r3, [sp, #0]
 80023f4:	463a      	mov	r2, r7
 80023f6:	464b      	mov	r3, r9
 80023f8:	e9cd 1c05 	strd	r1, ip, [sp, #20]
 80023fc:	4628      	mov	r0, r5
 80023fe:	f7ff feed 	bl	80021dc <__cvt>
 8002402:	f008 03df 	and.w	r3, r8, #223	; 0xdf
 8002406:	2b47      	cmp	r3, #71	; 0x47
 8002408:	4607      	mov	r7, r0
 800240a:	d109      	bne.n	8002420 <_printf_float+0x120>
 800240c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800240e:	1cd8      	adds	r0, r3, #3
 8002410:	db02      	blt.n	8002418 <_printf_float+0x118>
 8002412:	6862      	ldr	r2, [r4, #4]
 8002414:	4293      	cmp	r3, r2
 8002416:	dd47      	ble.n	80024a8 <_printf_float+0x1a8>
 8002418:	f1a8 0802 	sub.w	r8, r8, #2
 800241c:	fa5f f888 	uxtb.w	r8, r8
 8002420:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 8002424:	990d      	ldr	r1, [sp, #52]	; 0x34
 8002426:	d824      	bhi.n	8002472 <_printf_float+0x172>
 8002428:	3901      	subs	r1, #1
 800242a:	4642      	mov	r2, r8
 800242c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8002430:	910d      	str	r1, [sp, #52]	; 0x34
 8002432:	f7ff ff2f 	bl	8002294 <__exponent>
 8002436:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8002438:	4681      	mov	r9, r0
 800243a:	1813      	adds	r3, r2, r0
 800243c:	2a01      	cmp	r2, #1
 800243e:	6123      	str	r3, [r4, #16]
 8002440:	dc02      	bgt.n	8002448 <_printf_float+0x148>
 8002442:	6822      	ldr	r2, [r4, #0]
 8002444:	07d1      	lsls	r1, r2, #31
 8002446:	d501      	bpl.n	800244c <_printf_float+0x14c>
 8002448:	3301      	adds	r3, #1
 800244a:	6123      	str	r3, [r4, #16]
 800244c:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8002450:	2b00      	cmp	r3, #0
 8002452:	d0a2      	beq.n	800239a <_printf_float+0x9a>
 8002454:	232d      	movs	r3, #45	; 0x2d
 8002456:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800245a:	e79e      	b.n	800239a <_printf_float+0x9a>
 800245c:	f1b8 0f67 	cmp.w	r8, #103	; 0x67
 8002460:	f000 816e 	beq.w	8002740 <_printf_float+0x440>
 8002464:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8002468:	d1b9      	bne.n	80023de <_printf_float+0xde>
 800246a:	2b00      	cmp	r3, #0
 800246c:	d1b7      	bne.n	80023de <_printf_float+0xde>
 800246e:	2301      	movs	r3, #1
 8002470:	e7b4      	b.n	80023dc <_printf_float+0xdc>
 8002472:	f1b8 0f66 	cmp.w	r8, #102	; 0x66
 8002476:	d119      	bne.n	80024ac <_printf_float+0x1ac>
 8002478:	2900      	cmp	r1, #0
 800247a:	6863      	ldr	r3, [r4, #4]
 800247c:	dd0c      	ble.n	8002498 <_printf_float+0x198>
 800247e:	6121      	str	r1, [r4, #16]
 8002480:	b913      	cbnz	r3, 8002488 <_printf_float+0x188>
 8002482:	6822      	ldr	r2, [r4, #0]
 8002484:	07d2      	lsls	r2, r2, #31
 8002486:	d502      	bpl.n	800248e <_printf_float+0x18e>
 8002488:	3301      	adds	r3, #1
 800248a:	440b      	add	r3, r1
 800248c:	6123      	str	r3, [r4, #16]
 800248e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8002490:	f04f 0900 	mov.w	r9, #0
 8002494:	65a3      	str	r3, [r4, #88]	; 0x58
 8002496:	e7d9      	b.n	800244c <_printf_float+0x14c>
 8002498:	b913      	cbnz	r3, 80024a0 <_printf_float+0x1a0>
 800249a:	6822      	ldr	r2, [r4, #0]
 800249c:	07d0      	lsls	r0, r2, #31
 800249e:	d501      	bpl.n	80024a4 <_printf_float+0x1a4>
 80024a0:	3302      	adds	r3, #2
 80024a2:	e7f3      	b.n	800248c <_printf_float+0x18c>
 80024a4:	2301      	movs	r3, #1
 80024a6:	e7f1      	b.n	800248c <_printf_float+0x18c>
 80024a8:	f04f 0867 	mov.w	r8, #103	; 0x67
 80024ac:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 80024b0:	4293      	cmp	r3, r2
 80024b2:	db05      	blt.n	80024c0 <_printf_float+0x1c0>
 80024b4:	6822      	ldr	r2, [r4, #0]
 80024b6:	6123      	str	r3, [r4, #16]
 80024b8:	07d1      	lsls	r1, r2, #31
 80024ba:	d5e8      	bpl.n	800248e <_printf_float+0x18e>
 80024bc:	3301      	adds	r3, #1
 80024be:	e7e5      	b.n	800248c <_printf_float+0x18c>
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	bfcc      	ite	gt
 80024c4:	2301      	movgt	r3, #1
 80024c6:	f1c3 0302 	rsble	r3, r3, #2
 80024ca:	4413      	add	r3, r2
 80024cc:	e7de      	b.n	800248c <_printf_float+0x18c>
 80024ce:	6823      	ldr	r3, [r4, #0]
 80024d0:	055a      	lsls	r2, r3, #21
 80024d2:	d407      	bmi.n	80024e4 <_printf_float+0x1e4>
 80024d4:	6923      	ldr	r3, [r4, #16]
 80024d6:	463a      	mov	r2, r7
 80024d8:	4659      	mov	r1, fp
 80024da:	4628      	mov	r0, r5
 80024dc:	47b0      	blx	r6
 80024de:	3001      	adds	r0, #1
 80024e0:	d129      	bne.n	8002536 <_printf_float+0x236>
 80024e2:	e764      	b.n	80023ae <_printf_float+0xae>
 80024e4:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 80024e8:	f240 80d7 	bls.w	800269a <_printf_float+0x39a>
 80024ec:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80024f0:	2200      	movs	r2, #0
 80024f2:	2300      	movs	r3, #0
 80024f4:	f7fe fa58 	bl	80009a8 <__aeabi_dcmpeq>
 80024f8:	b388      	cbz	r0, 800255e <_printf_float+0x25e>
 80024fa:	2301      	movs	r3, #1
 80024fc:	4a40      	ldr	r2, [pc, #256]	; (8002600 <_printf_float+0x300>)
 80024fe:	4659      	mov	r1, fp
 8002500:	4628      	mov	r0, r5
 8002502:	47b0      	blx	r6
 8002504:	3001      	adds	r0, #1
 8002506:	f43f af52 	beq.w	80023ae <_printf_float+0xae>
 800250a:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800250e:	429a      	cmp	r2, r3
 8002510:	db02      	blt.n	8002518 <_printf_float+0x218>
 8002512:	6823      	ldr	r3, [r4, #0]
 8002514:	07d8      	lsls	r0, r3, #31
 8002516:	d50e      	bpl.n	8002536 <_printf_float+0x236>
 8002518:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800251c:	4659      	mov	r1, fp
 800251e:	4628      	mov	r0, r5
 8002520:	47b0      	blx	r6
 8002522:	3001      	adds	r0, #1
 8002524:	f43f af43 	beq.w	80023ae <_printf_float+0xae>
 8002528:	2700      	movs	r7, #0
 800252a:	f104 081a 	add.w	r8, r4, #26
 800252e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8002530:	3b01      	subs	r3, #1
 8002532:	42bb      	cmp	r3, r7
 8002534:	dc09      	bgt.n	800254a <_printf_float+0x24a>
 8002536:	6823      	ldr	r3, [r4, #0]
 8002538:	079f      	lsls	r7, r3, #30
 800253a:	f100 80fd 	bmi.w	8002738 <_printf_float+0x438>
 800253e:	68e0      	ldr	r0, [r4, #12]
 8002540:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8002542:	4298      	cmp	r0, r3
 8002544:	bfb8      	it	lt
 8002546:	4618      	movlt	r0, r3
 8002548:	e733      	b.n	80023b2 <_printf_float+0xb2>
 800254a:	2301      	movs	r3, #1
 800254c:	4642      	mov	r2, r8
 800254e:	4659      	mov	r1, fp
 8002550:	4628      	mov	r0, r5
 8002552:	47b0      	blx	r6
 8002554:	3001      	adds	r0, #1
 8002556:	f43f af2a 	beq.w	80023ae <_printf_float+0xae>
 800255a:	3701      	adds	r7, #1
 800255c:	e7e7      	b.n	800252e <_printf_float+0x22e>
 800255e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8002560:	2b00      	cmp	r3, #0
 8002562:	dc2b      	bgt.n	80025bc <_printf_float+0x2bc>
 8002564:	2301      	movs	r3, #1
 8002566:	4a26      	ldr	r2, [pc, #152]	; (8002600 <_printf_float+0x300>)
 8002568:	4659      	mov	r1, fp
 800256a:	4628      	mov	r0, r5
 800256c:	47b0      	blx	r6
 800256e:	3001      	adds	r0, #1
 8002570:	f43f af1d 	beq.w	80023ae <_printf_float+0xae>
 8002574:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8002576:	b923      	cbnz	r3, 8002582 <_printf_float+0x282>
 8002578:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800257a:	b913      	cbnz	r3, 8002582 <_printf_float+0x282>
 800257c:	6823      	ldr	r3, [r4, #0]
 800257e:	07d9      	lsls	r1, r3, #31
 8002580:	d5d9      	bpl.n	8002536 <_printf_float+0x236>
 8002582:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8002586:	4659      	mov	r1, fp
 8002588:	4628      	mov	r0, r5
 800258a:	47b0      	blx	r6
 800258c:	3001      	adds	r0, #1
 800258e:	f43f af0e 	beq.w	80023ae <_printf_float+0xae>
 8002592:	f04f 0800 	mov.w	r8, #0
 8002596:	f104 091a 	add.w	r9, r4, #26
 800259a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800259c:	425b      	negs	r3, r3
 800259e:	4543      	cmp	r3, r8
 80025a0:	dc01      	bgt.n	80025a6 <_printf_float+0x2a6>
 80025a2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80025a4:	e797      	b.n	80024d6 <_printf_float+0x1d6>
 80025a6:	2301      	movs	r3, #1
 80025a8:	464a      	mov	r2, r9
 80025aa:	4659      	mov	r1, fp
 80025ac:	4628      	mov	r0, r5
 80025ae:	47b0      	blx	r6
 80025b0:	3001      	adds	r0, #1
 80025b2:	f43f aefc 	beq.w	80023ae <_printf_float+0xae>
 80025b6:	f108 0801 	add.w	r8, r8, #1
 80025ba:	e7ee      	b.n	800259a <_printf_float+0x29a>
 80025bc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80025be:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80025c0:	429a      	cmp	r2, r3
 80025c2:	bfa8      	it	ge
 80025c4:	461a      	movge	r2, r3
 80025c6:	2a00      	cmp	r2, #0
 80025c8:	4690      	mov	r8, r2
 80025ca:	dd07      	ble.n	80025dc <_printf_float+0x2dc>
 80025cc:	4613      	mov	r3, r2
 80025ce:	4659      	mov	r1, fp
 80025d0:	463a      	mov	r2, r7
 80025d2:	4628      	mov	r0, r5
 80025d4:	47b0      	blx	r6
 80025d6:	3001      	adds	r0, #1
 80025d8:	f43f aee9 	beq.w	80023ae <_printf_float+0xae>
 80025dc:	f104 031a 	add.w	r3, r4, #26
 80025e0:	f04f 0a00 	mov.w	sl, #0
 80025e4:	ea28 78e8 	bic.w	r8, r8, r8, asr #31
 80025e8:	930b      	str	r3, [sp, #44]	; 0x2c
 80025ea:	e015      	b.n	8002618 <_printf_float+0x318>
 80025ec:	7fefffff 	.word	0x7fefffff
 80025f0:	0800641c 	.word	0x0800641c
 80025f4:	08006418 	.word	0x08006418
 80025f8:	08006424 	.word	0x08006424
 80025fc:	08006420 	.word	0x08006420
 8002600:	08006428 	.word	0x08006428
 8002604:	2301      	movs	r3, #1
 8002606:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8002608:	4659      	mov	r1, fp
 800260a:	4628      	mov	r0, r5
 800260c:	47b0      	blx	r6
 800260e:	3001      	adds	r0, #1
 8002610:	f43f aecd 	beq.w	80023ae <_printf_float+0xae>
 8002614:	f10a 0a01 	add.w	sl, sl, #1
 8002618:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
 800261c:	eba9 0308 	sub.w	r3, r9, r8
 8002620:	4553      	cmp	r3, sl
 8002622:	dcef      	bgt.n	8002604 <_printf_float+0x304>
 8002624:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8002628:	429a      	cmp	r2, r3
 800262a:	444f      	add	r7, r9
 800262c:	db14      	blt.n	8002658 <_printf_float+0x358>
 800262e:	6823      	ldr	r3, [r4, #0]
 8002630:	07da      	lsls	r2, r3, #31
 8002632:	d411      	bmi.n	8002658 <_printf_float+0x358>
 8002634:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8002636:	990d      	ldr	r1, [sp, #52]	; 0x34
 8002638:	eba3 0209 	sub.w	r2, r3, r9
 800263c:	eba3 0901 	sub.w	r9, r3, r1
 8002640:	4591      	cmp	r9, r2
 8002642:	bfa8      	it	ge
 8002644:	4691      	movge	r9, r2
 8002646:	f1b9 0f00 	cmp.w	r9, #0
 800264a:	dc0d      	bgt.n	8002668 <_printf_float+0x368>
 800264c:	2700      	movs	r7, #0
 800264e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8002652:	f104 081a 	add.w	r8, r4, #26
 8002656:	e018      	b.n	800268a <_printf_float+0x38a>
 8002658:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800265c:	4659      	mov	r1, fp
 800265e:	4628      	mov	r0, r5
 8002660:	47b0      	blx	r6
 8002662:	3001      	adds	r0, #1
 8002664:	d1e6      	bne.n	8002634 <_printf_float+0x334>
 8002666:	e6a2      	b.n	80023ae <_printf_float+0xae>
 8002668:	464b      	mov	r3, r9
 800266a:	463a      	mov	r2, r7
 800266c:	4659      	mov	r1, fp
 800266e:	4628      	mov	r0, r5
 8002670:	47b0      	blx	r6
 8002672:	3001      	adds	r0, #1
 8002674:	d1ea      	bne.n	800264c <_printf_float+0x34c>
 8002676:	e69a      	b.n	80023ae <_printf_float+0xae>
 8002678:	2301      	movs	r3, #1
 800267a:	4642      	mov	r2, r8
 800267c:	4659      	mov	r1, fp
 800267e:	4628      	mov	r0, r5
 8002680:	47b0      	blx	r6
 8002682:	3001      	adds	r0, #1
 8002684:	f43f ae93 	beq.w	80023ae <_printf_float+0xae>
 8002688:	3701      	adds	r7, #1
 800268a:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800268e:	1a9b      	subs	r3, r3, r2
 8002690:	eba3 0309 	sub.w	r3, r3, r9
 8002694:	42bb      	cmp	r3, r7
 8002696:	dcef      	bgt.n	8002678 <_printf_float+0x378>
 8002698:	e74d      	b.n	8002536 <_printf_float+0x236>
 800269a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800269c:	2a01      	cmp	r2, #1
 800269e:	dc01      	bgt.n	80026a4 <_printf_float+0x3a4>
 80026a0:	07db      	lsls	r3, r3, #31
 80026a2:	d538      	bpl.n	8002716 <_printf_float+0x416>
 80026a4:	2301      	movs	r3, #1
 80026a6:	463a      	mov	r2, r7
 80026a8:	4659      	mov	r1, fp
 80026aa:	4628      	mov	r0, r5
 80026ac:	47b0      	blx	r6
 80026ae:	3001      	adds	r0, #1
 80026b0:	f43f ae7d 	beq.w	80023ae <_printf_float+0xae>
 80026b4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80026b8:	4659      	mov	r1, fp
 80026ba:	4628      	mov	r0, r5
 80026bc:	47b0      	blx	r6
 80026be:	3001      	adds	r0, #1
 80026c0:	f107 0701 	add.w	r7, r7, #1
 80026c4:	f43f ae73 	beq.w	80023ae <_printf_float+0xae>
 80026c8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80026cc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80026ce:	2200      	movs	r2, #0
 80026d0:	f103 38ff 	add.w	r8, r3, #4294967295
 80026d4:	2300      	movs	r3, #0
 80026d6:	f7fe f967 	bl	80009a8 <__aeabi_dcmpeq>
 80026da:	b9c0      	cbnz	r0, 800270e <_printf_float+0x40e>
 80026dc:	4643      	mov	r3, r8
 80026de:	463a      	mov	r2, r7
 80026e0:	4659      	mov	r1, fp
 80026e2:	4628      	mov	r0, r5
 80026e4:	47b0      	blx	r6
 80026e6:	3001      	adds	r0, #1
 80026e8:	d10d      	bne.n	8002706 <_printf_float+0x406>
 80026ea:	e660      	b.n	80023ae <_printf_float+0xae>
 80026ec:	2301      	movs	r3, #1
 80026ee:	4642      	mov	r2, r8
 80026f0:	4659      	mov	r1, fp
 80026f2:	4628      	mov	r0, r5
 80026f4:	47b0      	blx	r6
 80026f6:	3001      	adds	r0, #1
 80026f8:	f43f ae59 	beq.w	80023ae <_printf_float+0xae>
 80026fc:	3701      	adds	r7, #1
 80026fe:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8002700:	3b01      	subs	r3, #1
 8002702:	42bb      	cmp	r3, r7
 8002704:	dcf2      	bgt.n	80026ec <_printf_float+0x3ec>
 8002706:	464b      	mov	r3, r9
 8002708:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800270c:	e6e4      	b.n	80024d8 <_printf_float+0x1d8>
 800270e:	2700      	movs	r7, #0
 8002710:	f104 081a 	add.w	r8, r4, #26
 8002714:	e7f3      	b.n	80026fe <_printf_float+0x3fe>
 8002716:	2301      	movs	r3, #1
 8002718:	e7e1      	b.n	80026de <_printf_float+0x3de>
 800271a:	2301      	movs	r3, #1
 800271c:	4642      	mov	r2, r8
 800271e:	4659      	mov	r1, fp
 8002720:	4628      	mov	r0, r5
 8002722:	47b0      	blx	r6
 8002724:	3001      	adds	r0, #1
 8002726:	f43f ae42 	beq.w	80023ae <_printf_float+0xae>
 800272a:	3701      	adds	r7, #1
 800272c:	68e3      	ldr	r3, [r4, #12]
 800272e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8002730:	1a9b      	subs	r3, r3, r2
 8002732:	42bb      	cmp	r3, r7
 8002734:	dcf1      	bgt.n	800271a <_printf_float+0x41a>
 8002736:	e702      	b.n	800253e <_printf_float+0x23e>
 8002738:	2700      	movs	r7, #0
 800273a:	f104 0819 	add.w	r8, r4, #25
 800273e:	e7f5      	b.n	800272c <_printf_float+0x42c>
 8002740:	2b00      	cmp	r3, #0
 8002742:	f43f ae94 	beq.w	800246e <_printf_float+0x16e>
 8002746:	f04f 0c00 	mov.w	ip, #0
 800274a:	e9cd 1c05 	strd	r1, ip, [sp, #20]
 800274e:	f10d 0133 	add.w	r1, sp, #51	; 0x33
 8002752:	6022      	str	r2, [r4, #0]
 8002754:	e9cd 0803 	strd	r0, r8, [sp, #12]
 8002758:	e9cd 2101 	strd	r2, r1, [sp, #4]
 800275c:	9300      	str	r3, [sp, #0]
 800275e:	463a      	mov	r2, r7
 8002760:	464b      	mov	r3, r9
 8002762:	4628      	mov	r0, r5
 8002764:	f7ff fd3a 	bl	80021dc <__cvt>
 8002768:	4607      	mov	r7, r0
 800276a:	e64f      	b.n	800240c <_printf_float+0x10c>

0800276c <_printf_common>:
 800276c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002770:	4691      	mov	r9, r2
 8002772:	461f      	mov	r7, r3
 8002774:	688a      	ldr	r2, [r1, #8]
 8002776:	690b      	ldr	r3, [r1, #16]
 8002778:	4606      	mov	r6, r0
 800277a:	4293      	cmp	r3, r2
 800277c:	bfb8      	it	lt
 800277e:	4613      	movlt	r3, r2
 8002780:	f8c9 3000 	str.w	r3, [r9]
 8002784:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002788:	460c      	mov	r4, r1
 800278a:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800278e:	b112      	cbz	r2, 8002796 <_printf_common+0x2a>
 8002790:	3301      	adds	r3, #1
 8002792:	f8c9 3000 	str.w	r3, [r9]
 8002796:	6823      	ldr	r3, [r4, #0]
 8002798:	0699      	lsls	r1, r3, #26
 800279a:	bf42      	ittt	mi
 800279c:	f8d9 3000 	ldrmi.w	r3, [r9]
 80027a0:	3302      	addmi	r3, #2
 80027a2:	f8c9 3000 	strmi.w	r3, [r9]
 80027a6:	6825      	ldr	r5, [r4, #0]
 80027a8:	f015 0506 	ands.w	r5, r5, #6
 80027ac:	d107      	bne.n	80027be <_printf_common+0x52>
 80027ae:	f104 0a19 	add.w	sl, r4, #25
 80027b2:	68e3      	ldr	r3, [r4, #12]
 80027b4:	f8d9 2000 	ldr.w	r2, [r9]
 80027b8:	1a9b      	subs	r3, r3, r2
 80027ba:	42ab      	cmp	r3, r5
 80027bc:	dc29      	bgt.n	8002812 <_printf_common+0xa6>
 80027be:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80027c2:	6822      	ldr	r2, [r4, #0]
 80027c4:	3300      	adds	r3, #0
 80027c6:	bf18      	it	ne
 80027c8:	2301      	movne	r3, #1
 80027ca:	0692      	lsls	r2, r2, #26
 80027cc:	d42e      	bmi.n	800282c <_printf_common+0xc0>
 80027ce:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80027d2:	4639      	mov	r1, r7
 80027d4:	4630      	mov	r0, r6
 80027d6:	47c0      	blx	r8
 80027d8:	3001      	adds	r0, #1
 80027da:	d021      	beq.n	8002820 <_printf_common+0xb4>
 80027dc:	6823      	ldr	r3, [r4, #0]
 80027de:	68e5      	ldr	r5, [r4, #12]
 80027e0:	f003 0306 	and.w	r3, r3, #6
 80027e4:	2b04      	cmp	r3, #4
 80027e6:	bf18      	it	ne
 80027e8:	2500      	movne	r5, #0
 80027ea:	f8d9 2000 	ldr.w	r2, [r9]
 80027ee:	f04f 0900 	mov.w	r9, #0
 80027f2:	bf08      	it	eq
 80027f4:	1aad      	subeq	r5, r5, r2
 80027f6:	68a3      	ldr	r3, [r4, #8]
 80027f8:	6922      	ldr	r2, [r4, #16]
 80027fa:	bf08      	it	eq
 80027fc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002800:	4293      	cmp	r3, r2
 8002802:	bfc4      	itt	gt
 8002804:	1a9b      	subgt	r3, r3, r2
 8002806:	18ed      	addgt	r5, r5, r3
 8002808:	341a      	adds	r4, #26
 800280a:	454d      	cmp	r5, r9
 800280c:	d11a      	bne.n	8002844 <_printf_common+0xd8>
 800280e:	2000      	movs	r0, #0
 8002810:	e008      	b.n	8002824 <_printf_common+0xb8>
 8002812:	2301      	movs	r3, #1
 8002814:	4652      	mov	r2, sl
 8002816:	4639      	mov	r1, r7
 8002818:	4630      	mov	r0, r6
 800281a:	47c0      	blx	r8
 800281c:	3001      	adds	r0, #1
 800281e:	d103      	bne.n	8002828 <_printf_common+0xbc>
 8002820:	f04f 30ff 	mov.w	r0, #4294967295
 8002824:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002828:	3501      	adds	r5, #1
 800282a:	e7c2      	b.n	80027b2 <_printf_common+0x46>
 800282c:	2030      	movs	r0, #48	; 0x30
 800282e:	18e1      	adds	r1, r4, r3
 8002830:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002834:	1c5a      	adds	r2, r3, #1
 8002836:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800283a:	4422      	add	r2, r4
 800283c:	3302      	adds	r3, #2
 800283e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002842:	e7c4      	b.n	80027ce <_printf_common+0x62>
 8002844:	2301      	movs	r3, #1
 8002846:	4622      	mov	r2, r4
 8002848:	4639      	mov	r1, r7
 800284a:	4630      	mov	r0, r6
 800284c:	47c0      	blx	r8
 800284e:	3001      	adds	r0, #1
 8002850:	d0e6      	beq.n	8002820 <_printf_common+0xb4>
 8002852:	f109 0901 	add.w	r9, r9, #1
 8002856:	e7d8      	b.n	800280a <_printf_common+0x9e>

08002858 <_printf_i>:
 8002858:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800285c:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8002860:	460c      	mov	r4, r1
 8002862:	7e09      	ldrb	r1, [r1, #24]
 8002864:	b085      	sub	sp, #20
 8002866:	296e      	cmp	r1, #110	; 0x6e
 8002868:	4617      	mov	r7, r2
 800286a:	4606      	mov	r6, r0
 800286c:	4698      	mov	r8, r3
 800286e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8002870:	f000 80b3 	beq.w	80029da <_printf_i+0x182>
 8002874:	d822      	bhi.n	80028bc <_printf_i+0x64>
 8002876:	2963      	cmp	r1, #99	; 0x63
 8002878:	d036      	beq.n	80028e8 <_printf_i+0x90>
 800287a:	d80a      	bhi.n	8002892 <_printf_i+0x3a>
 800287c:	2900      	cmp	r1, #0
 800287e:	f000 80b9 	beq.w	80029f4 <_printf_i+0x19c>
 8002882:	2958      	cmp	r1, #88	; 0x58
 8002884:	f000 8083 	beq.w	800298e <_printf_i+0x136>
 8002888:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800288c:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8002890:	e032      	b.n	80028f8 <_printf_i+0xa0>
 8002892:	2964      	cmp	r1, #100	; 0x64
 8002894:	d001      	beq.n	800289a <_printf_i+0x42>
 8002896:	2969      	cmp	r1, #105	; 0x69
 8002898:	d1f6      	bne.n	8002888 <_printf_i+0x30>
 800289a:	6820      	ldr	r0, [r4, #0]
 800289c:	6813      	ldr	r3, [r2, #0]
 800289e:	0605      	lsls	r5, r0, #24
 80028a0:	f103 0104 	add.w	r1, r3, #4
 80028a4:	d52a      	bpl.n	80028fc <_printf_i+0xa4>
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	6011      	str	r1, [r2, #0]
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	da03      	bge.n	80028b6 <_printf_i+0x5e>
 80028ae:	222d      	movs	r2, #45	; 0x2d
 80028b0:	425b      	negs	r3, r3
 80028b2:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80028b6:	486f      	ldr	r0, [pc, #444]	; (8002a74 <_printf_i+0x21c>)
 80028b8:	220a      	movs	r2, #10
 80028ba:	e039      	b.n	8002930 <_printf_i+0xd8>
 80028bc:	2973      	cmp	r1, #115	; 0x73
 80028be:	f000 809d 	beq.w	80029fc <_printf_i+0x1a4>
 80028c2:	d808      	bhi.n	80028d6 <_printf_i+0x7e>
 80028c4:	296f      	cmp	r1, #111	; 0x6f
 80028c6:	d020      	beq.n	800290a <_printf_i+0xb2>
 80028c8:	2970      	cmp	r1, #112	; 0x70
 80028ca:	d1dd      	bne.n	8002888 <_printf_i+0x30>
 80028cc:	6823      	ldr	r3, [r4, #0]
 80028ce:	f043 0320 	orr.w	r3, r3, #32
 80028d2:	6023      	str	r3, [r4, #0]
 80028d4:	e003      	b.n	80028de <_printf_i+0x86>
 80028d6:	2975      	cmp	r1, #117	; 0x75
 80028d8:	d017      	beq.n	800290a <_printf_i+0xb2>
 80028da:	2978      	cmp	r1, #120	; 0x78
 80028dc:	d1d4      	bne.n	8002888 <_printf_i+0x30>
 80028de:	2378      	movs	r3, #120	; 0x78
 80028e0:	4865      	ldr	r0, [pc, #404]	; (8002a78 <_printf_i+0x220>)
 80028e2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80028e6:	e055      	b.n	8002994 <_printf_i+0x13c>
 80028e8:	6813      	ldr	r3, [r2, #0]
 80028ea:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80028ee:	1d19      	adds	r1, r3, #4
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	6011      	str	r1, [r2, #0]
 80028f4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80028f8:	2301      	movs	r3, #1
 80028fa:	e08c      	b.n	8002a16 <_printf_i+0x1be>
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	f010 0f40 	tst.w	r0, #64	; 0x40
 8002902:	6011      	str	r1, [r2, #0]
 8002904:	bf18      	it	ne
 8002906:	b21b      	sxthne	r3, r3
 8002908:	e7cf      	b.n	80028aa <_printf_i+0x52>
 800290a:	6813      	ldr	r3, [r2, #0]
 800290c:	6825      	ldr	r5, [r4, #0]
 800290e:	1d18      	adds	r0, r3, #4
 8002910:	6010      	str	r0, [r2, #0]
 8002912:	0628      	lsls	r0, r5, #24
 8002914:	d501      	bpl.n	800291a <_printf_i+0xc2>
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	e002      	b.n	8002920 <_printf_i+0xc8>
 800291a:	0668      	lsls	r0, r5, #25
 800291c:	d5fb      	bpl.n	8002916 <_printf_i+0xbe>
 800291e:	881b      	ldrh	r3, [r3, #0]
 8002920:	296f      	cmp	r1, #111	; 0x6f
 8002922:	bf14      	ite	ne
 8002924:	220a      	movne	r2, #10
 8002926:	2208      	moveq	r2, #8
 8002928:	4852      	ldr	r0, [pc, #328]	; (8002a74 <_printf_i+0x21c>)
 800292a:	2100      	movs	r1, #0
 800292c:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8002930:	6865      	ldr	r5, [r4, #4]
 8002932:	2d00      	cmp	r5, #0
 8002934:	60a5      	str	r5, [r4, #8]
 8002936:	f2c0 8095 	blt.w	8002a64 <_printf_i+0x20c>
 800293a:	6821      	ldr	r1, [r4, #0]
 800293c:	f021 0104 	bic.w	r1, r1, #4
 8002940:	6021      	str	r1, [r4, #0]
 8002942:	2b00      	cmp	r3, #0
 8002944:	d13d      	bne.n	80029c2 <_printf_i+0x16a>
 8002946:	2d00      	cmp	r5, #0
 8002948:	f040 808e 	bne.w	8002a68 <_printf_i+0x210>
 800294c:	4665      	mov	r5, ip
 800294e:	2a08      	cmp	r2, #8
 8002950:	d10b      	bne.n	800296a <_printf_i+0x112>
 8002952:	6823      	ldr	r3, [r4, #0]
 8002954:	07db      	lsls	r3, r3, #31
 8002956:	d508      	bpl.n	800296a <_printf_i+0x112>
 8002958:	6923      	ldr	r3, [r4, #16]
 800295a:	6862      	ldr	r2, [r4, #4]
 800295c:	429a      	cmp	r2, r3
 800295e:	bfde      	ittt	le
 8002960:	2330      	movle	r3, #48	; 0x30
 8002962:	f805 3c01 	strble.w	r3, [r5, #-1]
 8002966:	f105 35ff 	addle.w	r5, r5, #4294967295
 800296a:	ebac 0305 	sub.w	r3, ip, r5
 800296e:	6123      	str	r3, [r4, #16]
 8002970:	f8cd 8000 	str.w	r8, [sp]
 8002974:	463b      	mov	r3, r7
 8002976:	aa03      	add	r2, sp, #12
 8002978:	4621      	mov	r1, r4
 800297a:	4630      	mov	r0, r6
 800297c:	f7ff fef6 	bl	800276c <_printf_common>
 8002980:	3001      	adds	r0, #1
 8002982:	d14d      	bne.n	8002a20 <_printf_i+0x1c8>
 8002984:	f04f 30ff 	mov.w	r0, #4294967295
 8002988:	b005      	add	sp, #20
 800298a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800298e:	4839      	ldr	r0, [pc, #228]	; (8002a74 <_printf_i+0x21c>)
 8002990:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8002994:	6813      	ldr	r3, [r2, #0]
 8002996:	6821      	ldr	r1, [r4, #0]
 8002998:	1d1d      	adds	r5, r3, #4
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	6015      	str	r5, [r2, #0]
 800299e:	060a      	lsls	r2, r1, #24
 80029a0:	d50b      	bpl.n	80029ba <_printf_i+0x162>
 80029a2:	07ca      	lsls	r2, r1, #31
 80029a4:	bf44      	itt	mi
 80029a6:	f041 0120 	orrmi.w	r1, r1, #32
 80029aa:	6021      	strmi	r1, [r4, #0]
 80029ac:	b91b      	cbnz	r3, 80029b6 <_printf_i+0x15e>
 80029ae:	6822      	ldr	r2, [r4, #0]
 80029b0:	f022 0220 	bic.w	r2, r2, #32
 80029b4:	6022      	str	r2, [r4, #0]
 80029b6:	2210      	movs	r2, #16
 80029b8:	e7b7      	b.n	800292a <_printf_i+0xd2>
 80029ba:	064d      	lsls	r5, r1, #25
 80029bc:	bf48      	it	mi
 80029be:	b29b      	uxthmi	r3, r3
 80029c0:	e7ef      	b.n	80029a2 <_printf_i+0x14a>
 80029c2:	4665      	mov	r5, ip
 80029c4:	fbb3 f1f2 	udiv	r1, r3, r2
 80029c8:	fb02 3311 	mls	r3, r2, r1, r3
 80029cc:	5cc3      	ldrb	r3, [r0, r3]
 80029ce:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80029d2:	460b      	mov	r3, r1
 80029d4:	2900      	cmp	r1, #0
 80029d6:	d1f5      	bne.n	80029c4 <_printf_i+0x16c>
 80029d8:	e7b9      	b.n	800294e <_printf_i+0xf6>
 80029da:	6813      	ldr	r3, [r2, #0]
 80029dc:	6825      	ldr	r5, [r4, #0]
 80029de:	1d18      	adds	r0, r3, #4
 80029e0:	6961      	ldr	r1, [r4, #20]
 80029e2:	6010      	str	r0, [r2, #0]
 80029e4:	0628      	lsls	r0, r5, #24
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	d501      	bpl.n	80029ee <_printf_i+0x196>
 80029ea:	6019      	str	r1, [r3, #0]
 80029ec:	e002      	b.n	80029f4 <_printf_i+0x19c>
 80029ee:	066a      	lsls	r2, r5, #25
 80029f0:	d5fb      	bpl.n	80029ea <_printf_i+0x192>
 80029f2:	8019      	strh	r1, [r3, #0]
 80029f4:	2300      	movs	r3, #0
 80029f6:	4665      	mov	r5, ip
 80029f8:	6123      	str	r3, [r4, #16]
 80029fa:	e7b9      	b.n	8002970 <_printf_i+0x118>
 80029fc:	6813      	ldr	r3, [r2, #0]
 80029fe:	1d19      	adds	r1, r3, #4
 8002a00:	6011      	str	r1, [r2, #0]
 8002a02:	681d      	ldr	r5, [r3, #0]
 8002a04:	6862      	ldr	r2, [r4, #4]
 8002a06:	2100      	movs	r1, #0
 8002a08:	4628      	mov	r0, r5
 8002a0a:	f002 fd95 	bl	8005538 <memchr>
 8002a0e:	b108      	cbz	r0, 8002a14 <_printf_i+0x1bc>
 8002a10:	1b40      	subs	r0, r0, r5
 8002a12:	6060      	str	r0, [r4, #4]
 8002a14:	6863      	ldr	r3, [r4, #4]
 8002a16:	6123      	str	r3, [r4, #16]
 8002a18:	2300      	movs	r3, #0
 8002a1a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002a1e:	e7a7      	b.n	8002970 <_printf_i+0x118>
 8002a20:	6923      	ldr	r3, [r4, #16]
 8002a22:	462a      	mov	r2, r5
 8002a24:	4639      	mov	r1, r7
 8002a26:	4630      	mov	r0, r6
 8002a28:	47c0      	blx	r8
 8002a2a:	3001      	adds	r0, #1
 8002a2c:	d0aa      	beq.n	8002984 <_printf_i+0x12c>
 8002a2e:	6823      	ldr	r3, [r4, #0]
 8002a30:	079b      	lsls	r3, r3, #30
 8002a32:	d413      	bmi.n	8002a5c <_printf_i+0x204>
 8002a34:	68e0      	ldr	r0, [r4, #12]
 8002a36:	9b03      	ldr	r3, [sp, #12]
 8002a38:	4298      	cmp	r0, r3
 8002a3a:	bfb8      	it	lt
 8002a3c:	4618      	movlt	r0, r3
 8002a3e:	e7a3      	b.n	8002988 <_printf_i+0x130>
 8002a40:	2301      	movs	r3, #1
 8002a42:	464a      	mov	r2, r9
 8002a44:	4639      	mov	r1, r7
 8002a46:	4630      	mov	r0, r6
 8002a48:	47c0      	blx	r8
 8002a4a:	3001      	adds	r0, #1
 8002a4c:	d09a      	beq.n	8002984 <_printf_i+0x12c>
 8002a4e:	3501      	adds	r5, #1
 8002a50:	68e3      	ldr	r3, [r4, #12]
 8002a52:	9a03      	ldr	r2, [sp, #12]
 8002a54:	1a9b      	subs	r3, r3, r2
 8002a56:	42ab      	cmp	r3, r5
 8002a58:	dcf2      	bgt.n	8002a40 <_printf_i+0x1e8>
 8002a5a:	e7eb      	b.n	8002a34 <_printf_i+0x1dc>
 8002a5c:	2500      	movs	r5, #0
 8002a5e:	f104 0919 	add.w	r9, r4, #25
 8002a62:	e7f5      	b.n	8002a50 <_printf_i+0x1f8>
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d1ac      	bne.n	80029c2 <_printf_i+0x16a>
 8002a68:	7803      	ldrb	r3, [r0, #0]
 8002a6a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002a6e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002a72:	e76c      	b.n	800294e <_printf_i+0xf6>
 8002a74:	0800642a 	.word	0x0800642a
 8002a78:	0800643b 	.word	0x0800643b

08002a7c <_scanf_float>:
 8002a7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002a80:	469a      	mov	sl, r3
 8002a82:	688b      	ldr	r3, [r1, #8]
 8002a84:	4616      	mov	r6, r2
 8002a86:	1e5a      	subs	r2, r3, #1
 8002a88:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8002a8c:	bf88      	it	hi
 8002a8e:	f46f 72ae 	mvnhi.w	r2, #348	; 0x15c
 8002a92:	b087      	sub	sp, #28
 8002a94:	bf85      	ittet	hi
 8002a96:	189b      	addhi	r3, r3, r2
 8002a98:	9301      	strhi	r3, [sp, #4]
 8002a9a:	2300      	movls	r3, #0
 8002a9c:	f240 135d 	movwhi	r3, #349	; 0x15d
 8002aa0:	4688      	mov	r8, r1
 8002aa2:	f04f 0b00 	mov.w	fp, #0
 8002aa6:	bf8c      	ite	hi
 8002aa8:	608b      	strhi	r3, [r1, #8]
 8002aaa:	9301      	strls	r3, [sp, #4]
 8002aac:	680b      	ldr	r3, [r1, #0]
 8002aae:	4607      	mov	r7, r0
 8002ab0:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8002ab4:	f848 3b1c 	str.w	r3, [r8], #28
 8002ab8:	460c      	mov	r4, r1
 8002aba:	4645      	mov	r5, r8
 8002abc:	465a      	mov	r2, fp
 8002abe:	46d9      	mov	r9, fp
 8002ac0:	e9cd bb03 	strd	fp, fp, [sp, #12]
 8002ac4:	f8cd b008 	str.w	fp, [sp, #8]
 8002ac8:	68a1      	ldr	r1, [r4, #8]
 8002aca:	b181      	cbz	r1, 8002aee <_scanf_float+0x72>
 8002acc:	6833      	ldr	r3, [r6, #0]
 8002ace:	781b      	ldrb	r3, [r3, #0]
 8002ad0:	2b49      	cmp	r3, #73	; 0x49
 8002ad2:	d071      	beq.n	8002bb8 <_scanf_float+0x13c>
 8002ad4:	d84d      	bhi.n	8002b72 <_scanf_float+0xf6>
 8002ad6:	2b39      	cmp	r3, #57	; 0x39
 8002ad8:	d840      	bhi.n	8002b5c <_scanf_float+0xe0>
 8002ada:	2b31      	cmp	r3, #49	; 0x31
 8002adc:	f080 8088 	bcs.w	8002bf0 <_scanf_float+0x174>
 8002ae0:	2b2d      	cmp	r3, #45	; 0x2d
 8002ae2:	f000 8090 	beq.w	8002c06 <_scanf_float+0x18a>
 8002ae6:	d815      	bhi.n	8002b14 <_scanf_float+0x98>
 8002ae8:	2b2b      	cmp	r3, #43	; 0x2b
 8002aea:	f000 808c 	beq.w	8002c06 <_scanf_float+0x18a>
 8002aee:	f1b9 0f00 	cmp.w	r9, #0
 8002af2:	d003      	beq.n	8002afc <_scanf_float+0x80>
 8002af4:	6823      	ldr	r3, [r4, #0]
 8002af6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002afa:	6023      	str	r3, [r4, #0]
 8002afc:	3a01      	subs	r2, #1
 8002afe:	2a01      	cmp	r2, #1
 8002b00:	f200 80ea 	bhi.w	8002cd8 <_scanf_float+0x25c>
 8002b04:	4545      	cmp	r5, r8
 8002b06:	f200 80dc 	bhi.w	8002cc2 <_scanf_float+0x246>
 8002b0a:	2601      	movs	r6, #1
 8002b0c:	4630      	mov	r0, r6
 8002b0e:	b007      	add	sp, #28
 8002b10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002b14:	2b2e      	cmp	r3, #46	; 0x2e
 8002b16:	f000 809f 	beq.w	8002c58 <_scanf_float+0x1dc>
 8002b1a:	2b30      	cmp	r3, #48	; 0x30
 8002b1c:	d1e7      	bne.n	8002aee <_scanf_float+0x72>
 8002b1e:	6820      	ldr	r0, [r4, #0]
 8002b20:	f410 7f80 	tst.w	r0, #256	; 0x100
 8002b24:	d064      	beq.n	8002bf0 <_scanf_float+0x174>
 8002b26:	9b01      	ldr	r3, [sp, #4]
 8002b28:	f020 0080 	bic.w	r0, r0, #128	; 0x80
 8002b2c:	6020      	str	r0, [r4, #0]
 8002b2e:	f109 0901 	add.w	r9, r9, #1
 8002b32:	b11b      	cbz	r3, 8002b3c <_scanf_float+0xc0>
 8002b34:	3b01      	subs	r3, #1
 8002b36:	3101      	adds	r1, #1
 8002b38:	9301      	str	r3, [sp, #4]
 8002b3a:	60a1      	str	r1, [r4, #8]
 8002b3c:	68a3      	ldr	r3, [r4, #8]
 8002b3e:	3b01      	subs	r3, #1
 8002b40:	60a3      	str	r3, [r4, #8]
 8002b42:	6923      	ldr	r3, [r4, #16]
 8002b44:	3301      	adds	r3, #1
 8002b46:	6123      	str	r3, [r4, #16]
 8002b48:	6873      	ldr	r3, [r6, #4]
 8002b4a:	3b01      	subs	r3, #1
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	6073      	str	r3, [r6, #4]
 8002b50:	f340 80ac 	ble.w	8002cac <_scanf_float+0x230>
 8002b54:	6833      	ldr	r3, [r6, #0]
 8002b56:	3301      	adds	r3, #1
 8002b58:	6033      	str	r3, [r6, #0]
 8002b5a:	e7b5      	b.n	8002ac8 <_scanf_float+0x4c>
 8002b5c:	2b45      	cmp	r3, #69	; 0x45
 8002b5e:	f000 8085 	beq.w	8002c6c <_scanf_float+0x1f0>
 8002b62:	2b46      	cmp	r3, #70	; 0x46
 8002b64:	d06a      	beq.n	8002c3c <_scanf_float+0x1c0>
 8002b66:	2b41      	cmp	r3, #65	; 0x41
 8002b68:	d1c1      	bne.n	8002aee <_scanf_float+0x72>
 8002b6a:	2a01      	cmp	r2, #1
 8002b6c:	d1bf      	bne.n	8002aee <_scanf_float+0x72>
 8002b6e:	2202      	movs	r2, #2
 8002b70:	e046      	b.n	8002c00 <_scanf_float+0x184>
 8002b72:	2b65      	cmp	r3, #101	; 0x65
 8002b74:	d07a      	beq.n	8002c6c <_scanf_float+0x1f0>
 8002b76:	d818      	bhi.n	8002baa <_scanf_float+0x12e>
 8002b78:	2b54      	cmp	r3, #84	; 0x54
 8002b7a:	d066      	beq.n	8002c4a <_scanf_float+0x1ce>
 8002b7c:	d811      	bhi.n	8002ba2 <_scanf_float+0x126>
 8002b7e:	2b4e      	cmp	r3, #78	; 0x4e
 8002b80:	d1b5      	bne.n	8002aee <_scanf_float+0x72>
 8002b82:	2a00      	cmp	r2, #0
 8002b84:	d146      	bne.n	8002c14 <_scanf_float+0x198>
 8002b86:	f1b9 0f00 	cmp.w	r9, #0
 8002b8a:	d145      	bne.n	8002c18 <_scanf_float+0x19c>
 8002b8c:	6821      	ldr	r1, [r4, #0]
 8002b8e:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 8002b92:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 8002b96:	d13f      	bne.n	8002c18 <_scanf_float+0x19c>
 8002b98:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8002b9c:	6021      	str	r1, [r4, #0]
 8002b9e:	2201      	movs	r2, #1
 8002ba0:	e02e      	b.n	8002c00 <_scanf_float+0x184>
 8002ba2:	2b59      	cmp	r3, #89	; 0x59
 8002ba4:	d01e      	beq.n	8002be4 <_scanf_float+0x168>
 8002ba6:	2b61      	cmp	r3, #97	; 0x61
 8002ba8:	e7de      	b.n	8002b68 <_scanf_float+0xec>
 8002baa:	2b6e      	cmp	r3, #110	; 0x6e
 8002bac:	d0e9      	beq.n	8002b82 <_scanf_float+0x106>
 8002bae:	d815      	bhi.n	8002bdc <_scanf_float+0x160>
 8002bb0:	2b66      	cmp	r3, #102	; 0x66
 8002bb2:	d043      	beq.n	8002c3c <_scanf_float+0x1c0>
 8002bb4:	2b69      	cmp	r3, #105	; 0x69
 8002bb6:	d19a      	bne.n	8002aee <_scanf_float+0x72>
 8002bb8:	f1bb 0f00 	cmp.w	fp, #0
 8002bbc:	d138      	bne.n	8002c30 <_scanf_float+0x1b4>
 8002bbe:	f1b9 0f00 	cmp.w	r9, #0
 8002bc2:	d197      	bne.n	8002af4 <_scanf_float+0x78>
 8002bc4:	6821      	ldr	r1, [r4, #0]
 8002bc6:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 8002bca:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 8002bce:	d195      	bne.n	8002afc <_scanf_float+0x80>
 8002bd0:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8002bd4:	6021      	str	r1, [r4, #0]
 8002bd6:	f04f 0b01 	mov.w	fp, #1
 8002bda:	e011      	b.n	8002c00 <_scanf_float+0x184>
 8002bdc:	2b74      	cmp	r3, #116	; 0x74
 8002bde:	d034      	beq.n	8002c4a <_scanf_float+0x1ce>
 8002be0:	2b79      	cmp	r3, #121	; 0x79
 8002be2:	d184      	bne.n	8002aee <_scanf_float+0x72>
 8002be4:	f1bb 0f07 	cmp.w	fp, #7
 8002be8:	d181      	bne.n	8002aee <_scanf_float+0x72>
 8002bea:	f04f 0b08 	mov.w	fp, #8
 8002bee:	e007      	b.n	8002c00 <_scanf_float+0x184>
 8002bf0:	eb12 0f0b 	cmn.w	r2, fp
 8002bf4:	f47f af7b 	bne.w	8002aee <_scanf_float+0x72>
 8002bf8:	6821      	ldr	r1, [r4, #0]
 8002bfa:	f421 71c0 	bic.w	r1, r1, #384	; 0x180
 8002bfe:	6021      	str	r1, [r4, #0]
 8002c00:	702b      	strb	r3, [r5, #0]
 8002c02:	3501      	adds	r5, #1
 8002c04:	e79a      	b.n	8002b3c <_scanf_float+0xc0>
 8002c06:	6821      	ldr	r1, [r4, #0]
 8002c08:	0608      	lsls	r0, r1, #24
 8002c0a:	f57f af70 	bpl.w	8002aee <_scanf_float+0x72>
 8002c0e:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8002c12:	e7f4      	b.n	8002bfe <_scanf_float+0x182>
 8002c14:	2a02      	cmp	r2, #2
 8002c16:	d047      	beq.n	8002ca8 <_scanf_float+0x22c>
 8002c18:	f1bb 0f01 	cmp.w	fp, #1
 8002c1c:	d003      	beq.n	8002c26 <_scanf_float+0x1aa>
 8002c1e:	f1bb 0f04 	cmp.w	fp, #4
 8002c22:	f47f af64 	bne.w	8002aee <_scanf_float+0x72>
 8002c26:	f10b 0b01 	add.w	fp, fp, #1
 8002c2a:	fa5f fb8b 	uxtb.w	fp, fp
 8002c2e:	e7e7      	b.n	8002c00 <_scanf_float+0x184>
 8002c30:	f1bb 0f03 	cmp.w	fp, #3
 8002c34:	d0f7      	beq.n	8002c26 <_scanf_float+0x1aa>
 8002c36:	f1bb 0f05 	cmp.w	fp, #5
 8002c3a:	e7f2      	b.n	8002c22 <_scanf_float+0x1a6>
 8002c3c:	f1bb 0f02 	cmp.w	fp, #2
 8002c40:	f47f af55 	bne.w	8002aee <_scanf_float+0x72>
 8002c44:	f04f 0b03 	mov.w	fp, #3
 8002c48:	e7da      	b.n	8002c00 <_scanf_float+0x184>
 8002c4a:	f1bb 0f06 	cmp.w	fp, #6
 8002c4e:	f47f af4e 	bne.w	8002aee <_scanf_float+0x72>
 8002c52:	f04f 0b07 	mov.w	fp, #7
 8002c56:	e7d3      	b.n	8002c00 <_scanf_float+0x184>
 8002c58:	6821      	ldr	r1, [r4, #0]
 8002c5a:	0588      	lsls	r0, r1, #22
 8002c5c:	f57f af47 	bpl.w	8002aee <_scanf_float+0x72>
 8002c60:	f421 7120 	bic.w	r1, r1, #640	; 0x280
 8002c64:	6021      	str	r1, [r4, #0]
 8002c66:	f8cd 9008 	str.w	r9, [sp, #8]
 8002c6a:	e7c9      	b.n	8002c00 <_scanf_float+0x184>
 8002c6c:	6821      	ldr	r1, [r4, #0]
 8002c6e:	f401 60a0 	and.w	r0, r1, #1280	; 0x500
 8002c72:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 8002c76:	d006      	beq.n	8002c86 <_scanf_float+0x20a>
 8002c78:	0548      	lsls	r0, r1, #21
 8002c7a:	f57f af38 	bpl.w	8002aee <_scanf_float+0x72>
 8002c7e:	f1b9 0f00 	cmp.w	r9, #0
 8002c82:	f43f af3b 	beq.w	8002afc <_scanf_float+0x80>
 8002c86:	0588      	lsls	r0, r1, #22
 8002c88:	bf58      	it	pl
 8002c8a:	9802      	ldrpl	r0, [sp, #8]
 8002c8c:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8002c90:	bf58      	it	pl
 8002c92:	eba9 0000 	subpl.w	r0, r9, r0
 8002c96:	f441 71c0 	orr.w	r1, r1, #384	; 0x180
 8002c9a:	bf58      	it	pl
 8002c9c:	e9cd 0503 	strdpl	r0, r5, [sp, #12]
 8002ca0:	6021      	str	r1, [r4, #0]
 8002ca2:	f04f 0900 	mov.w	r9, #0
 8002ca6:	e7ab      	b.n	8002c00 <_scanf_float+0x184>
 8002ca8:	2203      	movs	r2, #3
 8002caa:	e7a9      	b.n	8002c00 <_scanf_float+0x184>
 8002cac:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8002cb0:	4631      	mov	r1, r6
 8002cb2:	4638      	mov	r0, r7
 8002cb4:	9205      	str	r2, [sp, #20]
 8002cb6:	4798      	blx	r3
 8002cb8:	9a05      	ldr	r2, [sp, #20]
 8002cba:	2800      	cmp	r0, #0
 8002cbc:	f43f af04 	beq.w	8002ac8 <_scanf_float+0x4c>
 8002cc0:	e715      	b.n	8002aee <_scanf_float+0x72>
 8002cc2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8002cc6:	4632      	mov	r2, r6
 8002cc8:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8002ccc:	4638      	mov	r0, r7
 8002cce:	4798      	blx	r3
 8002cd0:	6923      	ldr	r3, [r4, #16]
 8002cd2:	3b01      	subs	r3, #1
 8002cd4:	6123      	str	r3, [r4, #16]
 8002cd6:	e715      	b.n	8002b04 <_scanf_float+0x88>
 8002cd8:	f10b 33ff 	add.w	r3, fp, #4294967295
 8002cdc:	2b06      	cmp	r3, #6
 8002cde:	d80a      	bhi.n	8002cf6 <_scanf_float+0x27a>
 8002ce0:	f1bb 0f02 	cmp.w	fp, #2
 8002ce4:	d967      	bls.n	8002db6 <_scanf_float+0x33a>
 8002ce6:	f1ab 0b03 	sub.w	fp, fp, #3
 8002cea:	fa5f fb8b 	uxtb.w	fp, fp
 8002cee:	eba5 0b0b 	sub.w	fp, r5, fp
 8002cf2:	455d      	cmp	r5, fp
 8002cf4:	d14a      	bne.n	8002d8c <_scanf_float+0x310>
 8002cf6:	6823      	ldr	r3, [r4, #0]
 8002cf8:	05da      	lsls	r2, r3, #23
 8002cfa:	d51f      	bpl.n	8002d3c <_scanf_float+0x2c0>
 8002cfc:	055b      	lsls	r3, r3, #21
 8002cfe:	d467      	bmi.n	8002dd0 <_scanf_float+0x354>
 8002d00:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8002d04:	6923      	ldr	r3, [r4, #16]
 8002d06:	2965      	cmp	r1, #101	; 0x65
 8002d08:	f103 33ff 	add.w	r3, r3, #4294967295
 8002d0c:	f105 3bff 	add.w	fp, r5, #4294967295
 8002d10:	6123      	str	r3, [r4, #16]
 8002d12:	d00d      	beq.n	8002d30 <_scanf_float+0x2b4>
 8002d14:	2945      	cmp	r1, #69	; 0x45
 8002d16:	d00b      	beq.n	8002d30 <_scanf_float+0x2b4>
 8002d18:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8002d1c:	4632      	mov	r2, r6
 8002d1e:	4638      	mov	r0, r7
 8002d20:	4798      	blx	r3
 8002d22:	6923      	ldr	r3, [r4, #16]
 8002d24:	f815 1c02 	ldrb.w	r1, [r5, #-2]
 8002d28:	3b01      	subs	r3, #1
 8002d2a:	f1a5 0b02 	sub.w	fp, r5, #2
 8002d2e:	6123      	str	r3, [r4, #16]
 8002d30:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8002d34:	4632      	mov	r2, r6
 8002d36:	4638      	mov	r0, r7
 8002d38:	4798      	blx	r3
 8002d3a:	465d      	mov	r5, fp
 8002d3c:	6826      	ldr	r6, [r4, #0]
 8002d3e:	f016 0610 	ands.w	r6, r6, #16
 8002d42:	d176      	bne.n	8002e32 <_scanf_float+0x3b6>
 8002d44:	702e      	strb	r6, [r5, #0]
 8002d46:	6823      	ldr	r3, [r4, #0]
 8002d48:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002d4c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002d50:	d141      	bne.n	8002dd6 <_scanf_float+0x35a>
 8002d52:	9b02      	ldr	r3, [sp, #8]
 8002d54:	eba9 0303 	sub.w	r3, r9, r3
 8002d58:	425a      	negs	r2, r3
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d148      	bne.n	8002df0 <_scanf_float+0x374>
 8002d5e:	4641      	mov	r1, r8
 8002d60:	2200      	movs	r2, #0
 8002d62:	4638      	mov	r0, r7
 8002d64:	f000 ff14 	bl	8003b90 <_strtod_r>
 8002d68:	6825      	ldr	r5, [r4, #0]
 8002d6a:	4680      	mov	r8, r0
 8002d6c:	f015 0f02 	tst.w	r5, #2
 8002d70:	4689      	mov	r9, r1
 8002d72:	f8da 3000 	ldr.w	r3, [sl]
 8002d76:	d046      	beq.n	8002e06 <_scanf_float+0x38a>
 8002d78:	1d1a      	adds	r2, r3, #4
 8002d7a:	f8ca 2000 	str.w	r2, [sl]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	e9c3 8900 	strd	r8, r9, [r3]
 8002d84:	68e3      	ldr	r3, [r4, #12]
 8002d86:	3301      	adds	r3, #1
 8002d88:	60e3      	str	r3, [r4, #12]
 8002d8a:	e6bf      	b.n	8002b0c <_scanf_float+0x90>
 8002d8c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8002d90:	4632      	mov	r2, r6
 8002d92:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8002d96:	4638      	mov	r0, r7
 8002d98:	4798      	blx	r3
 8002d9a:	6923      	ldr	r3, [r4, #16]
 8002d9c:	3b01      	subs	r3, #1
 8002d9e:	6123      	str	r3, [r4, #16]
 8002da0:	e7a7      	b.n	8002cf2 <_scanf_float+0x276>
 8002da2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8002da6:	4632      	mov	r2, r6
 8002da8:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8002dac:	4638      	mov	r0, r7
 8002dae:	4798      	blx	r3
 8002db0:	6923      	ldr	r3, [r4, #16]
 8002db2:	3b01      	subs	r3, #1
 8002db4:	6123      	str	r3, [r4, #16]
 8002db6:	4545      	cmp	r5, r8
 8002db8:	d8f3      	bhi.n	8002da2 <_scanf_float+0x326>
 8002dba:	e6a6      	b.n	8002b0a <_scanf_float+0x8e>
 8002dbc:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8002dc0:	4632      	mov	r2, r6
 8002dc2:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8002dc6:	4638      	mov	r0, r7
 8002dc8:	4798      	blx	r3
 8002dca:	6923      	ldr	r3, [r4, #16]
 8002dcc:	3b01      	subs	r3, #1
 8002dce:	6123      	str	r3, [r4, #16]
 8002dd0:	4545      	cmp	r5, r8
 8002dd2:	d8f3      	bhi.n	8002dbc <_scanf_float+0x340>
 8002dd4:	e699      	b.n	8002b0a <_scanf_float+0x8e>
 8002dd6:	9b03      	ldr	r3, [sp, #12]
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d0c0      	beq.n	8002d5e <_scanf_float+0x2e2>
 8002ddc:	9904      	ldr	r1, [sp, #16]
 8002dde:	230a      	movs	r3, #10
 8002de0:	4632      	mov	r2, r6
 8002de2:	3101      	adds	r1, #1
 8002de4:	4638      	mov	r0, r7
 8002de6:	f000 ff5f 	bl	8003ca8 <_strtol_r>
 8002dea:	9b03      	ldr	r3, [sp, #12]
 8002dec:	9d04      	ldr	r5, [sp, #16]
 8002dee:	1ac2      	subs	r2, r0, r3
 8002df0:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8002df4:	429d      	cmp	r5, r3
 8002df6:	bf28      	it	cs
 8002df8:	f504 75b7 	addcs.w	r5, r4, #366	; 0x16e
 8002dfc:	490e      	ldr	r1, [pc, #56]	; (8002e38 <_scanf_float+0x3bc>)
 8002dfe:	4628      	mov	r0, r5
 8002e00:	f000 f884 	bl	8002f0c <siprintf>
 8002e04:	e7ab      	b.n	8002d5e <_scanf_float+0x2e2>
 8002e06:	1d1f      	adds	r7, r3, #4
 8002e08:	f015 0504 	ands.w	r5, r5, #4
 8002e0c:	f8ca 7000 	str.w	r7, [sl]
 8002e10:	d1b5      	bne.n	8002d7e <_scanf_float+0x302>
 8002e12:	681f      	ldr	r7, [r3, #0]
 8002e14:	4602      	mov	r2, r0
 8002e16:	460b      	mov	r3, r1
 8002e18:	f7fd fdf8 	bl	8000a0c <__aeabi_dcmpun>
 8002e1c:	b120      	cbz	r0, 8002e28 <_scanf_float+0x3ac>
 8002e1e:	4628      	mov	r0, r5
 8002e20:	f000 f870 	bl	8002f04 <nanf>
 8002e24:	6038      	str	r0, [r7, #0]
 8002e26:	e7ad      	b.n	8002d84 <_scanf_float+0x308>
 8002e28:	4640      	mov	r0, r8
 8002e2a:	4649      	mov	r1, r9
 8002e2c:	f7fd fe4c 	bl	8000ac8 <__aeabi_d2f>
 8002e30:	e7f8      	b.n	8002e24 <_scanf_float+0x3a8>
 8002e32:	2600      	movs	r6, #0
 8002e34:	e66a      	b.n	8002b0c <_scanf_float+0x90>
 8002e36:	bf00      	nop
 8002e38:	0800644c 	.word	0x0800644c

08002e3c <_puts_r>:
 8002e3c:	b570      	push	{r4, r5, r6, lr}
 8002e3e:	460e      	mov	r6, r1
 8002e40:	4605      	mov	r5, r0
 8002e42:	b118      	cbz	r0, 8002e4c <_puts_r+0x10>
 8002e44:	6983      	ldr	r3, [r0, #24]
 8002e46:	b90b      	cbnz	r3, 8002e4c <_puts_r+0x10>
 8002e48:	f001 ff32 	bl	8004cb0 <__sinit>
 8002e4c:	69ab      	ldr	r3, [r5, #24]
 8002e4e:	68ac      	ldr	r4, [r5, #8]
 8002e50:	b913      	cbnz	r3, 8002e58 <_puts_r+0x1c>
 8002e52:	4628      	mov	r0, r5
 8002e54:	f001 ff2c 	bl	8004cb0 <__sinit>
 8002e58:	4b23      	ldr	r3, [pc, #140]	; (8002ee8 <_puts_r+0xac>)
 8002e5a:	429c      	cmp	r4, r3
 8002e5c:	d117      	bne.n	8002e8e <_puts_r+0x52>
 8002e5e:	686c      	ldr	r4, [r5, #4]
 8002e60:	89a3      	ldrh	r3, [r4, #12]
 8002e62:	071b      	lsls	r3, r3, #28
 8002e64:	d51d      	bpl.n	8002ea2 <_puts_r+0x66>
 8002e66:	6923      	ldr	r3, [r4, #16]
 8002e68:	b1db      	cbz	r3, 8002ea2 <_puts_r+0x66>
 8002e6a:	3e01      	subs	r6, #1
 8002e6c:	68a3      	ldr	r3, [r4, #8]
 8002e6e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8002e72:	3b01      	subs	r3, #1
 8002e74:	60a3      	str	r3, [r4, #8]
 8002e76:	b9e9      	cbnz	r1, 8002eb4 <_puts_r+0x78>
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	da2e      	bge.n	8002eda <_puts_r+0x9e>
 8002e7c:	4622      	mov	r2, r4
 8002e7e:	210a      	movs	r1, #10
 8002e80:	4628      	mov	r0, r5
 8002e82:	f000 ff23 	bl	8003ccc <__swbuf_r>
 8002e86:	3001      	adds	r0, #1
 8002e88:	d011      	beq.n	8002eae <_puts_r+0x72>
 8002e8a:	200a      	movs	r0, #10
 8002e8c:	e011      	b.n	8002eb2 <_puts_r+0x76>
 8002e8e:	4b17      	ldr	r3, [pc, #92]	; (8002eec <_puts_r+0xb0>)
 8002e90:	429c      	cmp	r4, r3
 8002e92:	d101      	bne.n	8002e98 <_puts_r+0x5c>
 8002e94:	68ac      	ldr	r4, [r5, #8]
 8002e96:	e7e3      	b.n	8002e60 <_puts_r+0x24>
 8002e98:	4b15      	ldr	r3, [pc, #84]	; (8002ef0 <_puts_r+0xb4>)
 8002e9a:	429c      	cmp	r4, r3
 8002e9c:	bf08      	it	eq
 8002e9e:	68ec      	ldreq	r4, [r5, #12]
 8002ea0:	e7de      	b.n	8002e60 <_puts_r+0x24>
 8002ea2:	4621      	mov	r1, r4
 8002ea4:	4628      	mov	r0, r5
 8002ea6:	f000 ff63 	bl	8003d70 <__swsetup_r>
 8002eaa:	2800      	cmp	r0, #0
 8002eac:	d0dd      	beq.n	8002e6a <_puts_r+0x2e>
 8002eae:	f04f 30ff 	mov.w	r0, #4294967295
 8002eb2:	bd70      	pop	{r4, r5, r6, pc}
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	da04      	bge.n	8002ec2 <_puts_r+0x86>
 8002eb8:	69a2      	ldr	r2, [r4, #24]
 8002eba:	429a      	cmp	r2, r3
 8002ebc:	dc06      	bgt.n	8002ecc <_puts_r+0x90>
 8002ebe:	290a      	cmp	r1, #10
 8002ec0:	d004      	beq.n	8002ecc <_puts_r+0x90>
 8002ec2:	6823      	ldr	r3, [r4, #0]
 8002ec4:	1c5a      	adds	r2, r3, #1
 8002ec6:	6022      	str	r2, [r4, #0]
 8002ec8:	7019      	strb	r1, [r3, #0]
 8002eca:	e7cf      	b.n	8002e6c <_puts_r+0x30>
 8002ecc:	4622      	mov	r2, r4
 8002ece:	4628      	mov	r0, r5
 8002ed0:	f000 fefc 	bl	8003ccc <__swbuf_r>
 8002ed4:	3001      	adds	r0, #1
 8002ed6:	d1c9      	bne.n	8002e6c <_puts_r+0x30>
 8002ed8:	e7e9      	b.n	8002eae <_puts_r+0x72>
 8002eda:	200a      	movs	r0, #10
 8002edc:	6823      	ldr	r3, [r4, #0]
 8002ede:	1c5a      	adds	r2, r3, #1
 8002ee0:	6022      	str	r2, [r4, #0]
 8002ee2:	7018      	strb	r0, [r3, #0]
 8002ee4:	e7e5      	b.n	8002eb2 <_puts_r+0x76>
 8002ee6:	bf00      	nop
 8002ee8:	080064d8 	.word	0x080064d8
 8002eec:	080064f8 	.word	0x080064f8
 8002ef0:	080064b8 	.word	0x080064b8

08002ef4 <puts>:
 8002ef4:	4b02      	ldr	r3, [pc, #8]	; (8002f00 <puts+0xc>)
 8002ef6:	4601      	mov	r1, r0
 8002ef8:	6818      	ldr	r0, [r3, #0]
 8002efa:	f7ff bf9f 	b.w	8002e3c <_puts_r>
 8002efe:	bf00      	nop
 8002f00:	2000000c 	.word	0x2000000c

08002f04 <nanf>:
 8002f04:	4800      	ldr	r0, [pc, #0]	; (8002f08 <nanf+0x4>)
 8002f06:	4770      	bx	lr
 8002f08:	7fc00000 	.word	0x7fc00000

08002f0c <siprintf>:
 8002f0c:	b40e      	push	{r1, r2, r3}
 8002f0e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8002f12:	b500      	push	{lr}
 8002f14:	b09c      	sub	sp, #112	; 0x70
 8002f16:	ab1d      	add	r3, sp, #116	; 0x74
 8002f18:	9002      	str	r0, [sp, #8]
 8002f1a:	9006      	str	r0, [sp, #24]
 8002f1c:	9107      	str	r1, [sp, #28]
 8002f1e:	9104      	str	r1, [sp, #16]
 8002f20:	4808      	ldr	r0, [pc, #32]	; (8002f44 <siprintf+0x38>)
 8002f22:	4909      	ldr	r1, [pc, #36]	; (8002f48 <siprintf+0x3c>)
 8002f24:	f853 2b04 	ldr.w	r2, [r3], #4
 8002f28:	9105      	str	r1, [sp, #20]
 8002f2a:	6800      	ldr	r0, [r0, #0]
 8002f2c:	a902      	add	r1, sp, #8
 8002f2e:	9301      	str	r3, [sp, #4]
 8002f30:	f003 f822 	bl	8005f78 <_svfiprintf_r>
 8002f34:	2200      	movs	r2, #0
 8002f36:	9b02      	ldr	r3, [sp, #8]
 8002f38:	701a      	strb	r2, [r3, #0]
 8002f3a:	b01c      	add	sp, #112	; 0x70
 8002f3c:	f85d eb04 	ldr.w	lr, [sp], #4
 8002f40:	b003      	add	sp, #12
 8002f42:	4770      	bx	lr
 8002f44:	2000000c 	.word	0x2000000c
 8002f48:	ffff0208 	.word	0xffff0208

08002f4c <sulp>:
 8002f4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002f50:	460f      	mov	r7, r1
 8002f52:	4690      	mov	r8, r2
 8002f54:	f002 fdd4 	bl	8005b00 <__ulp>
 8002f58:	4604      	mov	r4, r0
 8002f5a:	460d      	mov	r5, r1
 8002f5c:	f1b8 0f00 	cmp.w	r8, #0
 8002f60:	d011      	beq.n	8002f86 <sulp+0x3a>
 8002f62:	f3c7 530a 	ubfx	r3, r7, #20, #11
 8002f66:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	dd0b      	ble.n	8002f86 <sulp+0x3a>
 8002f6e:	2400      	movs	r4, #0
 8002f70:	051b      	lsls	r3, r3, #20
 8002f72:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8002f76:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8002f7a:	4622      	mov	r2, r4
 8002f7c:	462b      	mov	r3, r5
 8002f7e:	f7fd faab 	bl	80004d8 <__aeabi_dmul>
 8002f82:	4604      	mov	r4, r0
 8002f84:	460d      	mov	r5, r1
 8002f86:	4620      	mov	r0, r4
 8002f88:	4629      	mov	r1, r5
 8002f8a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

08002f90 <_strtod_l>:
 8002f90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002f94:	461f      	mov	r7, r3
 8002f96:	2300      	movs	r3, #0
 8002f98:	b0a1      	sub	sp, #132	; 0x84
 8002f9a:	4683      	mov	fp, r0
 8002f9c:	4638      	mov	r0, r7
 8002f9e:	460e      	mov	r6, r1
 8002fa0:	9217      	str	r2, [sp, #92]	; 0x5c
 8002fa2:	931c      	str	r3, [sp, #112]	; 0x70
 8002fa4:	f002 fa39 	bl	800541a <__localeconv_l>
 8002fa8:	4680      	mov	r8, r0
 8002faa:	6800      	ldr	r0, [r0, #0]
 8002fac:	f7fd f8d0 	bl	8000150 <strlen>
 8002fb0:	f04f 0900 	mov.w	r9, #0
 8002fb4:	4604      	mov	r4, r0
 8002fb6:	f04f 0a00 	mov.w	sl, #0
 8002fba:	961b      	str	r6, [sp, #108]	; 0x6c
 8002fbc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8002fbe:	781a      	ldrb	r2, [r3, #0]
 8002fc0:	2a0d      	cmp	r2, #13
 8002fc2:	d832      	bhi.n	800302a <_strtod_l+0x9a>
 8002fc4:	2a09      	cmp	r2, #9
 8002fc6:	d236      	bcs.n	8003036 <_strtod_l+0xa6>
 8002fc8:	2a00      	cmp	r2, #0
 8002fca:	d03e      	beq.n	800304a <_strtod_l+0xba>
 8002fcc:	2300      	movs	r3, #0
 8002fce:	930d      	str	r3, [sp, #52]	; 0x34
 8002fd0:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 8002fd2:	782b      	ldrb	r3, [r5, #0]
 8002fd4:	2b30      	cmp	r3, #48	; 0x30
 8002fd6:	f040 80ac 	bne.w	8003132 <_strtod_l+0x1a2>
 8002fda:	786b      	ldrb	r3, [r5, #1]
 8002fdc:	2b58      	cmp	r3, #88	; 0x58
 8002fde:	d001      	beq.n	8002fe4 <_strtod_l+0x54>
 8002fe0:	2b78      	cmp	r3, #120	; 0x78
 8002fe2:	d167      	bne.n	80030b4 <_strtod_l+0x124>
 8002fe4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8002fe6:	9702      	str	r7, [sp, #8]
 8002fe8:	9301      	str	r3, [sp, #4]
 8002fea:	ab1c      	add	r3, sp, #112	; 0x70
 8002fec:	9300      	str	r3, [sp, #0]
 8002fee:	4a89      	ldr	r2, [pc, #548]	; (8003214 <_strtod_l+0x284>)
 8002ff0:	ab1d      	add	r3, sp, #116	; 0x74
 8002ff2:	a91b      	add	r1, sp, #108	; 0x6c
 8002ff4:	4658      	mov	r0, fp
 8002ff6:	f001 ff35 	bl	8004e64 <__gethex>
 8002ffa:	f010 0407 	ands.w	r4, r0, #7
 8002ffe:	4606      	mov	r6, r0
 8003000:	d005      	beq.n	800300e <_strtod_l+0x7e>
 8003002:	2c06      	cmp	r4, #6
 8003004:	d12b      	bne.n	800305e <_strtod_l+0xce>
 8003006:	2300      	movs	r3, #0
 8003008:	3501      	adds	r5, #1
 800300a:	951b      	str	r5, [sp, #108]	; 0x6c
 800300c:	930d      	str	r3, [sp, #52]	; 0x34
 800300e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8003010:	2b00      	cmp	r3, #0
 8003012:	f040 85a6 	bne.w	8003b62 <_strtod_l+0xbd2>
 8003016:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003018:	b1e3      	cbz	r3, 8003054 <_strtod_l+0xc4>
 800301a:	464a      	mov	r2, r9
 800301c:	f10a 4300 	add.w	r3, sl, #2147483648	; 0x80000000
 8003020:	4610      	mov	r0, r2
 8003022:	4619      	mov	r1, r3
 8003024:	b021      	add	sp, #132	; 0x84
 8003026:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800302a:	2a2b      	cmp	r2, #43	; 0x2b
 800302c:	d015      	beq.n	800305a <_strtod_l+0xca>
 800302e:	2a2d      	cmp	r2, #45	; 0x2d
 8003030:	d004      	beq.n	800303c <_strtod_l+0xac>
 8003032:	2a20      	cmp	r2, #32
 8003034:	d1ca      	bne.n	8002fcc <_strtod_l+0x3c>
 8003036:	3301      	adds	r3, #1
 8003038:	931b      	str	r3, [sp, #108]	; 0x6c
 800303a:	e7bf      	b.n	8002fbc <_strtod_l+0x2c>
 800303c:	2201      	movs	r2, #1
 800303e:	920d      	str	r2, [sp, #52]	; 0x34
 8003040:	1c5a      	adds	r2, r3, #1
 8003042:	921b      	str	r2, [sp, #108]	; 0x6c
 8003044:	785b      	ldrb	r3, [r3, #1]
 8003046:	2b00      	cmp	r3, #0
 8003048:	d1c2      	bne.n	8002fd0 <_strtod_l+0x40>
 800304a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800304c:	961b      	str	r6, [sp, #108]	; 0x6c
 800304e:	2b00      	cmp	r3, #0
 8003050:	f040 8585 	bne.w	8003b5e <_strtod_l+0xbce>
 8003054:	464a      	mov	r2, r9
 8003056:	4653      	mov	r3, sl
 8003058:	e7e2      	b.n	8003020 <_strtod_l+0x90>
 800305a:	2200      	movs	r2, #0
 800305c:	e7ef      	b.n	800303e <_strtod_l+0xae>
 800305e:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8003060:	b13a      	cbz	r2, 8003072 <_strtod_l+0xe2>
 8003062:	2135      	movs	r1, #53	; 0x35
 8003064:	a81e      	add	r0, sp, #120	; 0x78
 8003066:	f002 fe3e 	bl	8005ce6 <__copybits>
 800306a:	991c      	ldr	r1, [sp, #112]	; 0x70
 800306c:	4658      	mov	r0, fp
 800306e:	f002 fab0 	bl	80055d2 <_Bfree>
 8003072:	3c01      	subs	r4, #1
 8003074:	2c04      	cmp	r4, #4
 8003076:	d806      	bhi.n	8003086 <_strtod_l+0xf6>
 8003078:	e8df f004 	tbb	[pc, r4]
 800307c:	1714030a 	.word	0x1714030a
 8003080:	0a          	.byte	0x0a
 8003081:	00          	.byte	0x00
 8003082:	e9dd 9a1e 	ldrd	r9, sl, [sp, #120]	; 0x78
 8003086:	0731      	lsls	r1, r6, #28
 8003088:	d5c1      	bpl.n	800300e <_strtod_l+0x7e>
 800308a:	f04a 4a00 	orr.w	sl, sl, #2147483648	; 0x80000000
 800308e:	e7be      	b.n	800300e <_strtod_l+0x7e>
 8003090:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8003092:	e9dd 931e 	ldrd	r9, r3, [sp, #120]	; 0x78
 8003096:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800309a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800309e:	ea43 5a02 	orr.w	sl, r3, r2, lsl #20
 80030a2:	e7f0      	b.n	8003086 <_strtod_l+0xf6>
 80030a4:	f8df a170 	ldr.w	sl, [pc, #368]	; 8003218 <_strtod_l+0x288>
 80030a8:	e7ed      	b.n	8003086 <_strtod_l+0xf6>
 80030aa:	f06f 4a00 	mvn.w	sl, #2147483648	; 0x80000000
 80030ae:	f04f 39ff 	mov.w	r9, #4294967295
 80030b2:	e7e8      	b.n	8003086 <_strtod_l+0xf6>
 80030b4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80030b6:	1c5a      	adds	r2, r3, #1
 80030b8:	921b      	str	r2, [sp, #108]	; 0x6c
 80030ba:	785b      	ldrb	r3, [r3, #1]
 80030bc:	2b30      	cmp	r3, #48	; 0x30
 80030be:	d0f9      	beq.n	80030b4 <_strtod_l+0x124>
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d0a4      	beq.n	800300e <_strtod_l+0x7e>
 80030c4:	2301      	movs	r3, #1
 80030c6:	2500      	movs	r5, #0
 80030c8:	220a      	movs	r2, #10
 80030ca:	9307      	str	r3, [sp, #28]
 80030cc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80030ce:	9506      	str	r5, [sp, #24]
 80030d0:	9308      	str	r3, [sp, #32]
 80030d2:	9504      	str	r5, [sp, #16]
 80030d4:	981b      	ldr	r0, [sp, #108]	; 0x6c
 80030d6:	7807      	ldrb	r7, [r0, #0]
 80030d8:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 80030dc:	b2d9      	uxtb	r1, r3
 80030de:	2909      	cmp	r1, #9
 80030e0:	d929      	bls.n	8003136 <_strtod_l+0x1a6>
 80030e2:	4622      	mov	r2, r4
 80030e4:	f8d8 1000 	ldr.w	r1, [r8]
 80030e8:	f003 f891 	bl	800620e <strncmp>
 80030ec:	2800      	cmp	r0, #0
 80030ee:	d031      	beq.n	8003154 <_strtod_l+0x1c4>
 80030f0:	2000      	movs	r0, #0
 80030f2:	463b      	mov	r3, r7
 80030f4:	4602      	mov	r2, r0
 80030f6:	9c04      	ldr	r4, [sp, #16]
 80030f8:	9005      	str	r0, [sp, #20]
 80030fa:	2b65      	cmp	r3, #101	; 0x65
 80030fc:	d001      	beq.n	8003102 <_strtod_l+0x172>
 80030fe:	2b45      	cmp	r3, #69	; 0x45
 8003100:	d114      	bne.n	800312c <_strtod_l+0x19c>
 8003102:	b924      	cbnz	r4, 800310e <_strtod_l+0x17e>
 8003104:	b910      	cbnz	r0, 800310c <_strtod_l+0x17c>
 8003106:	9b07      	ldr	r3, [sp, #28]
 8003108:	2b00      	cmp	r3, #0
 800310a:	d09e      	beq.n	800304a <_strtod_l+0xba>
 800310c:	2400      	movs	r4, #0
 800310e:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 8003110:	1c73      	adds	r3, r6, #1
 8003112:	931b      	str	r3, [sp, #108]	; 0x6c
 8003114:	7873      	ldrb	r3, [r6, #1]
 8003116:	2b2b      	cmp	r3, #43	; 0x2b
 8003118:	d078      	beq.n	800320c <_strtod_l+0x27c>
 800311a:	2b2d      	cmp	r3, #45	; 0x2d
 800311c:	d070      	beq.n	8003200 <_strtod_l+0x270>
 800311e:	f04f 0c00 	mov.w	ip, #0
 8003122:	f1a3 0730 	sub.w	r7, r3, #48	; 0x30
 8003126:	2f09      	cmp	r7, #9
 8003128:	d97c      	bls.n	8003224 <_strtod_l+0x294>
 800312a:	961b      	str	r6, [sp, #108]	; 0x6c
 800312c:	f04f 0e00 	mov.w	lr, #0
 8003130:	e09a      	b.n	8003268 <_strtod_l+0x2d8>
 8003132:	2300      	movs	r3, #0
 8003134:	e7c7      	b.n	80030c6 <_strtod_l+0x136>
 8003136:	9904      	ldr	r1, [sp, #16]
 8003138:	3001      	adds	r0, #1
 800313a:	2908      	cmp	r1, #8
 800313c:	bfd7      	itett	le
 800313e:	9906      	ldrle	r1, [sp, #24]
 8003140:	fb02 3505 	mlagt	r5, r2, r5, r3
 8003144:	fb02 3301 	mlale	r3, r2, r1, r3
 8003148:	9306      	strle	r3, [sp, #24]
 800314a:	9b04      	ldr	r3, [sp, #16]
 800314c:	901b      	str	r0, [sp, #108]	; 0x6c
 800314e:	3301      	adds	r3, #1
 8003150:	9304      	str	r3, [sp, #16]
 8003152:	e7bf      	b.n	80030d4 <_strtod_l+0x144>
 8003154:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8003156:	191a      	adds	r2, r3, r4
 8003158:	921b      	str	r2, [sp, #108]	; 0x6c
 800315a:	9a04      	ldr	r2, [sp, #16]
 800315c:	5d1b      	ldrb	r3, [r3, r4]
 800315e:	2a00      	cmp	r2, #0
 8003160:	d037      	beq.n	80031d2 <_strtod_l+0x242>
 8003162:	4602      	mov	r2, r0
 8003164:	9c04      	ldr	r4, [sp, #16]
 8003166:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 800316a:	2909      	cmp	r1, #9
 800316c:	d913      	bls.n	8003196 <_strtod_l+0x206>
 800316e:	2101      	movs	r1, #1
 8003170:	9105      	str	r1, [sp, #20]
 8003172:	e7c2      	b.n	80030fa <_strtod_l+0x16a>
 8003174:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8003176:	3001      	adds	r0, #1
 8003178:	1c5a      	adds	r2, r3, #1
 800317a:	921b      	str	r2, [sp, #108]	; 0x6c
 800317c:	785b      	ldrb	r3, [r3, #1]
 800317e:	2b30      	cmp	r3, #48	; 0x30
 8003180:	d0f8      	beq.n	8003174 <_strtod_l+0x1e4>
 8003182:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 8003186:	2a08      	cmp	r2, #8
 8003188:	f200 84f0 	bhi.w	8003b6c <_strtod_l+0xbdc>
 800318c:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800318e:	9208      	str	r2, [sp, #32]
 8003190:	4602      	mov	r2, r0
 8003192:	2000      	movs	r0, #0
 8003194:	4604      	mov	r4, r0
 8003196:	f1b3 0e30 	subs.w	lr, r3, #48	; 0x30
 800319a:	f100 0101 	add.w	r1, r0, #1
 800319e:	d012      	beq.n	80031c6 <_strtod_l+0x236>
 80031a0:	440a      	add	r2, r1
 80031a2:	270a      	movs	r7, #10
 80031a4:	4621      	mov	r1, r4
 80031a6:	eb00 0c04 	add.w	ip, r0, r4
 80031aa:	458c      	cmp	ip, r1
 80031ac:	d113      	bne.n	80031d6 <_strtod_l+0x246>
 80031ae:	1821      	adds	r1, r4, r0
 80031b0:	2908      	cmp	r1, #8
 80031b2:	f104 0401 	add.w	r4, r4, #1
 80031b6:	4404      	add	r4, r0
 80031b8:	dc19      	bgt.n	80031ee <_strtod_l+0x25e>
 80031ba:	210a      	movs	r1, #10
 80031bc:	9b06      	ldr	r3, [sp, #24]
 80031be:	fb01 e303 	mla	r3, r1, r3, lr
 80031c2:	9306      	str	r3, [sp, #24]
 80031c4:	2100      	movs	r1, #0
 80031c6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80031c8:	1c58      	adds	r0, r3, #1
 80031ca:	901b      	str	r0, [sp, #108]	; 0x6c
 80031cc:	785b      	ldrb	r3, [r3, #1]
 80031ce:	4608      	mov	r0, r1
 80031d0:	e7c9      	b.n	8003166 <_strtod_l+0x1d6>
 80031d2:	9804      	ldr	r0, [sp, #16]
 80031d4:	e7d3      	b.n	800317e <_strtod_l+0x1ee>
 80031d6:	2908      	cmp	r1, #8
 80031d8:	f101 0101 	add.w	r1, r1, #1
 80031dc:	dc03      	bgt.n	80031e6 <_strtod_l+0x256>
 80031de:	9b06      	ldr	r3, [sp, #24]
 80031e0:	437b      	muls	r3, r7
 80031e2:	9306      	str	r3, [sp, #24]
 80031e4:	e7e1      	b.n	80031aa <_strtod_l+0x21a>
 80031e6:	2910      	cmp	r1, #16
 80031e8:	bfd8      	it	le
 80031ea:	437d      	mulle	r5, r7
 80031ec:	e7dd      	b.n	80031aa <_strtod_l+0x21a>
 80031ee:	2c10      	cmp	r4, #16
 80031f0:	bfdc      	itt	le
 80031f2:	210a      	movle	r1, #10
 80031f4:	fb01 e505 	mlale	r5, r1, r5, lr
 80031f8:	e7e4      	b.n	80031c4 <_strtod_l+0x234>
 80031fa:	2301      	movs	r3, #1
 80031fc:	9305      	str	r3, [sp, #20]
 80031fe:	e781      	b.n	8003104 <_strtod_l+0x174>
 8003200:	f04f 0c01 	mov.w	ip, #1
 8003204:	1cb3      	adds	r3, r6, #2
 8003206:	931b      	str	r3, [sp, #108]	; 0x6c
 8003208:	78b3      	ldrb	r3, [r6, #2]
 800320a:	e78a      	b.n	8003122 <_strtod_l+0x192>
 800320c:	f04f 0c00 	mov.w	ip, #0
 8003210:	e7f8      	b.n	8003204 <_strtod_l+0x274>
 8003212:	bf00      	nop
 8003214:	08006454 	.word	0x08006454
 8003218:	7ff00000 	.word	0x7ff00000
 800321c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800321e:	1c5f      	adds	r7, r3, #1
 8003220:	971b      	str	r7, [sp, #108]	; 0x6c
 8003222:	785b      	ldrb	r3, [r3, #1]
 8003224:	2b30      	cmp	r3, #48	; 0x30
 8003226:	d0f9      	beq.n	800321c <_strtod_l+0x28c>
 8003228:	f1a3 0731 	sub.w	r7, r3, #49	; 0x31
 800322c:	2f08      	cmp	r7, #8
 800322e:	f63f af7d 	bhi.w	800312c <_strtod_l+0x19c>
 8003232:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 8003236:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8003238:	9309      	str	r3, [sp, #36]	; 0x24
 800323a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800323c:	1c5f      	adds	r7, r3, #1
 800323e:	971b      	str	r7, [sp, #108]	; 0x6c
 8003240:	785b      	ldrb	r3, [r3, #1]
 8003242:	f1a3 0830 	sub.w	r8, r3, #48	; 0x30
 8003246:	f1b8 0f09 	cmp.w	r8, #9
 800324a:	d937      	bls.n	80032bc <_strtod_l+0x32c>
 800324c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800324e:	1a7f      	subs	r7, r7, r1
 8003250:	2f08      	cmp	r7, #8
 8003252:	f644 671f 	movw	r7, #19999	; 0x4e1f
 8003256:	dc37      	bgt.n	80032c8 <_strtod_l+0x338>
 8003258:	45be      	cmp	lr, r7
 800325a:	bfa8      	it	ge
 800325c:	46be      	movge	lr, r7
 800325e:	f1bc 0f00 	cmp.w	ip, #0
 8003262:	d001      	beq.n	8003268 <_strtod_l+0x2d8>
 8003264:	f1ce 0e00 	rsb	lr, lr, #0
 8003268:	2c00      	cmp	r4, #0
 800326a:	d151      	bne.n	8003310 <_strtod_l+0x380>
 800326c:	2800      	cmp	r0, #0
 800326e:	f47f aece 	bne.w	800300e <_strtod_l+0x7e>
 8003272:	9a07      	ldr	r2, [sp, #28]
 8003274:	2a00      	cmp	r2, #0
 8003276:	f47f aeca 	bne.w	800300e <_strtod_l+0x7e>
 800327a:	9a05      	ldr	r2, [sp, #20]
 800327c:	2a00      	cmp	r2, #0
 800327e:	f47f aee4 	bne.w	800304a <_strtod_l+0xba>
 8003282:	2b4e      	cmp	r3, #78	; 0x4e
 8003284:	d027      	beq.n	80032d6 <_strtod_l+0x346>
 8003286:	dc21      	bgt.n	80032cc <_strtod_l+0x33c>
 8003288:	2b49      	cmp	r3, #73	; 0x49
 800328a:	f47f aede 	bne.w	800304a <_strtod_l+0xba>
 800328e:	49a4      	ldr	r1, [pc, #656]	; (8003520 <_strtod_l+0x590>)
 8003290:	a81b      	add	r0, sp, #108	; 0x6c
 8003292:	f002 f81b 	bl	80052cc <__match>
 8003296:	2800      	cmp	r0, #0
 8003298:	f43f aed7 	beq.w	800304a <_strtod_l+0xba>
 800329c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800329e:	49a1      	ldr	r1, [pc, #644]	; (8003524 <_strtod_l+0x594>)
 80032a0:	3b01      	subs	r3, #1
 80032a2:	a81b      	add	r0, sp, #108	; 0x6c
 80032a4:	931b      	str	r3, [sp, #108]	; 0x6c
 80032a6:	f002 f811 	bl	80052cc <__match>
 80032aa:	b910      	cbnz	r0, 80032b2 <_strtod_l+0x322>
 80032ac:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80032ae:	3301      	adds	r3, #1
 80032b0:	931b      	str	r3, [sp, #108]	; 0x6c
 80032b2:	f8df a284 	ldr.w	sl, [pc, #644]	; 8003538 <_strtod_l+0x5a8>
 80032b6:	f04f 0900 	mov.w	r9, #0
 80032ba:	e6a8      	b.n	800300e <_strtod_l+0x7e>
 80032bc:	210a      	movs	r1, #10
 80032be:	fb01 3e0e 	mla	lr, r1, lr, r3
 80032c2:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 80032c6:	e7b8      	b.n	800323a <_strtod_l+0x2aa>
 80032c8:	46be      	mov	lr, r7
 80032ca:	e7c8      	b.n	800325e <_strtod_l+0x2ce>
 80032cc:	2b69      	cmp	r3, #105	; 0x69
 80032ce:	d0de      	beq.n	800328e <_strtod_l+0x2fe>
 80032d0:	2b6e      	cmp	r3, #110	; 0x6e
 80032d2:	f47f aeba 	bne.w	800304a <_strtod_l+0xba>
 80032d6:	4994      	ldr	r1, [pc, #592]	; (8003528 <_strtod_l+0x598>)
 80032d8:	a81b      	add	r0, sp, #108	; 0x6c
 80032da:	f001 fff7 	bl	80052cc <__match>
 80032de:	2800      	cmp	r0, #0
 80032e0:	f43f aeb3 	beq.w	800304a <_strtod_l+0xba>
 80032e4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80032e6:	781b      	ldrb	r3, [r3, #0]
 80032e8:	2b28      	cmp	r3, #40	; 0x28
 80032ea:	d10e      	bne.n	800330a <_strtod_l+0x37a>
 80032ec:	aa1e      	add	r2, sp, #120	; 0x78
 80032ee:	498f      	ldr	r1, [pc, #572]	; (800352c <_strtod_l+0x59c>)
 80032f0:	a81b      	add	r0, sp, #108	; 0x6c
 80032f2:	f001 ffff 	bl	80052f4 <__hexnan>
 80032f6:	2805      	cmp	r0, #5
 80032f8:	d107      	bne.n	800330a <_strtod_l+0x37a>
 80032fa:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80032fc:	f8dd 9078 	ldr.w	r9, [sp, #120]	; 0x78
 8003300:	f043 4aff 	orr.w	sl, r3, #2139095040	; 0x7f800000
 8003304:	f44a 0ae0 	orr.w	sl, sl, #7340032	; 0x700000
 8003308:	e681      	b.n	800300e <_strtod_l+0x7e>
 800330a:	f8df a234 	ldr.w	sl, [pc, #564]	; 8003540 <_strtod_l+0x5b0>
 800330e:	e7d2      	b.n	80032b6 <_strtod_l+0x326>
 8003310:	ebae 0302 	sub.w	r3, lr, r2
 8003314:	9307      	str	r3, [sp, #28]
 8003316:	9b04      	ldr	r3, [sp, #16]
 8003318:	9806      	ldr	r0, [sp, #24]
 800331a:	2b00      	cmp	r3, #0
 800331c:	bf08      	it	eq
 800331e:	4623      	moveq	r3, r4
 8003320:	2c10      	cmp	r4, #16
 8003322:	9304      	str	r3, [sp, #16]
 8003324:	46a0      	mov	r8, r4
 8003326:	bfa8      	it	ge
 8003328:	f04f 0810 	movge.w	r8, #16
 800332c:	f7fd f85a 	bl	80003e4 <__aeabi_ui2d>
 8003330:	2c09      	cmp	r4, #9
 8003332:	4681      	mov	r9, r0
 8003334:	468a      	mov	sl, r1
 8003336:	dc13      	bgt.n	8003360 <_strtod_l+0x3d0>
 8003338:	9b07      	ldr	r3, [sp, #28]
 800333a:	2b00      	cmp	r3, #0
 800333c:	f43f ae67 	beq.w	800300e <_strtod_l+0x7e>
 8003340:	9b07      	ldr	r3, [sp, #28]
 8003342:	dd7e      	ble.n	8003442 <_strtod_l+0x4b2>
 8003344:	2b16      	cmp	r3, #22
 8003346:	dc65      	bgt.n	8003414 <_strtod_l+0x484>
 8003348:	4a79      	ldr	r2, [pc, #484]	; (8003530 <_strtod_l+0x5a0>)
 800334a:	eb02 0ec3 	add.w	lr, r2, r3, lsl #3
 800334e:	464a      	mov	r2, r9
 8003350:	e9de 0100 	ldrd	r0, r1, [lr]
 8003354:	4653      	mov	r3, sl
 8003356:	f7fd f8bf 	bl	80004d8 <__aeabi_dmul>
 800335a:	4681      	mov	r9, r0
 800335c:	468a      	mov	sl, r1
 800335e:	e656      	b.n	800300e <_strtod_l+0x7e>
 8003360:	4b73      	ldr	r3, [pc, #460]	; (8003530 <_strtod_l+0x5a0>)
 8003362:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8003366:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800336a:	f7fd f8b5 	bl	80004d8 <__aeabi_dmul>
 800336e:	4606      	mov	r6, r0
 8003370:	4628      	mov	r0, r5
 8003372:	460f      	mov	r7, r1
 8003374:	f7fd f836 	bl	80003e4 <__aeabi_ui2d>
 8003378:	4602      	mov	r2, r0
 800337a:	460b      	mov	r3, r1
 800337c:	4630      	mov	r0, r6
 800337e:	4639      	mov	r1, r7
 8003380:	f7fc fef4 	bl	800016c <__adddf3>
 8003384:	2c0f      	cmp	r4, #15
 8003386:	4681      	mov	r9, r0
 8003388:	468a      	mov	sl, r1
 800338a:	ddd5      	ble.n	8003338 <_strtod_l+0x3a8>
 800338c:	9b07      	ldr	r3, [sp, #28]
 800338e:	eba4 0808 	sub.w	r8, r4, r8
 8003392:	4498      	add	r8, r3
 8003394:	f1b8 0f00 	cmp.w	r8, #0
 8003398:	f340 809a 	ble.w	80034d0 <_strtod_l+0x540>
 800339c:	f018 030f 	ands.w	r3, r8, #15
 80033a0:	d00a      	beq.n	80033b8 <_strtod_l+0x428>
 80033a2:	4963      	ldr	r1, [pc, #396]	; (8003530 <_strtod_l+0x5a0>)
 80033a4:	464a      	mov	r2, r9
 80033a6:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80033aa:	e9d1 0100 	ldrd	r0, r1, [r1]
 80033ae:	4653      	mov	r3, sl
 80033b0:	f7fd f892 	bl	80004d8 <__aeabi_dmul>
 80033b4:	4681      	mov	r9, r0
 80033b6:	468a      	mov	sl, r1
 80033b8:	f038 080f 	bics.w	r8, r8, #15
 80033bc:	d077      	beq.n	80034ae <_strtod_l+0x51e>
 80033be:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 80033c2:	dd4b      	ble.n	800345c <_strtod_l+0x4cc>
 80033c4:	f04f 0800 	mov.w	r8, #0
 80033c8:	f8cd 8010 	str.w	r8, [sp, #16]
 80033cc:	f8cd 8020 	str.w	r8, [sp, #32]
 80033d0:	f8cd 8018 	str.w	r8, [sp, #24]
 80033d4:	2322      	movs	r3, #34	; 0x22
 80033d6:	f04f 0900 	mov.w	r9, #0
 80033da:	f8df a15c 	ldr.w	sl, [pc, #348]	; 8003538 <_strtod_l+0x5a8>
 80033de:	f8cb 3000 	str.w	r3, [fp]
 80033e2:	9b08      	ldr	r3, [sp, #32]
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	f43f ae12 	beq.w	800300e <_strtod_l+0x7e>
 80033ea:	991c      	ldr	r1, [sp, #112]	; 0x70
 80033ec:	4658      	mov	r0, fp
 80033ee:	f002 f8f0 	bl	80055d2 <_Bfree>
 80033f2:	9906      	ldr	r1, [sp, #24]
 80033f4:	4658      	mov	r0, fp
 80033f6:	f002 f8ec 	bl	80055d2 <_Bfree>
 80033fa:	9904      	ldr	r1, [sp, #16]
 80033fc:	4658      	mov	r0, fp
 80033fe:	f002 f8e8 	bl	80055d2 <_Bfree>
 8003402:	9908      	ldr	r1, [sp, #32]
 8003404:	4658      	mov	r0, fp
 8003406:	f002 f8e4 	bl	80055d2 <_Bfree>
 800340a:	4641      	mov	r1, r8
 800340c:	4658      	mov	r0, fp
 800340e:	f002 f8e0 	bl	80055d2 <_Bfree>
 8003412:	e5fc      	b.n	800300e <_strtod_l+0x7e>
 8003414:	9a07      	ldr	r2, [sp, #28]
 8003416:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 800341a:	4293      	cmp	r3, r2
 800341c:	dbb6      	blt.n	800338c <_strtod_l+0x3fc>
 800341e:	4d44      	ldr	r5, [pc, #272]	; (8003530 <_strtod_l+0x5a0>)
 8003420:	f1c4 040f 	rsb	r4, r4, #15
 8003424:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 8003428:	464a      	mov	r2, r9
 800342a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800342e:	4653      	mov	r3, sl
 8003430:	f7fd f852 	bl	80004d8 <__aeabi_dmul>
 8003434:	9b07      	ldr	r3, [sp, #28]
 8003436:	1b1c      	subs	r4, r3, r4
 8003438:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 800343c:	e9d5 2300 	ldrd	r2, r3, [r5]
 8003440:	e789      	b.n	8003356 <_strtod_l+0x3c6>
 8003442:	f113 0f16 	cmn.w	r3, #22
 8003446:	dba1      	blt.n	800338c <_strtod_l+0x3fc>
 8003448:	4a39      	ldr	r2, [pc, #228]	; (8003530 <_strtod_l+0x5a0>)
 800344a:	4648      	mov	r0, r9
 800344c:	eba2 02c3 	sub.w	r2, r2, r3, lsl #3
 8003450:	e9d2 2300 	ldrd	r2, r3, [r2]
 8003454:	4651      	mov	r1, sl
 8003456:	f7fd f969 	bl	800072c <__aeabi_ddiv>
 800345a:	e77e      	b.n	800335a <_strtod_l+0x3ca>
 800345c:	2300      	movs	r3, #0
 800345e:	4648      	mov	r0, r9
 8003460:	4651      	mov	r1, sl
 8003462:	461d      	mov	r5, r3
 8003464:	4e33      	ldr	r6, [pc, #204]	; (8003534 <_strtod_l+0x5a4>)
 8003466:	ea4f 1828 	mov.w	r8, r8, asr #4
 800346a:	f1b8 0f01 	cmp.w	r8, #1
 800346e:	dc21      	bgt.n	80034b4 <_strtod_l+0x524>
 8003470:	b10b      	cbz	r3, 8003476 <_strtod_l+0x4e6>
 8003472:	4681      	mov	r9, r0
 8003474:	468a      	mov	sl, r1
 8003476:	4b2f      	ldr	r3, [pc, #188]	; (8003534 <_strtod_l+0x5a4>)
 8003478:	f1aa 7a54 	sub.w	sl, sl, #55574528	; 0x3500000
 800347c:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8003480:	464a      	mov	r2, r9
 8003482:	e9d5 0100 	ldrd	r0, r1, [r5]
 8003486:	4653      	mov	r3, sl
 8003488:	f7fd f826 	bl	80004d8 <__aeabi_dmul>
 800348c:	4b2a      	ldr	r3, [pc, #168]	; (8003538 <_strtod_l+0x5a8>)
 800348e:	460a      	mov	r2, r1
 8003490:	400b      	ands	r3, r1
 8003492:	492a      	ldr	r1, [pc, #168]	; (800353c <_strtod_l+0x5ac>)
 8003494:	4681      	mov	r9, r0
 8003496:	428b      	cmp	r3, r1
 8003498:	d894      	bhi.n	80033c4 <_strtod_l+0x434>
 800349a:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800349e:	428b      	cmp	r3, r1
 80034a0:	bf86      	itte	hi
 80034a2:	f04f 39ff 	movhi.w	r9, #4294967295
 80034a6:	f8df a09c 	ldrhi.w	sl, [pc, #156]	; 8003544 <_strtod_l+0x5b4>
 80034aa:	f102 7a54 	addls.w	sl, r2, #55574528	; 0x3500000
 80034ae:	2300      	movs	r3, #0
 80034b0:	9305      	str	r3, [sp, #20]
 80034b2:	e07b      	b.n	80035ac <_strtod_l+0x61c>
 80034b4:	f018 0f01 	tst.w	r8, #1
 80034b8:	d006      	beq.n	80034c8 <_strtod_l+0x538>
 80034ba:	eb06 03c5 	add.w	r3, r6, r5, lsl #3
 80034be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034c2:	f7fd f809 	bl	80004d8 <__aeabi_dmul>
 80034c6:	2301      	movs	r3, #1
 80034c8:	3501      	adds	r5, #1
 80034ca:	ea4f 0868 	mov.w	r8, r8, asr #1
 80034ce:	e7cc      	b.n	800346a <_strtod_l+0x4da>
 80034d0:	d0ed      	beq.n	80034ae <_strtod_l+0x51e>
 80034d2:	f1c8 0800 	rsb	r8, r8, #0
 80034d6:	f018 020f 	ands.w	r2, r8, #15
 80034da:	d00a      	beq.n	80034f2 <_strtod_l+0x562>
 80034dc:	4b14      	ldr	r3, [pc, #80]	; (8003530 <_strtod_l+0x5a0>)
 80034de:	4648      	mov	r0, r9
 80034e0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80034e4:	4651      	mov	r1, sl
 80034e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034ea:	f7fd f91f 	bl	800072c <__aeabi_ddiv>
 80034ee:	4681      	mov	r9, r0
 80034f0:	468a      	mov	sl, r1
 80034f2:	ea5f 1828 	movs.w	r8, r8, asr #4
 80034f6:	d0da      	beq.n	80034ae <_strtod_l+0x51e>
 80034f8:	f1b8 0f1f 	cmp.w	r8, #31
 80034fc:	dd24      	ble.n	8003548 <_strtod_l+0x5b8>
 80034fe:	f04f 0800 	mov.w	r8, #0
 8003502:	f8cd 8010 	str.w	r8, [sp, #16]
 8003506:	f8cd 8020 	str.w	r8, [sp, #32]
 800350a:	f8cd 8018 	str.w	r8, [sp, #24]
 800350e:	2322      	movs	r3, #34	; 0x22
 8003510:	f04f 0900 	mov.w	r9, #0
 8003514:	f04f 0a00 	mov.w	sl, #0
 8003518:	f8cb 3000 	str.w	r3, [fp]
 800351c:	e761      	b.n	80033e2 <_strtod_l+0x452>
 800351e:	bf00      	nop
 8003520:	0800641d 	.word	0x0800641d
 8003524:	080064ab 	.word	0x080064ab
 8003528:	08006425 	.word	0x08006425
 800352c:	08006468 	.word	0x08006468
 8003530:	08006550 	.word	0x08006550
 8003534:	08006528 	.word	0x08006528
 8003538:	7ff00000 	.word	0x7ff00000
 800353c:	7ca00000 	.word	0x7ca00000
 8003540:	fff80000 	.word	0xfff80000
 8003544:	7fefffff 	.word	0x7fefffff
 8003548:	f018 0310 	ands.w	r3, r8, #16
 800354c:	bf18      	it	ne
 800354e:	236a      	movne	r3, #106	; 0x6a
 8003550:	4648      	mov	r0, r9
 8003552:	9305      	str	r3, [sp, #20]
 8003554:	4651      	mov	r1, sl
 8003556:	2300      	movs	r3, #0
 8003558:	4da1      	ldr	r5, [pc, #644]	; (80037e0 <_strtod_l+0x850>)
 800355a:	f1b8 0f00 	cmp.w	r8, #0
 800355e:	f300 8113 	bgt.w	8003788 <_strtod_l+0x7f8>
 8003562:	b10b      	cbz	r3, 8003568 <_strtod_l+0x5d8>
 8003564:	4681      	mov	r9, r0
 8003566:	468a      	mov	sl, r1
 8003568:	9b05      	ldr	r3, [sp, #20]
 800356a:	b1bb      	cbz	r3, 800359c <_strtod_l+0x60c>
 800356c:	f3ca 530a 	ubfx	r3, sl, #20, #11
 8003570:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8003574:	2b00      	cmp	r3, #0
 8003576:	4651      	mov	r1, sl
 8003578:	dd10      	ble.n	800359c <_strtod_l+0x60c>
 800357a:	2b1f      	cmp	r3, #31
 800357c:	f340 8110 	ble.w	80037a0 <_strtod_l+0x810>
 8003580:	2b34      	cmp	r3, #52	; 0x34
 8003582:	bfd8      	it	le
 8003584:	f04f 32ff 	movle.w	r2, #4294967295
 8003588:	f04f 0900 	mov.w	r9, #0
 800358c:	bfcf      	iteee	gt
 800358e:	f04f 7a5c 	movgt.w	sl, #57671680	; 0x3700000
 8003592:	3b20      	suble	r3, #32
 8003594:	fa02 f303 	lslle.w	r3, r2, r3
 8003598:	ea03 0a01 	andle.w	sl, r3, r1
 800359c:	2200      	movs	r2, #0
 800359e:	2300      	movs	r3, #0
 80035a0:	4648      	mov	r0, r9
 80035a2:	4651      	mov	r1, sl
 80035a4:	f7fd fa00 	bl	80009a8 <__aeabi_dcmpeq>
 80035a8:	2800      	cmp	r0, #0
 80035aa:	d1a8      	bne.n	80034fe <_strtod_l+0x56e>
 80035ac:	9b06      	ldr	r3, [sp, #24]
 80035ae:	9a04      	ldr	r2, [sp, #16]
 80035b0:	9300      	str	r3, [sp, #0]
 80035b2:	9908      	ldr	r1, [sp, #32]
 80035b4:	4623      	mov	r3, r4
 80035b6:	4658      	mov	r0, fp
 80035b8:	f002 f85d 	bl	8005676 <__s2b>
 80035bc:	9008      	str	r0, [sp, #32]
 80035be:	2800      	cmp	r0, #0
 80035c0:	f43f af00 	beq.w	80033c4 <_strtod_l+0x434>
 80035c4:	9a07      	ldr	r2, [sp, #28]
 80035c6:	9b07      	ldr	r3, [sp, #28]
 80035c8:	2a00      	cmp	r2, #0
 80035ca:	f1c3 0300 	rsb	r3, r3, #0
 80035ce:	bfa8      	it	ge
 80035d0:	2300      	movge	r3, #0
 80035d2:	f04f 0800 	mov.w	r8, #0
 80035d6:	930e      	str	r3, [sp, #56]	; 0x38
 80035d8:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 80035dc:	9316      	str	r3, [sp, #88]	; 0x58
 80035de:	f8cd 8010 	str.w	r8, [sp, #16]
 80035e2:	9b08      	ldr	r3, [sp, #32]
 80035e4:	4658      	mov	r0, fp
 80035e6:	6859      	ldr	r1, [r3, #4]
 80035e8:	f001 ffbf 	bl	800556a <_Balloc>
 80035ec:	9006      	str	r0, [sp, #24]
 80035ee:	2800      	cmp	r0, #0
 80035f0:	f43f aef0 	beq.w	80033d4 <_strtod_l+0x444>
 80035f4:	9b08      	ldr	r3, [sp, #32]
 80035f6:	300c      	adds	r0, #12
 80035f8:	691a      	ldr	r2, [r3, #16]
 80035fa:	f103 010c 	add.w	r1, r3, #12
 80035fe:	3202      	adds	r2, #2
 8003600:	0092      	lsls	r2, r2, #2
 8003602:	f001 ffa7 	bl	8005554 <memcpy>
 8003606:	ab1e      	add	r3, sp, #120	; 0x78
 8003608:	9301      	str	r3, [sp, #4]
 800360a:	ab1d      	add	r3, sp, #116	; 0x74
 800360c:	9300      	str	r3, [sp, #0]
 800360e:	464a      	mov	r2, r9
 8003610:	4653      	mov	r3, sl
 8003612:	4658      	mov	r0, fp
 8003614:	e9cd 9a0a 	strd	r9, sl, [sp, #40]	; 0x28
 8003618:	f002 fae8 	bl	8005bec <__d2b>
 800361c:	901c      	str	r0, [sp, #112]	; 0x70
 800361e:	2800      	cmp	r0, #0
 8003620:	f43f aed8 	beq.w	80033d4 <_strtod_l+0x444>
 8003624:	2101      	movs	r1, #1
 8003626:	4658      	mov	r0, fp
 8003628:	f002 f8b1 	bl	800578e <__i2b>
 800362c:	9004      	str	r0, [sp, #16]
 800362e:	4603      	mov	r3, r0
 8003630:	2800      	cmp	r0, #0
 8003632:	f43f aecf 	beq.w	80033d4 <_strtod_l+0x444>
 8003636:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 8003638:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800363a:	2d00      	cmp	r5, #0
 800363c:	bfab      	itete	ge
 800363e:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 8003640:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 8003642:	18ee      	addge	r6, r5, r3
 8003644:	1b5c      	sublt	r4, r3, r5
 8003646:	9b05      	ldr	r3, [sp, #20]
 8003648:	bfa8      	it	ge
 800364a:	9c16      	ldrge	r4, [sp, #88]	; 0x58
 800364c:	eba5 0503 	sub.w	r5, r5, r3
 8003650:	4415      	add	r5, r2
 8003652:	4b64      	ldr	r3, [pc, #400]	; (80037e4 <_strtod_l+0x854>)
 8003654:	f105 35ff 	add.w	r5, r5, #4294967295
 8003658:	bfb8      	it	lt
 800365a:	9e0e      	ldrlt	r6, [sp, #56]	; 0x38
 800365c:	429d      	cmp	r5, r3
 800365e:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8003662:	f280 80af 	bge.w	80037c4 <_strtod_l+0x834>
 8003666:	1b5b      	subs	r3, r3, r5
 8003668:	2b1f      	cmp	r3, #31
 800366a:	eba2 0203 	sub.w	r2, r2, r3
 800366e:	f04f 0701 	mov.w	r7, #1
 8003672:	f300 809c 	bgt.w	80037ae <_strtod_l+0x81e>
 8003676:	2500      	movs	r5, #0
 8003678:	fa07 f303 	lsl.w	r3, r7, r3
 800367c:	930f      	str	r3, [sp, #60]	; 0x3c
 800367e:	18b7      	adds	r7, r6, r2
 8003680:	9b05      	ldr	r3, [sp, #20]
 8003682:	42be      	cmp	r6, r7
 8003684:	4414      	add	r4, r2
 8003686:	441c      	add	r4, r3
 8003688:	4633      	mov	r3, r6
 800368a:	bfa8      	it	ge
 800368c:	463b      	movge	r3, r7
 800368e:	42a3      	cmp	r3, r4
 8003690:	bfa8      	it	ge
 8003692:	4623      	movge	r3, r4
 8003694:	2b00      	cmp	r3, #0
 8003696:	bfc2      	ittt	gt
 8003698:	1aff      	subgt	r7, r7, r3
 800369a:	1ae4      	subgt	r4, r4, r3
 800369c:	1af6      	subgt	r6, r6, r3
 800369e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80036a0:	b1bb      	cbz	r3, 80036d2 <_strtod_l+0x742>
 80036a2:	461a      	mov	r2, r3
 80036a4:	9904      	ldr	r1, [sp, #16]
 80036a6:	4658      	mov	r0, fp
 80036a8:	f002 f910 	bl	80058cc <__pow5mult>
 80036ac:	9004      	str	r0, [sp, #16]
 80036ae:	2800      	cmp	r0, #0
 80036b0:	f43f ae90 	beq.w	80033d4 <_strtod_l+0x444>
 80036b4:	4601      	mov	r1, r0
 80036b6:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80036b8:	4658      	mov	r0, fp
 80036ba:	f002 f871 	bl	80057a0 <__multiply>
 80036be:	9009      	str	r0, [sp, #36]	; 0x24
 80036c0:	2800      	cmp	r0, #0
 80036c2:	f43f ae87 	beq.w	80033d4 <_strtod_l+0x444>
 80036c6:	991c      	ldr	r1, [sp, #112]	; 0x70
 80036c8:	4658      	mov	r0, fp
 80036ca:	f001 ff82 	bl	80055d2 <_Bfree>
 80036ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80036d0:	931c      	str	r3, [sp, #112]	; 0x70
 80036d2:	2f00      	cmp	r7, #0
 80036d4:	dc7a      	bgt.n	80037cc <_strtod_l+0x83c>
 80036d6:	9b07      	ldr	r3, [sp, #28]
 80036d8:	2b00      	cmp	r3, #0
 80036da:	dd08      	ble.n	80036ee <_strtod_l+0x75e>
 80036dc:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80036de:	9906      	ldr	r1, [sp, #24]
 80036e0:	4658      	mov	r0, fp
 80036e2:	f002 f8f3 	bl	80058cc <__pow5mult>
 80036e6:	9006      	str	r0, [sp, #24]
 80036e8:	2800      	cmp	r0, #0
 80036ea:	f43f ae73 	beq.w	80033d4 <_strtod_l+0x444>
 80036ee:	2c00      	cmp	r4, #0
 80036f0:	dd08      	ble.n	8003704 <_strtod_l+0x774>
 80036f2:	4622      	mov	r2, r4
 80036f4:	9906      	ldr	r1, [sp, #24]
 80036f6:	4658      	mov	r0, fp
 80036f8:	f002 f936 	bl	8005968 <__lshift>
 80036fc:	9006      	str	r0, [sp, #24]
 80036fe:	2800      	cmp	r0, #0
 8003700:	f43f ae68 	beq.w	80033d4 <_strtod_l+0x444>
 8003704:	2e00      	cmp	r6, #0
 8003706:	dd08      	ble.n	800371a <_strtod_l+0x78a>
 8003708:	4632      	mov	r2, r6
 800370a:	9904      	ldr	r1, [sp, #16]
 800370c:	4658      	mov	r0, fp
 800370e:	f002 f92b 	bl	8005968 <__lshift>
 8003712:	9004      	str	r0, [sp, #16]
 8003714:	2800      	cmp	r0, #0
 8003716:	f43f ae5d 	beq.w	80033d4 <_strtod_l+0x444>
 800371a:	9a06      	ldr	r2, [sp, #24]
 800371c:	991c      	ldr	r1, [sp, #112]	; 0x70
 800371e:	4658      	mov	r0, fp
 8003720:	f002 f990 	bl	8005a44 <__mdiff>
 8003724:	4680      	mov	r8, r0
 8003726:	2800      	cmp	r0, #0
 8003728:	f43f ae54 	beq.w	80033d4 <_strtod_l+0x444>
 800372c:	2400      	movs	r4, #0
 800372e:	68c3      	ldr	r3, [r0, #12]
 8003730:	9904      	ldr	r1, [sp, #16]
 8003732:	60c4      	str	r4, [r0, #12]
 8003734:	930c      	str	r3, [sp, #48]	; 0x30
 8003736:	f002 f96b 	bl	8005a10 <__mcmp>
 800373a:	42a0      	cmp	r0, r4
 800373c:	da54      	bge.n	80037e8 <_strtod_l+0x858>
 800373e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8003740:	b9f3      	cbnz	r3, 8003780 <_strtod_l+0x7f0>
 8003742:	f1b9 0f00 	cmp.w	r9, #0
 8003746:	d11b      	bne.n	8003780 <_strtod_l+0x7f0>
 8003748:	f3ca 0313 	ubfx	r3, sl, #0, #20
 800374c:	b9c3      	cbnz	r3, 8003780 <_strtod_l+0x7f0>
 800374e:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 8003752:	0d1b      	lsrs	r3, r3, #20
 8003754:	051b      	lsls	r3, r3, #20
 8003756:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800375a:	d911      	bls.n	8003780 <_strtod_l+0x7f0>
 800375c:	f8d8 3014 	ldr.w	r3, [r8, #20]
 8003760:	b91b      	cbnz	r3, 800376a <_strtod_l+0x7da>
 8003762:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8003766:	2b01      	cmp	r3, #1
 8003768:	dd0a      	ble.n	8003780 <_strtod_l+0x7f0>
 800376a:	4641      	mov	r1, r8
 800376c:	2201      	movs	r2, #1
 800376e:	4658      	mov	r0, fp
 8003770:	f002 f8fa 	bl	8005968 <__lshift>
 8003774:	9904      	ldr	r1, [sp, #16]
 8003776:	4680      	mov	r8, r0
 8003778:	f002 f94a 	bl	8005a10 <__mcmp>
 800377c:	2800      	cmp	r0, #0
 800377e:	dc68      	bgt.n	8003852 <_strtod_l+0x8c2>
 8003780:	9b05      	ldr	r3, [sp, #20]
 8003782:	2b00      	cmp	r3, #0
 8003784:	d172      	bne.n	800386c <_strtod_l+0x8dc>
 8003786:	e630      	b.n	80033ea <_strtod_l+0x45a>
 8003788:	f018 0f01 	tst.w	r8, #1
 800378c:	d004      	beq.n	8003798 <_strtod_l+0x808>
 800378e:	e9d5 2300 	ldrd	r2, r3, [r5]
 8003792:	f7fc fea1 	bl	80004d8 <__aeabi_dmul>
 8003796:	2301      	movs	r3, #1
 8003798:	ea4f 0868 	mov.w	r8, r8, asr #1
 800379c:	3508      	adds	r5, #8
 800379e:	e6dc      	b.n	800355a <_strtod_l+0x5ca>
 80037a0:	f04f 32ff 	mov.w	r2, #4294967295
 80037a4:	fa02 f303 	lsl.w	r3, r2, r3
 80037a8:	ea03 0909 	and.w	r9, r3, r9
 80037ac:	e6f6      	b.n	800359c <_strtod_l+0x60c>
 80037ae:	f1c5 457f 	rsb	r5, r5, #4278190080	; 0xff000000
 80037b2:	f505 057f 	add.w	r5, r5, #16711680	; 0xff0000
 80037b6:	f505 457b 	add.w	r5, r5, #64256	; 0xfb00
 80037ba:	35e2      	adds	r5, #226	; 0xe2
 80037bc:	fa07 f505 	lsl.w	r5, r7, r5
 80037c0:	970f      	str	r7, [sp, #60]	; 0x3c
 80037c2:	e75c      	b.n	800367e <_strtod_l+0x6ee>
 80037c4:	2301      	movs	r3, #1
 80037c6:	2500      	movs	r5, #0
 80037c8:	930f      	str	r3, [sp, #60]	; 0x3c
 80037ca:	e758      	b.n	800367e <_strtod_l+0x6ee>
 80037cc:	463a      	mov	r2, r7
 80037ce:	991c      	ldr	r1, [sp, #112]	; 0x70
 80037d0:	4658      	mov	r0, fp
 80037d2:	f002 f8c9 	bl	8005968 <__lshift>
 80037d6:	901c      	str	r0, [sp, #112]	; 0x70
 80037d8:	2800      	cmp	r0, #0
 80037da:	f47f af7c 	bne.w	80036d6 <_strtod_l+0x746>
 80037de:	e5f9      	b.n	80033d4 <_strtod_l+0x444>
 80037e0:	08006480 	.word	0x08006480
 80037e4:	fffffc02 	.word	0xfffffc02
 80037e8:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 80037ec:	f040 8089 	bne.w	8003902 <_strtod_l+0x972>
 80037f0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80037f2:	f3ca 0313 	ubfx	r3, sl, #0, #20
 80037f6:	b342      	cbz	r2, 800384a <_strtod_l+0x8ba>
 80037f8:	4aaf      	ldr	r2, [pc, #700]	; (8003ab8 <_strtod_l+0xb28>)
 80037fa:	4293      	cmp	r3, r2
 80037fc:	d156      	bne.n	80038ac <_strtod_l+0x91c>
 80037fe:	9b05      	ldr	r3, [sp, #20]
 8003800:	4648      	mov	r0, r9
 8003802:	b1eb      	cbz	r3, 8003840 <_strtod_l+0x8b0>
 8003804:	4653      	mov	r3, sl
 8003806:	4aad      	ldr	r2, [pc, #692]	; (8003abc <_strtod_l+0xb2c>)
 8003808:	f04f 31ff 	mov.w	r1, #4294967295
 800380c:	401a      	ands	r2, r3
 800380e:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 8003812:	d818      	bhi.n	8003846 <_strtod_l+0x8b6>
 8003814:	0d12      	lsrs	r2, r2, #20
 8003816:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800381a:	fa01 f303 	lsl.w	r3, r1, r3
 800381e:	4298      	cmp	r0, r3
 8003820:	d144      	bne.n	80038ac <_strtod_l+0x91c>
 8003822:	4ba7      	ldr	r3, [pc, #668]	; (8003ac0 <_strtod_l+0xb30>)
 8003824:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003826:	429a      	cmp	r2, r3
 8003828:	d102      	bne.n	8003830 <_strtod_l+0x8a0>
 800382a:	3001      	adds	r0, #1
 800382c:	f43f add2 	beq.w	80033d4 <_strtod_l+0x444>
 8003830:	4ba2      	ldr	r3, [pc, #648]	; (8003abc <_strtod_l+0xb2c>)
 8003832:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003834:	f04f 0900 	mov.w	r9, #0
 8003838:	401a      	ands	r2, r3
 800383a:	f502 1a80 	add.w	sl, r2, #1048576	; 0x100000
 800383e:	e79f      	b.n	8003780 <_strtod_l+0x7f0>
 8003840:	f04f 33ff 	mov.w	r3, #4294967295
 8003844:	e7eb      	b.n	800381e <_strtod_l+0x88e>
 8003846:	460b      	mov	r3, r1
 8003848:	e7e9      	b.n	800381e <_strtod_l+0x88e>
 800384a:	bb7b      	cbnz	r3, 80038ac <_strtod_l+0x91c>
 800384c:	f1b9 0f00 	cmp.w	r9, #0
 8003850:	d12c      	bne.n	80038ac <_strtod_l+0x91c>
 8003852:	9905      	ldr	r1, [sp, #20]
 8003854:	4653      	mov	r3, sl
 8003856:	4a99      	ldr	r2, [pc, #612]	; (8003abc <_strtod_l+0xb2c>)
 8003858:	b1f1      	cbz	r1, 8003898 <_strtod_l+0x908>
 800385a:	ea02 010a 	and.w	r1, r2, sl
 800385e:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8003862:	dc19      	bgt.n	8003898 <_strtod_l+0x908>
 8003864:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8003868:	f77f ae51 	ble.w	800350e <_strtod_l+0x57e>
 800386c:	2300      	movs	r3, #0
 800386e:	4a95      	ldr	r2, [pc, #596]	; (8003ac4 <_strtod_l+0xb34>)
 8003870:	4648      	mov	r0, r9
 8003872:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 8003876:	4651      	mov	r1, sl
 8003878:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800387c:	f7fc fe2c 	bl	80004d8 <__aeabi_dmul>
 8003880:	4681      	mov	r9, r0
 8003882:	468a      	mov	sl, r1
 8003884:	2900      	cmp	r1, #0
 8003886:	f47f adb0 	bne.w	80033ea <_strtod_l+0x45a>
 800388a:	2800      	cmp	r0, #0
 800388c:	f47f adad 	bne.w	80033ea <_strtod_l+0x45a>
 8003890:	2322      	movs	r3, #34	; 0x22
 8003892:	f8cb 3000 	str.w	r3, [fp]
 8003896:	e5a8      	b.n	80033ea <_strtod_l+0x45a>
 8003898:	4013      	ands	r3, r2
 800389a:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800389e:	ea6f 5a13 	mvn.w	sl, r3, lsr #20
 80038a2:	f04f 39ff 	mov.w	r9, #4294967295
 80038a6:	ea6f 5a0a 	mvn.w	sl, sl, lsl #20
 80038aa:	e769      	b.n	8003780 <_strtod_l+0x7f0>
 80038ac:	b19d      	cbz	r5, 80038d6 <_strtod_l+0x946>
 80038ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80038b0:	421d      	tst	r5, r3
 80038b2:	f43f af65 	beq.w	8003780 <_strtod_l+0x7f0>
 80038b6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80038b8:	9a05      	ldr	r2, [sp, #20]
 80038ba:	4648      	mov	r0, r9
 80038bc:	4651      	mov	r1, sl
 80038be:	b173      	cbz	r3, 80038de <_strtod_l+0x94e>
 80038c0:	f7ff fb44 	bl	8002f4c <sulp>
 80038c4:	4602      	mov	r2, r0
 80038c6:	460b      	mov	r3, r1
 80038c8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80038cc:	f7fc fc4e 	bl	800016c <__adddf3>
 80038d0:	4681      	mov	r9, r0
 80038d2:	468a      	mov	sl, r1
 80038d4:	e754      	b.n	8003780 <_strtod_l+0x7f0>
 80038d6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80038d8:	ea13 0f09 	tst.w	r3, r9
 80038dc:	e7e9      	b.n	80038b2 <_strtod_l+0x922>
 80038de:	f7ff fb35 	bl	8002f4c <sulp>
 80038e2:	4602      	mov	r2, r0
 80038e4:	460b      	mov	r3, r1
 80038e6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80038ea:	f7fc fc3d 	bl	8000168 <__aeabi_dsub>
 80038ee:	2200      	movs	r2, #0
 80038f0:	2300      	movs	r3, #0
 80038f2:	4681      	mov	r9, r0
 80038f4:	468a      	mov	sl, r1
 80038f6:	f7fd f857 	bl	80009a8 <__aeabi_dcmpeq>
 80038fa:	2800      	cmp	r0, #0
 80038fc:	f47f ae07 	bne.w	800350e <_strtod_l+0x57e>
 8003900:	e73e      	b.n	8003780 <_strtod_l+0x7f0>
 8003902:	9904      	ldr	r1, [sp, #16]
 8003904:	4640      	mov	r0, r8
 8003906:	f002 f9c0 	bl	8005c8a <__ratio>
 800390a:	2200      	movs	r2, #0
 800390c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003910:	4606      	mov	r6, r0
 8003912:	460f      	mov	r7, r1
 8003914:	f7fd f85c 	bl	80009d0 <__aeabi_dcmple>
 8003918:	2800      	cmp	r0, #0
 800391a:	d075      	beq.n	8003a08 <_strtod_l+0xa78>
 800391c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800391e:	2b00      	cmp	r3, #0
 8003920:	d047      	beq.n	80039b2 <_strtod_l+0xa22>
 8003922:	2600      	movs	r6, #0
 8003924:	4f68      	ldr	r7, [pc, #416]	; (8003ac8 <_strtod_l+0xb38>)
 8003926:	4d68      	ldr	r5, [pc, #416]	; (8003ac8 <_strtod_l+0xb38>)
 8003928:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800392a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800392e:	0d1b      	lsrs	r3, r3, #20
 8003930:	051b      	lsls	r3, r3, #20
 8003932:	930f      	str	r3, [sp, #60]	; 0x3c
 8003934:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8003936:	4b65      	ldr	r3, [pc, #404]	; (8003acc <_strtod_l+0xb3c>)
 8003938:	429a      	cmp	r2, r3
 800393a:	f040 80cf 	bne.w	8003adc <_strtod_l+0xb4c>
 800393e:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8003942:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 8003946:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003948:	4648      	mov	r0, r9
 800394a:	f1a3 7a54 	sub.w	sl, r3, #55574528	; 0x3500000
 800394e:	4651      	mov	r1, sl
 8003950:	f002 f8d6 	bl	8005b00 <__ulp>
 8003954:	4602      	mov	r2, r0
 8003956:	460b      	mov	r3, r1
 8003958:	4630      	mov	r0, r6
 800395a:	4639      	mov	r1, r7
 800395c:	f7fc fdbc 	bl	80004d8 <__aeabi_dmul>
 8003960:	464a      	mov	r2, r9
 8003962:	4653      	mov	r3, sl
 8003964:	f7fc fc02 	bl	800016c <__adddf3>
 8003968:	460b      	mov	r3, r1
 800396a:	4954      	ldr	r1, [pc, #336]	; (8003abc <_strtod_l+0xb2c>)
 800396c:	4a58      	ldr	r2, [pc, #352]	; (8003ad0 <_strtod_l+0xb40>)
 800396e:	4019      	ands	r1, r3
 8003970:	4291      	cmp	r1, r2
 8003972:	4681      	mov	r9, r0
 8003974:	d95e      	bls.n	8003a34 <_strtod_l+0xaa4>
 8003976:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003978:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800397c:	4293      	cmp	r3, r2
 800397e:	d103      	bne.n	8003988 <_strtod_l+0x9f8>
 8003980:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003982:	3301      	adds	r3, #1
 8003984:	f43f ad26 	beq.w	80033d4 <_strtod_l+0x444>
 8003988:	f04f 39ff 	mov.w	r9, #4294967295
 800398c:	f8df a130 	ldr.w	sl, [pc, #304]	; 8003ac0 <_strtod_l+0xb30>
 8003990:	991c      	ldr	r1, [sp, #112]	; 0x70
 8003992:	4658      	mov	r0, fp
 8003994:	f001 fe1d 	bl	80055d2 <_Bfree>
 8003998:	9906      	ldr	r1, [sp, #24]
 800399a:	4658      	mov	r0, fp
 800399c:	f001 fe19 	bl	80055d2 <_Bfree>
 80039a0:	9904      	ldr	r1, [sp, #16]
 80039a2:	4658      	mov	r0, fp
 80039a4:	f001 fe15 	bl	80055d2 <_Bfree>
 80039a8:	4641      	mov	r1, r8
 80039aa:	4658      	mov	r0, fp
 80039ac:	f001 fe11 	bl	80055d2 <_Bfree>
 80039b0:	e617      	b.n	80035e2 <_strtod_l+0x652>
 80039b2:	f1b9 0f00 	cmp.w	r9, #0
 80039b6:	d119      	bne.n	80039ec <_strtod_l+0xa5c>
 80039b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80039ba:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80039be:	b9e3      	cbnz	r3, 80039fa <_strtod_l+0xa6a>
 80039c0:	2200      	movs	r2, #0
 80039c2:	4b41      	ldr	r3, [pc, #260]	; (8003ac8 <_strtod_l+0xb38>)
 80039c4:	4630      	mov	r0, r6
 80039c6:	4639      	mov	r1, r7
 80039c8:	f7fc fff8 	bl	80009bc <__aeabi_dcmplt>
 80039cc:	b9c8      	cbnz	r0, 8003a02 <_strtod_l+0xa72>
 80039ce:	2200      	movs	r2, #0
 80039d0:	4b40      	ldr	r3, [pc, #256]	; (8003ad4 <_strtod_l+0xb44>)
 80039d2:	4630      	mov	r0, r6
 80039d4:	4639      	mov	r1, r7
 80039d6:	f7fc fd7f 	bl	80004d8 <__aeabi_dmul>
 80039da:	4604      	mov	r4, r0
 80039dc:	460d      	mov	r5, r1
 80039de:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 80039e2:	9418      	str	r4, [sp, #96]	; 0x60
 80039e4:	9319      	str	r3, [sp, #100]	; 0x64
 80039e6:	e9dd 6718 	ldrd	r6, r7, [sp, #96]	; 0x60
 80039ea:	e79d      	b.n	8003928 <_strtod_l+0x998>
 80039ec:	f1b9 0f01 	cmp.w	r9, #1
 80039f0:	d103      	bne.n	80039fa <_strtod_l+0xa6a>
 80039f2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	f43f ad8a 	beq.w	800350e <_strtod_l+0x57e>
 80039fa:	2600      	movs	r6, #0
 80039fc:	4f36      	ldr	r7, [pc, #216]	; (8003ad8 <_strtod_l+0xb48>)
 80039fe:	2400      	movs	r4, #0
 8003a00:	e791      	b.n	8003926 <_strtod_l+0x996>
 8003a02:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8003a04:	4d33      	ldr	r5, [pc, #204]	; (8003ad4 <_strtod_l+0xb44>)
 8003a06:	e7ea      	b.n	80039de <_strtod_l+0xa4e>
 8003a08:	4b32      	ldr	r3, [pc, #200]	; (8003ad4 <_strtod_l+0xb44>)
 8003a0a:	2200      	movs	r2, #0
 8003a0c:	4630      	mov	r0, r6
 8003a0e:	4639      	mov	r1, r7
 8003a10:	f7fc fd62 	bl	80004d8 <__aeabi_dmul>
 8003a14:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8003a16:	4604      	mov	r4, r0
 8003a18:	460d      	mov	r5, r1
 8003a1a:	b933      	cbnz	r3, 8003a2a <_strtod_l+0xa9a>
 8003a1c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8003a20:	9010      	str	r0, [sp, #64]	; 0x40
 8003a22:	9311      	str	r3, [sp, #68]	; 0x44
 8003a24:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8003a28:	e77e      	b.n	8003928 <_strtod_l+0x998>
 8003a2a:	4602      	mov	r2, r0
 8003a2c:	460b      	mov	r3, r1
 8003a2e:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 8003a32:	e7f7      	b.n	8003a24 <_strtod_l+0xa94>
 8003a34:	f103 7a54 	add.w	sl, r3, #55574528	; 0x3500000
 8003a38:	9b05      	ldr	r3, [sp, #20]
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d1a8      	bne.n	8003990 <_strtod_l+0xa00>
 8003a3e:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 8003a42:	0d1b      	lsrs	r3, r3, #20
 8003a44:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8003a46:	051b      	lsls	r3, r3, #20
 8003a48:	429a      	cmp	r2, r3
 8003a4a:	4656      	mov	r6, sl
 8003a4c:	d1a0      	bne.n	8003990 <_strtod_l+0xa00>
 8003a4e:	4629      	mov	r1, r5
 8003a50:	4620      	mov	r0, r4
 8003a52:	f7fc fff1 	bl	8000a38 <__aeabi_d2iz>
 8003a56:	f7fc fcd5 	bl	8000404 <__aeabi_i2d>
 8003a5a:	460b      	mov	r3, r1
 8003a5c:	4602      	mov	r2, r0
 8003a5e:	4629      	mov	r1, r5
 8003a60:	4620      	mov	r0, r4
 8003a62:	f7fc fb81 	bl	8000168 <__aeabi_dsub>
 8003a66:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8003a68:	4604      	mov	r4, r0
 8003a6a:	460d      	mov	r5, r1
 8003a6c:	b933      	cbnz	r3, 8003a7c <_strtod_l+0xaec>
 8003a6e:	f1b9 0f00 	cmp.w	r9, #0
 8003a72:	d103      	bne.n	8003a7c <_strtod_l+0xaec>
 8003a74:	f3ca 0613 	ubfx	r6, sl, #0, #20
 8003a78:	2e00      	cmp	r6, #0
 8003a7a:	d06a      	beq.n	8003b52 <_strtod_l+0xbc2>
 8003a7c:	a30a      	add	r3, pc, #40	; (adr r3, 8003aa8 <_strtod_l+0xb18>)
 8003a7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a82:	4620      	mov	r0, r4
 8003a84:	4629      	mov	r1, r5
 8003a86:	f7fc ff99 	bl	80009bc <__aeabi_dcmplt>
 8003a8a:	2800      	cmp	r0, #0
 8003a8c:	f47f acad 	bne.w	80033ea <_strtod_l+0x45a>
 8003a90:	a307      	add	r3, pc, #28	; (adr r3, 8003ab0 <_strtod_l+0xb20>)
 8003a92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a96:	4620      	mov	r0, r4
 8003a98:	4629      	mov	r1, r5
 8003a9a:	f7fc ffad 	bl	80009f8 <__aeabi_dcmpgt>
 8003a9e:	2800      	cmp	r0, #0
 8003aa0:	f43f af76 	beq.w	8003990 <_strtod_l+0xa00>
 8003aa4:	e4a1      	b.n	80033ea <_strtod_l+0x45a>
 8003aa6:	bf00      	nop
 8003aa8:	94a03595 	.word	0x94a03595
 8003aac:	3fdfffff 	.word	0x3fdfffff
 8003ab0:	35afe535 	.word	0x35afe535
 8003ab4:	3fe00000 	.word	0x3fe00000
 8003ab8:	000fffff 	.word	0x000fffff
 8003abc:	7ff00000 	.word	0x7ff00000
 8003ac0:	7fefffff 	.word	0x7fefffff
 8003ac4:	39500000 	.word	0x39500000
 8003ac8:	3ff00000 	.word	0x3ff00000
 8003acc:	7fe00000 	.word	0x7fe00000
 8003ad0:	7c9fffff 	.word	0x7c9fffff
 8003ad4:	3fe00000 	.word	0x3fe00000
 8003ad8:	bff00000 	.word	0xbff00000
 8003adc:	9b05      	ldr	r3, [sp, #20]
 8003ade:	b313      	cbz	r3, 8003b26 <_strtod_l+0xb96>
 8003ae0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8003ae2:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8003ae6:	d81e      	bhi.n	8003b26 <_strtod_l+0xb96>
 8003ae8:	a325      	add	r3, pc, #148	; (adr r3, 8003b80 <_strtod_l+0xbf0>)
 8003aea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003aee:	4620      	mov	r0, r4
 8003af0:	4629      	mov	r1, r5
 8003af2:	f7fc ff6d 	bl	80009d0 <__aeabi_dcmple>
 8003af6:	b190      	cbz	r0, 8003b1e <_strtod_l+0xb8e>
 8003af8:	4629      	mov	r1, r5
 8003afa:	4620      	mov	r0, r4
 8003afc:	f7fc ffc4 	bl	8000a88 <__aeabi_d2uiz>
 8003b00:	2800      	cmp	r0, #0
 8003b02:	bf08      	it	eq
 8003b04:	2001      	moveq	r0, #1
 8003b06:	f7fc fc6d 	bl	80003e4 <__aeabi_ui2d>
 8003b0a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8003b0c:	4604      	mov	r4, r0
 8003b0e:	460d      	mov	r5, r1
 8003b10:	b9d3      	cbnz	r3, 8003b48 <_strtod_l+0xbb8>
 8003b12:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8003b16:	9012      	str	r0, [sp, #72]	; 0x48
 8003b18:	9313      	str	r3, [sp, #76]	; 0x4c
 8003b1a:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
 8003b1e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8003b20:	f107 63d6 	add.w	r3, r7, #112197632	; 0x6b00000
 8003b24:	1a9f      	subs	r7, r3, r2
 8003b26:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8003b2a:	f001 ffe9 	bl	8005b00 <__ulp>
 8003b2e:	4602      	mov	r2, r0
 8003b30:	460b      	mov	r3, r1
 8003b32:	4630      	mov	r0, r6
 8003b34:	4639      	mov	r1, r7
 8003b36:	f7fc fccf 	bl	80004d8 <__aeabi_dmul>
 8003b3a:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8003b3e:	f7fc fb15 	bl	800016c <__adddf3>
 8003b42:	4681      	mov	r9, r0
 8003b44:	468a      	mov	sl, r1
 8003b46:	e777      	b.n	8003a38 <_strtod_l+0xaa8>
 8003b48:	4602      	mov	r2, r0
 8003b4a:	460b      	mov	r3, r1
 8003b4c:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
 8003b50:	e7e3      	b.n	8003b1a <_strtod_l+0xb8a>
 8003b52:	a30d      	add	r3, pc, #52	; (adr r3, 8003b88 <_strtod_l+0xbf8>)
 8003b54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b58:	f7fc ff30 	bl	80009bc <__aeabi_dcmplt>
 8003b5c:	e79f      	b.n	8003a9e <_strtod_l+0xb0e>
 8003b5e:	2300      	movs	r3, #0
 8003b60:	930d      	str	r3, [sp, #52]	; 0x34
 8003b62:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8003b64:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8003b66:	6013      	str	r3, [r2, #0]
 8003b68:	f7ff ba55 	b.w	8003016 <_strtod_l+0x86>
 8003b6c:	2b65      	cmp	r3, #101	; 0x65
 8003b6e:	f04f 0200 	mov.w	r2, #0
 8003b72:	f43f ab42 	beq.w	80031fa <_strtod_l+0x26a>
 8003b76:	2101      	movs	r1, #1
 8003b78:	4614      	mov	r4, r2
 8003b7a:	9105      	str	r1, [sp, #20]
 8003b7c:	f7ff babf 	b.w	80030fe <_strtod_l+0x16e>
 8003b80:	ffc00000 	.word	0xffc00000
 8003b84:	41dfffff 	.word	0x41dfffff
 8003b88:	94a03595 	.word	0x94a03595
 8003b8c:	3fcfffff 	.word	0x3fcfffff

08003b90 <_strtod_r>:
 8003b90:	4b05      	ldr	r3, [pc, #20]	; (8003ba8 <_strtod_r+0x18>)
 8003b92:	b410      	push	{r4}
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	4c05      	ldr	r4, [pc, #20]	; (8003bac <_strtod_r+0x1c>)
 8003b98:	6a1b      	ldr	r3, [r3, #32]
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	bf08      	it	eq
 8003b9e:	4623      	moveq	r3, r4
 8003ba0:	bc10      	pop	{r4}
 8003ba2:	f7ff b9f5 	b.w	8002f90 <_strtod_l>
 8003ba6:	bf00      	nop
 8003ba8:	2000000c 	.word	0x2000000c
 8003bac:	20000070 	.word	0x20000070

08003bb0 <_strtol_l.isra.0>:
 8003bb0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003bb4:	4680      	mov	r8, r0
 8003bb6:	4689      	mov	r9, r1
 8003bb8:	4692      	mov	sl, r2
 8003bba:	461e      	mov	r6, r3
 8003bbc:	460f      	mov	r7, r1
 8003bbe:	463d      	mov	r5, r7
 8003bc0:	9808      	ldr	r0, [sp, #32]
 8003bc2:	f815 4b01 	ldrb.w	r4, [r5], #1
 8003bc6:	f001 fc25 	bl	8005414 <__locale_ctype_ptr_l>
 8003bca:	4420      	add	r0, r4
 8003bcc:	7843      	ldrb	r3, [r0, #1]
 8003bce:	f013 0308 	ands.w	r3, r3, #8
 8003bd2:	d132      	bne.n	8003c3a <_strtol_l.isra.0+0x8a>
 8003bd4:	2c2d      	cmp	r4, #45	; 0x2d
 8003bd6:	d132      	bne.n	8003c3e <_strtol_l.isra.0+0x8e>
 8003bd8:	2201      	movs	r2, #1
 8003bda:	787c      	ldrb	r4, [r7, #1]
 8003bdc:	1cbd      	adds	r5, r7, #2
 8003bde:	2e00      	cmp	r6, #0
 8003be0:	d05d      	beq.n	8003c9e <_strtol_l.isra.0+0xee>
 8003be2:	2e10      	cmp	r6, #16
 8003be4:	d109      	bne.n	8003bfa <_strtol_l.isra.0+0x4a>
 8003be6:	2c30      	cmp	r4, #48	; 0x30
 8003be8:	d107      	bne.n	8003bfa <_strtol_l.isra.0+0x4a>
 8003bea:	782b      	ldrb	r3, [r5, #0]
 8003bec:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8003bf0:	2b58      	cmp	r3, #88	; 0x58
 8003bf2:	d14f      	bne.n	8003c94 <_strtol_l.isra.0+0xe4>
 8003bf4:	2610      	movs	r6, #16
 8003bf6:	786c      	ldrb	r4, [r5, #1]
 8003bf8:	3502      	adds	r5, #2
 8003bfa:	2a00      	cmp	r2, #0
 8003bfc:	bf14      	ite	ne
 8003bfe:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 8003c02:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 8003c06:	2700      	movs	r7, #0
 8003c08:	fbb1 fcf6 	udiv	ip, r1, r6
 8003c0c:	4638      	mov	r0, r7
 8003c0e:	fb06 1e1c 	mls	lr, r6, ip, r1
 8003c12:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 8003c16:	2b09      	cmp	r3, #9
 8003c18:	d817      	bhi.n	8003c4a <_strtol_l.isra.0+0x9a>
 8003c1a:	461c      	mov	r4, r3
 8003c1c:	42a6      	cmp	r6, r4
 8003c1e:	dd23      	ble.n	8003c68 <_strtol_l.isra.0+0xb8>
 8003c20:	1c7b      	adds	r3, r7, #1
 8003c22:	d007      	beq.n	8003c34 <_strtol_l.isra.0+0x84>
 8003c24:	4584      	cmp	ip, r0
 8003c26:	d31c      	bcc.n	8003c62 <_strtol_l.isra.0+0xb2>
 8003c28:	d101      	bne.n	8003c2e <_strtol_l.isra.0+0x7e>
 8003c2a:	45a6      	cmp	lr, r4
 8003c2c:	db19      	blt.n	8003c62 <_strtol_l.isra.0+0xb2>
 8003c2e:	2701      	movs	r7, #1
 8003c30:	fb00 4006 	mla	r0, r0, r6, r4
 8003c34:	f815 4b01 	ldrb.w	r4, [r5], #1
 8003c38:	e7eb      	b.n	8003c12 <_strtol_l.isra.0+0x62>
 8003c3a:	462f      	mov	r7, r5
 8003c3c:	e7bf      	b.n	8003bbe <_strtol_l.isra.0+0xe>
 8003c3e:	2c2b      	cmp	r4, #43	; 0x2b
 8003c40:	bf04      	itt	eq
 8003c42:	1cbd      	addeq	r5, r7, #2
 8003c44:	787c      	ldrbeq	r4, [r7, #1]
 8003c46:	461a      	mov	r2, r3
 8003c48:	e7c9      	b.n	8003bde <_strtol_l.isra.0+0x2e>
 8003c4a:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 8003c4e:	2b19      	cmp	r3, #25
 8003c50:	d801      	bhi.n	8003c56 <_strtol_l.isra.0+0xa6>
 8003c52:	3c37      	subs	r4, #55	; 0x37
 8003c54:	e7e2      	b.n	8003c1c <_strtol_l.isra.0+0x6c>
 8003c56:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 8003c5a:	2b19      	cmp	r3, #25
 8003c5c:	d804      	bhi.n	8003c68 <_strtol_l.isra.0+0xb8>
 8003c5e:	3c57      	subs	r4, #87	; 0x57
 8003c60:	e7dc      	b.n	8003c1c <_strtol_l.isra.0+0x6c>
 8003c62:	f04f 37ff 	mov.w	r7, #4294967295
 8003c66:	e7e5      	b.n	8003c34 <_strtol_l.isra.0+0x84>
 8003c68:	1c7b      	adds	r3, r7, #1
 8003c6a:	d108      	bne.n	8003c7e <_strtol_l.isra.0+0xce>
 8003c6c:	2322      	movs	r3, #34	; 0x22
 8003c6e:	4608      	mov	r0, r1
 8003c70:	f8c8 3000 	str.w	r3, [r8]
 8003c74:	f1ba 0f00 	cmp.w	sl, #0
 8003c78:	d107      	bne.n	8003c8a <_strtol_l.isra.0+0xda>
 8003c7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003c7e:	b102      	cbz	r2, 8003c82 <_strtol_l.isra.0+0xd2>
 8003c80:	4240      	negs	r0, r0
 8003c82:	f1ba 0f00 	cmp.w	sl, #0
 8003c86:	d0f8      	beq.n	8003c7a <_strtol_l.isra.0+0xca>
 8003c88:	b10f      	cbz	r7, 8003c8e <_strtol_l.isra.0+0xde>
 8003c8a:	f105 39ff 	add.w	r9, r5, #4294967295
 8003c8e:	f8ca 9000 	str.w	r9, [sl]
 8003c92:	e7f2      	b.n	8003c7a <_strtol_l.isra.0+0xca>
 8003c94:	2430      	movs	r4, #48	; 0x30
 8003c96:	2e00      	cmp	r6, #0
 8003c98:	d1af      	bne.n	8003bfa <_strtol_l.isra.0+0x4a>
 8003c9a:	2608      	movs	r6, #8
 8003c9c:	e7ad      	b.n	8003bfa <_strtol_l.isra.0+0x4a>
 8003c9e:	2c30      	cmp	r4, #48	; 0x30
 8003ca0:	d0a3      	beq.n	8003bea <_strtol_l.isra.0+0x3a>
 8003ca2:	260a      	movs	r6, #10
 8003ca4:	e7a9      	b.n	8003bfa <_strtol_l.isra.0+0x4a>
	...

08003ca8 <_strtol_r>:
 8003ca8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003caa:	4c06      	ldr	r4, [pc, #24]	; (8003cc4 <_strtol_r+0x1c>)
 8003cac:	4d06      	ldr	r5, [pc, #24]	; (8003cc8 <_strtol_r+0x20>)
 8003cae:	6824      	ldr	r4, [r4, #0]
 8003cb0:	6a24      	ldr	r4, [r4, #32]
 8003cb2:	2c00      	cmp	r4, #0
 8003cb4:	bf08      	it	eq
 8003cb6:	462c      	moveq	r4, r5
 8003cb8:	9400      	str	r4, [sp, #0]
 8003cba:	f7ff ff79 	bl	8003bb0 <_strtol_l.isra.0>
 8003cbe:	b003      	add	sp, #12
 8003cc0:	bd30      	pop	{r4, r5, pc}
 8003cc2:	bf00      	nop
 8003cc4:	2000000c 	.word	0x2000000c
 8003cc8:	20000070 	.word	0x20000070

08003ccc <__swbuf_r>:
 8003ccc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003cce:	460e      	mov	r6, r1
 8003cd0:	4614      	mov	r4, r2
 8003cd2:	4605      	mov	r5, r0
 8003cd4:	b118      	cbz	r0, 8003cde <__swbuf_r+0x12>
 8003cd6:	6983      	ldr	r3, [r0, #24]
 8003cd8:	b90b      	cbnz	r3, 8003cde <__swbuf_r+0x12>
 8003cda:	f000 ffe9 	bl	8004cb0 <__sinit>
 8003cde:	4b21      	ldr	r3, [pc, #132]	; (8003d64 <__swbuf_r+0x98>)
 8003ce0:	429c      	cmp	r4, r3
 8003ce2:	d12a      	bne.n	8003d3a <__swbuf_r+0x6e>
 8003ce4:	686c      	ldr	r4, [r5, #4]
 8003ce6:	69a3      	ldr	r3, [r4, #24]
 8003ce8:	60a3      	str	r3, [r4, #8]
 8003cea:	89a3      	ldrh	r3, [r4, #12]
 8003cec:	071a      	lsls	r2, r3, #28
 8003cee:	d52e      	bpl.n	8003d4e <__swbuf_r+0x82>
 8003cf0:	6923      	ldr	r3, [r4, #16]
 8003cf2:	b363      	cbz	r3, 8003d4e <__swbuf_r+0x82>
 8003cf4:	6923      	ldr	r3, [r4, #16]
 8003cf6:	6820      	ldr	r0, [r4, #0]
 8003cf8:	b2f6      	uxtb	r6, r6
 8003cfa:	1ac0      	subs	r0, r0, r3
 8003cfc:	6963      	ldr	r3, [r4, #20]
 8003cfe:	4637      	mov	r7, r6
 8003d00:	4283      	cmp	r3, r0
 8003d02:	dc04      	bgt.n	8003d0e <__swbuf_r+0x42>
 8003d04:	4621      	mov	r1, r4
 8003d06:	4628      	mov	r0, r5
 8003d08:	f000 ff68 	bl	8004bdc <_fflush_r>
 8003d0c:	bb28      	cbnz	r0, 8003d5a <__swbuf_r+0x8e>
 8003d0e:	68a3      	ldr	r3, [r4, #8]
 8003d10:	3001      	adds	r0, #1
 8003d12:	3b01      	subs	r3, #1
 8003d14:	60a3      	str	r3, [r4, #8]
 8003d16:	6823      	ldr	r3, [r4, #0]
 8003d18:	1c5a      	adds	r2, r3, #1
 8003d1a:	6022      	str	r2, [r4, #0]
 8003d1c:	701e      	strb	r6, [r3, #0]
 8003d1e:	6963      	ldr	r3, [r4, #20]
 8003d20:	4283      	cmp	r3, r0
 8003d22:	d004      	beq.n	8003d2e <__swbuf_r+0x62>
 8003d24:	89a3      	ldrh	r3, [r4, #12]
 8003d26:	07db      	lsls	r3, r3, #31
 8003d28:	d519      	bpl.n	8003d5e <__swbuf_r+0x92>
 8003d2a:	2e0a      	cmp	r6, #10
 8003d2c:	d117      	bne.n	8003d5e <__swbuf_r+0x92>
 8003d2e:	4621      	mov	r1, r4
 8003d30:	4628      	mov	r0, r5
 8003d32:	f000 ff53 	bl	8004bdc <_fflush_r>
 8003d36:	b190      	cbz	r0, 8003d5e <__swbuf_r+0x92>
 8003d38:	e00f      	b.n	8003d5a <__swbuf_r+0x8e>
 8003d3a:	4b0b      	ldr	r3, [pc, #44]	; (8003d68 <__swbuf_r+0x9c>)
 8003d3c:	429c      	cmp	r4, r3
 8003d3e:	d101      	bne.n	8003d44 <__swbuf_r+0x78>
 8003d40:	68ac      	ldr	r4, [r5, #8]
 8003d42:	e7d0      	b.n	8003ce6 <__swbuf_r+0x1a>
 8003d44:	4b09      	ldr	r3, [pc, #36]	; (8003d6c <__swbuf_r+0xa0>)
 8003d46:	429c      	cmp	r4, r3
 8003d48:	bf08      	it	eq
 8003d4a:	68ec      	ldreq	r4, [r5, #12]
 8003d4c:	e7cb      	b.n	8003ce6 <__swbuf_r+0x1a>
 8003d4e:	4621      	mov	r1, r4
 8003d50:	4628      	mov	r0, r5
 8003d52:	f000 f80d 	bl	8003d70 <__swsetup_r>
 8003d56:	2800      	cmp	r0, #0
 8003d58:	d0cc      	beq.n	8003cf4 <__swbuf_r+0x28>
 8003d5a:	f04f 37ff 	mov.w	r7, #4294967295
 8003d5e:	4638      	mov	r0, r7
 8003d60:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003d62:	bf00      	nop
 8003d64:	080064d8 	.word	0x080064d8
 8003d68:	080064f8 	.word	0x080064f8
 8003d6c:	080064b8 	.word	0x080064b8

08003d70 <__swsetup_r>:
 8003d70:	4b32      	ldr	r3, [pc, #200]	; (8003e3c <__swsetup_r+0xcc>)
 8003d72:	b570      	push	{r4, r5, r6, lr}
 8003d74:	681d      	ldr	r5, [r3, #0]
 8003d76:	4606      	mov	r6, r0
 8003d78:	460c      	mov	r4, r1
 8003d7a:	b125      	cbz	r5, 8003d86 <__swsetup_r+0x16>
 8003d7c:	69ab      	ldr	r3, [r5, #24]
 8003d7e:	b913      	cbnz	r3, 8003d86 <__swsetup_r+0x16>
 8003d80:	4628      	mov	r0, r5
 8003d82:	f000 ff95 	bl	8004cb0 <__sinit>
 8003d86:	4b2e      	ldr	r3, [pc, #184]	; (8003e40 <__swsetup_r+0xd0>)
 8003d88:	429c      	cmp	r4, r3
 8003d8a:	d10f      	bne.n	8003dac <__swsetup_r+0x3c>
 8003d8c:	686c      	ldr	r4, [r5, #4]
 8003d8e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003d92:	b29a      	uxth	r2, r3
 8003d94:	0715      	lsls	r5, r2, #28
 8003d96:	d42c      	bmi.n	8003df2 <__swsetup_r+0x82>
 8003d98:	06d0      	lsls	r0, r2, #27
 8003d9a:	d411      	bmi.n	8003dc0 <__swsetup_r+0x50>
 8003d9c:	2209      	movs	r2, #9
 8003d9e:	6032      	str	r2, [r6, #0]
 8003da0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003da4:	81a3      	strh	r3, [r4, #12]
 8003da6:	f04f 30ff 	mov.w	r0, #4294967295
 8003daa:	e03e      	b.n	8003e2a <__swsetup_r+0xba>
 8003dac:	4b25      	ldr	r3, [pc, #148]	; (8003e44 <__swsetup_r+0xd4>)
 8003dae:	429c      	cmp	r4, r3
 8003db0:	d101      	bne.n	8003db6 <__swsetup_r+0x46>
 8003db2:	68ac      	ldr	r4, [r5, #8]
 8003db4:	e7eb      	b.n	8003d8e <__swsetup_r+0x1e>
 8003db6:	4b24      	ldr	r3, [pc, #144]	; (8003e48 <__swsetup_r+0xd8>)
 8003db8:	429c      	cmp	r4, r3
 8003dba:	bf08      	it	eq
 8003dbc:	68ec      	ldreq	r4, [r5, #12]
 8003dbe:	e7e6      	b.n	8003d8e <__swsetup_r+0x1e>
 8003dc0:	0751      	lsls	r1, r2, #29
 8003dc2:	d512      	bpl.n	8003dea <__swsetup_r+0x7a>
 8003dc4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003dc6:	b141      	cbz	r1, 8003dda <__swsetup_r+0x6a>
 8003dc8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003dcc:	4299      	cmp	r1, r3
 8003dce:	d002      	beq.n	8003dd6 <__swsetup_r+0x66>
 8003dd0:	4630      	mov	r0, r6
 8003dd2:	f001 ffd1 	bl	8005d78 <_free_r>
 8003dd6:	2300      	movs	r3, #0
 8003dd8:	6363      	str	r3, [r4, #52]	; 0x34
 8003dda:	89a3      	ldrh	r3, [r4, #12]
 8003ddc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8003de0:	81a3      	strh	r3, [r4, #12]
 8003de2:	2300      	movs	r3, #0
 8003de4:	6063      	str	r3, [r4, #4]
 8003de6:	6923      	ldr	r3, [r4, #16]
 8003de8:	6023      	str	r3, [r4, #0]
 8003dea:	89a3      	ldrh	r3, [r4, #12]
 8003dec:	f043 0308 	orr.w	r3, r3, #8
 8003df0:	81a3      	strh	r3, [r4, #12]
 8003df2:	6923      	ldr	r3, [r4, #16]
 8003df4:	b94b      	cbnz	r3, 8003e0a <__swsetup_r+0x9a>
 8003df6:	89a3      	ldrh	r3, [r4, #12]
 8003df8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8003dfc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003e00:	d003      	beq.n	8003e0a <__swsetup_r+0x9a>
 8003e02:	4621      	mov	r1, r4
 8003e04:	4630      	mov	r0, r6
 8003e06:	f001 fb3d 	bl	8005484 <__smakebuf_r>
 8003e0a:	89a2      	ldrh	r2, [r4, #12]
 8003e0c:	f012 0301 	ands.w	r3, r2, #1
 8003e10:	d00c      	beq.n	8003e2c <__swsetup_r+0xbc>
 8003e12:	2300      	movs	r3, #0
 8003e14:	60a3      	str	r3, [r4, #8]
 8003e16:	6963      	ldr	r3, [r4, #20]
 8003e18:	425b      	negs	r3, r3
 8003e1a:	61a3      	str	r3, [r4, #24]
 8003e1c:	6923      	ldr	r3, [r4, #16]
 8003e1e:	b953      	cbnz	r3, 8003e36 <__swsetup_r+0xc6>
 8003e20:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003e24:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8003e28:	d1ba      	bne.n	8003da0 <__swsetup_r+0x30>
 8003e2a:	bd70      	pop	{r4, r5, r6, pc}
 8003e2c:	0792      	lsls	r2, r2, #30
 8003e2e:	bf58      	it	pl
 8003e30:	6963      	ldrpl	r3, [r4, #20]
 8003e32:	60a3      	str	r3, [r4, #8]
 8003e34:	e7f2      	b.n	8003e1c <__swsetup_r+0xac>
 8003e36:	2000      	movs	r0, #0
 8003e38:	e7f7      	b.n	8003e2a <__swsetup_r+0xba>
 8003e3a:	bf00      	nop
 8003e3c:	2000000c 	.word	0x2000000c
 8003e40:	080064d8 	.word	0x080064d8
 8003e44:	080064f8 	.word	0x080064f8
 8003e48:	080064b8 	.word	0x080064b8

08003e4c <quorem>:
 8003e4c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003e50:	6903      	ldr	r3, [r0, #16]
 8003e52:	690c      	ldr	r4, [r1, #16]
 8003e54:	4680      	mov	r8, r0
 8003e56:	42a3      	cmp	r3, r4
 8003e58:	f2c0 8084 	blt.w	8003f64 <quorem+0x118>
 8003e5c:	3c01      	subs	r4, #1
 8003e5e:	f101 0714 	add.w	r7, r1, #20
 8003e62:	f100 0614 	add.w	r6, r0, #20
 8003e66:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8003e6a:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8003e6e:	3501      	adds	r5, #1
 8003e70:	fbb0 f5f5 	udiv	r5, r0, r5
 8003e74:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8003e78:	eb06 030c 	add.w	r3, r6, ip
 8003e7c:	eb07 090c 	add.w	r9, r7, ip
 8003e80:	9301      	str	r3, [sp, #4]
 8003e82:	b39d      	cbz	r5, 8003eec <quorem+0xa0>
 8003e84:	f04f 0a00 	mov.w	sl, #0
 8003e88:	4638      	mov	r0, r7
 8003e8a:	46b6      	mov	lr, r6
 8003e8c:	46d3      	mov	fp, sl
 8003e8e:	f850 2b04 	ldr.w	r2, [r0], #4
 8003e92:	b293      	uxth	r3, r2
 8003e94:	fb05 a303 	mla	r3, r5, r3, sl
 8003e98:	0c12      	lsrs	r2, r2, #16
 8003e9a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8003e9e:	fb05 a202 	mla	r2, r5, r2, sl
 8003ea2:	b29b      	uxth	r3, r3
 8003ea4:	ebab 0303 	sub.w	r3, fp, r3
 8003ea8:	f8de b000 	ldr.w	fp, [lr]
 8003eac:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8003eb0:	fa1f fb8b 	uxth.w	fp, fp
 8003eb4:	445b      	add	r3, fp
 8003eb6:	fa1f fb82 	uxth.w	fp, r2
 8003eba:	f8de 2000 	ldr.w	r2, [lr]
 8003ebe:	4581      	cmp	r9, r0
 8003ec0:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8003ec4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8003ec8:	b29b      	uxth	r3, r3
 8003eca:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8003ece:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8003ed2:	f84e 3b04 	str.w	r3, [lr], #4
 8003ed6:	d2da      	bcs.n	8003e8e <quorem+0x42>
 8003ed8:	f856 300c 	ldr.w	r3, [r6, ip]
 8003edc:	b933      	cbnz	r3, 8003eec <quorem+0xa0>
 8003ede:	9b01      	ldr	r3, [sp, #4]
 8003ee0:	3b04      	subs	r3, #4
 8003ee2:	429e      	cmp	r6, r3
 8003ee4:	461a      	mov	r2, r3
 8003ee6:	d331      	bcc.n	8003f4c <quorem+0x100>
 8003ee8:	f8c8 4010 	str.w	r4, [r8, #16]
 8003eec:	4640      	mov	r0, r8
 8003eee:	f001 fd8f 	bl	8005a10 <__mcmp>
 8003ef2:	2800      	cmp	r0, #0
 8003ef4:	db26      	blt.n	8003f44 <quorem+0xf8>
 8003ef6:	4630      	mov	r0, r6
 8003ef8:	f04f 0c00 	mov.w	ip, #0
 8003efc:	3501      	adds	r5, #1
 8003efe:	f857 1b04 	ldr.w	r1, [r7], #4
 8003f02:	f8d0 e000 	ldr.w	lr, [r0]
 8003f06:	b28b      	uxth	r3, r1
 8003f08:	ebac 0303 	sub.w	r3, ip, r3
 8003f0c:	fa1f f28e 	uxth.w	r2, lr
 8003f10:	4413      	add	r3, r2
 8003f12:	0c0a      	lsrs	r2, r1, #16
 8003f14:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8003f18:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8003f1c:	b29b      	uxth	r3, r3
 8003f1e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8003f22:	45b9      	cmp	r9, r7
 8003f24:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8003f28:	f840 3b04 	str.w	r3, [r0], #4
 8003f2c:	d2e7      	bcs.n	8003efe <quorem+0xb2>
 8003f2e:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8003f32:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8003f36:	b92a      	cbnz	r2, 8003f44 <quorem+0xf8>
 8003f38:	3b04      	subs	r3, #4
 8003f3a:	429e      	cmp	r6, r3
 8003f3c:	461a      	mov	r2, r3
 8003f3e:	d30b      	bcc.n	8003f58 <quorem+0x10c>
 8003f40:	f8c8 4010 	str.w	r4, [r8, #16]
 8003f44:	4628      	mov	r0, r5
 8003f46:	b003      	add	sp, #12
 8003f48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003f4c:	6812      	ldr	r2, [r2, #0]
 8003f4e:	3b04      	subs	r3, #4
 8003f50:	2a00      	cmp	r2, #0
 8003f52:	d1c9      	bne.n	8003ee8 <quorem+0x9c>
 8003f54:	3c01      	subs	r4, #1
 8003f56:	e7c4      	b.n	8003ee2 <quorem+0x96>
 8003f58:	6812      	ldr	r2, [r2, #0]
 8003f5a:	3b04      	subs	r3, #4
 8003f5c:	2a00      	cmp	r2, #0
 8003f5e:	d1ef      	bne.n	8003f40 <quorem+0xf4>
 8003f60:	3c01      	subs	r4, #1
 8003f62:	e7ea      	b.n	8003f3a <quorem+0xee>
 8003f64:	2000      	movs	r0, #0
 8003f66:	e7ee      	b.n	8003f46 <quorem+0xfa>

08003f68 <_dtoa_r>:
 8003f68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003f6c:	4616      	mov	r6, r2
 8003f6e:	461f      	mov	r7, r3
 8003f70:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8003f72:	b095      	sub	sp, #84	; 0x54
 8003f74:	4604      	mov	r4, r0
 8003f76:	f8dd 8084 	ldr.w	r8, [sp, #132]	; 0x84
 8003f7a:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8003f7e:	b93d      	cbnz	r5, 8003f90 <_dtoa_r+0x28>
 8003f80:	2010      	movs	r0, #16
 8003f82:	f001 fabf 	bl	8005504 <malloc>
 8003f86:	6260      	str	r0, [r4, #36]	; 0x24
 8003f88:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8003f8c:	6005      	str	r5, [r0, #0]
 8003f8e:	60c5      	str	r5, [r0, #12]
 8003f90:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003f92:	6819      	ldr	r1, [r3, #0]
 8003f94:	b151      	cbz	r1, 8003fac <_dtoa_r+0x44>
 8003f96:	685a      	ldr	r2, [r3, #4]
 8003f98:	2301      	movs	r3, #1
 8003f9a:	4093      	lsls	r3, r2
 8003f9c:	604a      	str	r2, [r1, #4]
 8003f9e:	608b      	str	r3, [r1, #8]
 8003fa0:	4620      	mov	r0, r4
 8003fa2:	f001 fb16 	bl	80055d2 <_Bfree>
 8003fa6:	2200      	movs	r2, #0
 8003fa8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003faa:	601a      	str	r2, [r3, #0]
 8003fac:	1e3b      	subs	r3, r7, #0
 8003fae:	bfaf      	iteee	ge
 8003fb0:	2300      	movge	r3, #0
 8003fb2:	2201      	movlt	r2, #1
 8003fb4:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8003fb8:	9303      	strlt	r3, [sp, #12]
 8003fba:	bfac      	ite	ge
 8003fbc:	f8c8 3000 	strge.w	r3, [r8]
 8003fc0:	f8c8 2000 	strlt.w	r2, [r8]
 8003fc4:	4bae      	ldr	r3, [pc, #696]	; (8004280 <_dtoa_r+0x318>)
 8003fc6:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8003fca:	ea33 0308 	bics.w	r3, r3, r8
 8003fce:	d11b      	bne.n	8004008 <_dtoa_r+0xa0>
 8003fd0:	f242 730f 	movw	r3, #9999	; 0x270f
 8003fd4:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8003fd6:	6013      	str	r3, [r2, #0]
 8003fd8:	9b02      	ldr	r3, [sp, #8]
 8003fda:	b923      	cbnz	r3, 8003fe6 <_dtoa_r+0x7e>
 8003fdc:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8003fe0:	2800      	cmp	r0, #0
 8003fe2:	f000 8545 	beq.w	8004a70 <_dtoa_r+0xb08>
 8003fe6:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8003fe8:	b953      	cbnz	r3, 8004000 <_dtoa_r+0x98>
 8003fea:	4ba6      	ldr	r3, [pc, #664]	; (8004284 <_dtoa_r+0x31c>)
 8003fec:	e021      	b.n	8004032 <_dtoa_r+0xca>
 8003fee:	4ba6      	ldr	r3, [pc, #664]	; (8004288 <_dtoa_r+0x320>)
 8003ff0:	9306      	str	r3, [sp, #24]
 8003ff2:	3308      	adds	r3, #8
 8003ff4:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8003ff6:	6013      	str	r3, [r2, #0]
 8003ff8:	9806      	ldr	r0, [sp, #24]
 8003ffa:	b015      	add	sp, #84	; 0x54
 8003ffc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004000:	4ba0      	ldr	r3, [pc, #640]	; (8004284 <_dtoa_r+0x31c>)
 8004002:	9306      	str	r3, [sp, #24]
 8004004:	3303      	adds	r3, #3
 8004006:	e7f5      	b.n	8003ff4 <_dtoa_r+0x8c>
 8004008:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800400c:	2200      	movs	r2, #0
 800400e:	2300      	movs	r3, #0
 8004010:	4630      	mov	r0, r6
 8004012:	4639      	mov	r1, r7
 8004014:	f7fc fcc8 	bl	80009a8 <__aeabi_dcmpeq>
 8004018:	4682      	mov	sl, r0
 800401a:	b160      	cbz	r0, 8004036 <_dtoa_r+0xce>
 800401c:	2301      	movs	r3, #1
 800401e:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8004020:	6013      	str	r3, [r2, #0]
 8004022:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004024:	2b00      	cmp	r3, #0
 8004026:	f000 8520 	beq.w	8004a6a <_dtoa_r+0xb02>
 800402a:	4b98      	ldr	r3, [pc, #608]	; (800428c <_dtoa_r+0x324>)
 800402c:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800402e:	6013      	str	r3, [r2, #0]
 8004030:	3b01      	subs	r3, #1
 8004032:	9306      	str	r3, [sp, #24]
 8004034:	e7e0      	b.n	8003ff8 <_dtoa_r+0x90>
 8004036:	ab12      	add	r3, sp, #72	; 0x48
 8004038:	9301      	str	r3, [sp, #4]
 800403a:	ab13      	add	r3, sp, #76	; 0x4c
 800403c:	9300      	str	r3, [sp, #0]
 800403e:	4632      	mov	r2, r6
 8004040:	463b      	mov	r3, r7
 8004042:	4620      	mov	r0, r4
 8004044:	f001 fdd2 	bl	8005bec <__d2b>
 8004048:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800404c:	4683      	mov	fp, r0
 800404e:	2d00      	cmp	r5, #0
 8004050:	d07d      	beq.n	800414e <_dtoa_r+0x1e6>
 8004052:	46b0      	mov	r8, r6
 8004054:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8004058:	f043 597f 	orr.w	r9, r3, #1069547520	; 0x3fc00000
 800405c:	f449 1940 	orr.w	r9, r9, #3145728	; 0x300000
 8004060:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8004064:	f8cd a040 	str.w	sl, [sp, #64]	; 0x40
 8004068:	2200      	movs	r2, #0
 800406a:	4b89      	ldr	r3, [pc, #548]	; (8004290 <_dtoa_r+0x328>)
 800406c:	4640      	mov	r0, r8
 800406e:	4649      	mov	r1, r9
 8004070:	f7fc f87a 	bl	8000168 <__aeabi_dsub>
 8004074:	a37c      	add	r3, pc, #496	; (adr r3, 8004268 <_dtoa_r+0x300>)
 8004076:	e9d3 2300 	ldrd	r2, r3, [r3]
 800407a:	f7fc fa2d 	bl	80004d8 <__aeabi_dmul>
 800407e:	a37c      	add	r3, pc, #496	; (adr r3, 8004270 <_dtoa_r+0x308>)
 8004080:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004084:	f7fc f872 	bl	800016c <__adddf3>
 8004088:	4606      	mov	r6, r0
 800408a:	4628      	mov	r0, r5
 800408c:	460f      	mov	r7, r1
 800408e:	f7fc f9b9 	bl	8000404 <__aeabi_i2d>
 8004092:	a379      	add	r3, pc, #484	; (adr r3, 8004278 <_dtoa_r+0x310>)
 8004094:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004098:	f7fc fa1e 	bl	80004d8 <__aeabi_dmul>
 800409c:	4602      	mov	r2, r0
 800409e:	460b      	mov	r3, r1
 80040a0:	4630      	mov	r0, r6
 80040a2:	4639      	mov	r1, r7
 80040a4:	f7fc f862 	bl	800016c <__adddf3>
 80040a8:	4606      	mov	r6, r0
 80040aa:	460f      	mov	r7, r1
 80040ac:	f7fc fcc4 	bl	8000a38 <__aeabi_d2iz>
 80040b0:	2200      	movs	r2, #0
 80040b2:	4682      	mov	sl, r0
 80040b4:	2300      	movs	r3, #0
 80040b6:	4630      	mov	r0, r6
 80040b8:	4639      	mov	r1, r7
 80040ba:	f7fc fc7f 	bl	80009bc <__aeabi_dcmplt>
 80040be:	b148      	cbz	r0, 80040d4 <_dtoa_r+0x16c>
 80040c0:	4650      	mov	r0, sl
 80040c2:	f7fc f99f 	bl	8000404 <__aeabi_i2d>
 80040c6:	4632      	mov	r2, r6
 80040c8:	463b      	mov	r3, r7
 80040ca:	f7fc fc6d 	bl	80009a8 <__aeabi_dcmpeq>
 80040ce:	b908      	cbnz	r0, 80040d4 <_dtoa_r+0x16c>
 80040d0:	f10a 3aff 	add.w	sl, sl, #4294967295
 80040d4:	f1ba 0f16 	cmp.w	sl, #22
 80040d8:	d85a      	bhi.n	8004190 <_dtoa_r+0x228>
 80040da:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80040de:	496d      	ldr	r1, [pc, #436]	; (8004294 <_dtoa_r+0x32c>)
 80040e0:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 80040e4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80040e8:	f7fc fc86 	bl	80009f8 <__aeabi_dcmpgt>
 80040ec:	2800      	cmp	r0, #0
 80040ee:	d051      	beq.n	8004194 <_dtoa_r+0x22c>
 80040f0:	2300      	movs	r3, #0
 80040f2:	f10a 3aff 	add.w	sl, sl, #4294967295
 80040f6:	930d      	str	r3, [sp, #52]	; 0x34
 80040f8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80040fa:	1b5d      	subs	r5, r3, r5
 80040fc:	1e6b      	subs	r3, r5, #1
 80040fe:	9307      	str	r3, [sp, #28]
 8004100:	bf43      	ittte	mi
 8004102:	2300      	movmi	r3, #0
 8004104:	f1c5 0901 	rsbmi	r9, r5, #1
 8004108:	9307      	strmi	r3, [sp, #28]
 800410a:	f04f 0900 	movpl.w	r9, #0
 800410e:	f1ba 0f00 	cmp.w	sl, #0
 8004112:	db41      	blt.n	8004198 <_dtoa_r+0x230>
 8004114:	9b07      	ldr	r3, [sp, #28]
 8004116:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
 800411a:	4453      	add	r3, sl
 800411c:	9307      	str	r3, [sp, #28]
 800411e:	2300      	movs	r3, #0
 8004120:	9308      	str	r3, [sp, #32]
 8004122:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8004124:	2b09      	cmp	r3, #9
 8004126:	f200 808f 	bhi.w	8004248 <_dtoa_r+0x2e0>
 800412a:	2b05      	cmp	r3, #5
 800412c:	bfc4      	itt	gt
 800412e:	3b04      	subgt	r3, #4
 8004130:	931e      	strgt	r3, [sp, #120]	; 0x78
 8004132:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8004134:	bfc8      	it	gt
 8004136:	2500      	movgt	r5, #0
 8004138:	f1a3 0302 	sub.w	r3, r3, #2
 800413c:	bfd8      	it	le
 800413e:	2501      	movle	r5, #1
 8004140:	2b03      	cmp	r3, #3
 8004142:	f200 808d 	bhi.w	8004260 <_dtoa_r+0x2f8>
 8004146:	e8df f003 	tbb	[pc, r3]
 800414a:	7d7b      	.short	0x7d7b
 800414c:	6f2f      	.short	0x6f2f
 800414e:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8004152:	441d      	add	r5, r3
 8004154:	f205 4032 	addw	r0, r5, #1074	; 0x432
 8004158:	2820      	cmp	r0, #32
 800415a:	dd13      	ble.n	8004184 <_dtoa_r+0x21c>
 800415c:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 8004160:	9b02      	ldr	r3, [sp, #8]
 8004162:	fa08 f800 	lsl.w	r8, r8, r0
 8004166:	f205 4012 	addw	r0, r5, #1042	; 0x412
 800416a:	fa23 f000 	lsr.w	r0, r3, r0
 800416e:	ea48 0000 	orr.w	r0, r8, r0
 8004172:	f7fc f937 	bl	80003e4 <__aeabi_ui2d>
 8004176:	2301      	movs	r3, #1
 8004178:	4680      	mov	r8, r0
 800417a:	f1a1 79f8 	sub.w	r9, r1, #32505856	; 0x1f00000
 800417e:	3d01      	subs	r5, #1
 8004180:	9310      	str	r3, [sp, #64]	; 0x40
 8004182:	e771      	b.n	8004068 <_dtoa_r+0x100>
 8004184:	9b02      	ldr	r3, [sp, #8]
 8004186:	f1c0 0020 	rsb	r0, r0, #32
 800418a:	fa03 f000 	lsl.w	r0, r3, r0
 800418e:	e7f0      	b.n	8004172 <_dtoa_r+0x20a>
 8004190:	2301      	movs	r3, #1
 8004192:	e7b0      	b.n	80040f6 <_dtoa_r+0x18e>
 8004194:	900d      	str	r0, [sp, #52]	; 0x34
 8004196:	e7af      	b.n	80040f8 <_dtoa_r+0x190>
 8004198:	f1ca 0300 	rsb	r3, sl, #0
 800419c:	9308      	str	r3, [sp, #32]
 800419e:	2300      	movs	r3, #0
 80041a0:	eba9 090a 	sub.w	r9, r9, sl
 80041a4:	930c      	str	r3, [sp, #48]	; 0x30
 80041a6:	e7bc      	b.n	8004122 <_dtoa_r+0x1ba>
 80041a8:	2301      	movs	r3, #1
 80041aa:	9309      	str	r3, [sp, #36]	; 0x24
 80041ac:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	dd74      	ble.n	800429c <_dtoa_r+0x334>
 80041b2:	4698      	mov	r8, r3
 80041b4:	9304      	str	r3, [sp, #16]
 80041b6:	2200      	movs	r2, #0
 80041b8:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80041ba:	6072      	str	r2, [r6, #4]
 80041bc:	2204      	movs	r2, #4
 80041be:	f102 0014 	add.w	r0, r2, #20
 80041c2:	4298      	cmp	r0, r3
 80041c4:	6871      	ldr	r1, [r6, #4]
 80041c6:	d96e      	bls.n	80042a6 <_dtoa_r+0x33e>
 80041c8:	4620      	mov	r0, r4
 80041ca:	f001 f9ce 	bl	800556a <_Balloc>
 80041ce:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80041d0:	6030      	str	r0, [r6, #0]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	f1b8 0f0e 	cmp.w	r8, #14
 80041d8:	9306      	str	r3, [sp, #24]
 80041da:	f200 80ed 	bhi.w	80043b8 <_dtoa_r+0x450>
 80041de:	2d00      	cmp	r5, #0
 80041e0:	f000 80ea 	beq.w	80043b8 <_dtoa_r+0x450>
 80041e4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80041e8:	f1ba 0f00 	cmp.w	sl, #0
 80041ec:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 80041f0:	dd77      	ble.n	80042e2 <_dtoa_r+0x37a>
 80041f2:	4a28      	ldr	r2, [pc, #160]	; (8004294 <_dtoa_r+0x32c>)
 80041f4:	f00a 030f 	and.w	r3, sl, #15
 80041f8:	ea4f 162a 	mov.w	r6, sl, asr #4
 80041fc:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8004200:	06f0      	lsls	r0, r6, #27
 8004202:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004206:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800420a:	d568      	bpl.n	80042de <_dtoa_r+0x376>
 800420c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8004210:	4b21      	ldr	r3, [pc, #132]	; (8004298 <_dtoa_r+0x330>)
 8004212:	2503      	movs	r5, #3
 8004214:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8004218:	f7fc fa88 	bl	800072c <__aeabi_ddiv>
 800421c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004220:	f006 060f 	and.w	r6, r6, #15
 8004224:	4f1c      	ldr	r7, [pc, #112]	; (8004298 <_dtoa_r+0x330>)
 8004226:	e04f      	b.n	80042c8 <_dtoa_r+0x360>
 8004228:	2301      	movs	r3, #1
 800422a:	9309      	str	r3, [sp, #36]	; 0x24
 800422c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800422e:	4453      	add	r3, sl
 8004230:	f103 0801 	add.w	r8, r3, #1
 8004234:	9304      	str	r3, [sp, #16]
 8004236:	4643      	mov	r3, r8
 8004238:	2b01      	cmp	r3, #1
 800423a:	bfb8      	it	lt
 800423c:	2301      	movlt	r3, #1
 800423e:	e7ba      	b.n	80041b6 <_dtoa_r+0x24e>
 8004240:	2300      	movs	r3, #0
 8004242:	e7b2      	b.n	80041aa <_dtoa_r+0x242>
 8004244:	2300      	movs	r3, #0
 8004246:	e7f0      	b.n	800422a <_dtoa_r+0x2c2>
 8004248:	2501      	movs	r5, #1
 800424a:	2300      	movs	r3, #0
 800424c:	9509      	str	r5, [sp, #36]	; 0x24
 800424e:	931e      	str	r3, [sp, #120]	; 0x78
 8004250:	f04f 33ff 	mov.w	r3, #4294967295
 8004254:	2200      	movs	r2, #0
 8004256:	9304      	str	r3, [sp, #16]
 8004258:	4698      	mov	r8, r3
 800425a:	2312      	movs	r3, #18
 800425c:	921f      	str	r2, [sp, #124]	; 0x7c
 800425e:	e7aa      	b.n	80041b6 <_dtoa_r+0x24e>
 8004260:	2301      	movs	r3, #1
 8004262:	9309      	str	r3, [sp, #36]	; 0x24
 8004264:	e7f4      	b.n	8004250 <_dtoa_r+0x2e8>
 8004266:	bf00      	nop
 8004268:	636f4361 	.word	0x636f4361
 800426c:	3fd287a7 	.word	0x3fd287a7
 8004270:	8b60c8b3 	.word	0x8b60c8b3
 8004274:	3fc68a28 	.word	0x3fc68a28
 8004278:	509f79fb 	.word	0x509f79fb
 800427c:	3fd34413 	.word	0x3fd34413
 8004280:	7ff00000 	.word	0x7ff00000
 8004284:	080064b1 	.word	0x080064b1
 8004288:	080064a8 	.word	0x080064a8
 800428c:	08006429 	.word	0x08006429
 8004290:	3ff80000 	.word	0x3ff80000
 8004294:	08006550 	.word	0x08006550
 8004298:	08006528 	.word	0x08006528
 800429c:	2301      	movs	r3, #1
 800429e:	9304      	str	r3, [sp, #16]
 80042a0:	4698      	mov	r8, r3
 80042a2:	461a      	mov	r2, r3
 80042a4:	e7da      	b.n	800425c <_dtoa_r+0x2f4>
 80042a6:	3101      	adds	r1, #1
 80042a8:	6071      	str	r1, [r6, #4]
 80042aa:	0052      	lsls	r2, r2, #1
 80042ac:	e787      	b.n	80041be <_dtoa_r+0x256>
 80042ae:	07f1      	lsls	r1, r6, #31
 80042b0:	d508      	bpl.n	80042c4 <_dtoa_r+0x35c>
 80042b2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80042b6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80042ba:	f7fc f90d 	bl	80004d8 <__aeabi_dmul>
 80042be:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80042c2:	3501      	adds	r5, #1
 80042c4:	1076      	asrs	r6, r6, #1
 80042c6:	3708      	adds	r7, #8
 80042c8:	2e00      	cmp	r6, #0
 80042ca:	d1f0      	bne.n	80042ae <_dtoa_r+0x346>
 80042cc:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80042d0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80042d4:	f7fc fa2a 	bl	800072c <__aeabi_ddiv>
 80042d8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80042dc:	e01b      	b.n	8004316 <_dtoa_r+0x3ae>
 80042de:	2502      	movs	r5, #2
 80042e0:	e7a0      	b.n	8004224 <_dtoa_r+0x2bc>
 80042e2:	f000 80a4 	beq.w	800442e <_dtoa_r+0x4c6>
 80042e6:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 80042ea:	f1ca 0600 	rsb	r6, sl, #0
 80042ee:	4ba0      	ldr	r3, [pc, #640]	; (8004570 <_dtoa_r+0x608>)
 80042f0:	f006 020f 	and.w	r2, r6, #15
 80042f4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80042f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042fc:	f7fc f8ec 	bl	80004d8 <__aeabi_dmul>
 8004300:	2502      	movs	r5, #2
 8004302:	2300      	movs	r3, #0
 8004304:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004308:	4f9a      	ldr	r7, [pc, #616]	; (8004574 <_dtoa_r+0x60c>)
 800430a:	1136      	asrs	r6, r6, #4
 800430c:	2e00      	cmp	r6, #0
 800430e:	f040 8083 	bne.w	8004418 <_dtoa_r+0x4b0>
 8004312:	2b00      	cmp	r3, #0
 8004314:	d1e0      	bne.n	80042d8 <_dtoa_r+0x370>
 8004316:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004318:	2b00      	cmp	r3, #0
 800431a:	f000 808a 	beq.w	8004432 <_dtoa_r+0x4ca>
 800431e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004322:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8004326:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800432a:	2200      	movs	r2, #0
 800432c:	4b92      	ldr	r3, [pc, #584]	; (8004578 <_dtoa_r+0x610>)
 800432e:	f7fc fb45 	bl	80009bc <__aeabi_dcmplt>
 8004332:	2800      	cmp	r0, #0
 8004334:	d07d      	beq.n	8004432 <_dtoa_r+0x4ca>
 8004336:	f1b8 0f00 	cmp.w	r8, #0
 800433a:	d07a      	beq.n	8004432 <_dtoa_r+0x4ca>
 800433c:	9b04      	ldr	r3, [sp, #16]
 800433e:	2b00      	cmp	r3, #0
 8004340:	dd36      	ble.n	80043b0 <_dtoa_r+0x448>
 8004342:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8004346:	2200      	movs	r2, #0
 8004348:	4b8c      	ldr	r3, [pc, #560]	; (800457c <_dtoa_r+0x614>)
 800434a:	f7fc f8c5 	bl	80004d8 <__aeabi_dmul>
 800434e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004352:	9e04      	ldr	r6, [sp, #16]
 8004354:	f10a 37ff 	add.w	r7, sl, #4294967295
 8004358:	3501      	adds	r5, #1
 800435a:	4628      	mov	r0, r5
 800435c:	f7fc f852 	bl	8000404 <__aeabi_i2d>
 8004360:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004364:	f7fc f8b8 	bl	80004d8 <__aeabi_dmul>
 8004368:	2200      	movs	r2, #0
 800436a:	4b85      	ldr	r3, [pc, #532]	; (8004580 <_dtoa_r+0x618>)
 800436c:	f7fb fefe 	bl	800016c <__adddf3>
 8004370:	f1a1 7550 	sub.w	r5, r1, #54525952	; 0x3400000
 8004374:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8004378:	950b      	str	r5, [sp, #44]	; 0x2c
 800437a:	2e00      	cmp	r6, #0
 800437c:	d15c      	bne.n	8004438 <_dtoa_r+0x4d0>
 800437e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004382:	2200      	movs	r2, #0
 8004384:	4b7f      	ldr	r3, [pc, #508]	; (8004584 <_dtoa_r+0x61c>)
 8004386:	f7fb feef 	bl	8000168 <__aeabi_dsub>
 800438a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800438c:	462b      	mov	r3, r5
 800438e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004392:	f7fc fb31 	bl	80009f8 <__aeabi_dcmpgt>
 8004396:	2800      	cmp	r0, #0
 8004398:	f040 8281 	bne.w	800489e <_dtoa_r+0x936>
 800439c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80043a0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80043a2:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 80043a6:	f7fc fb09 	bl	80009bc <__aeabi_dcmplt>
 80043aa:	2800      	cmp	r0, #0
 80043ac:	f040 8275 	bne.w	800489a <_dtoa_r+0x932>
 80043b0:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 80043b4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80043b8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	f2c0 814b 	blt.w	8004656 <_dtoa_r+0x6ee>
 80043c0:	f1ba 0f0e 	cmp.w	sl, #14
 80043c4:	f300 8147 	bgt.w	8004656 <_dtoa_r+0x6ee>
 80043c8:	4b69      	ldr	r3, [pc, #420]	; (8004570 <_dtoa_r+0x608>)
 80043ca:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80043ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043d2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80043d6:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80043d8:	2b00      	cmp	r3, #0
 80043da:	f280 80d7 	bge.w	800458c <_dtoa_r+0x624>
 80043de:	f1b8 0f00 	cmp.w	r8, #0
 80043e2:	f300 80d3 	bgt.w	800458c <_dtoa_r+0x624>
 80043e6:	f040 8257 	bne.w	8004898 <_dtoa_r+0x930>
 80043ea:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80043ee:	2200      	movs	r2, #0
 80043f0:	4b64      	ldr	r3, [pc, #400]	; (8004584 <_dtoa_r+0x61c>)
 80043f2:	f7fc f871 	bl	80004d8 <__aeabi_dmul>
 80043f6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80043fa:	f7fc faf3 	bl	80009e4 <__aeabi_dcmpge>
 80043fe:	4646      	mov	r6, r8
 8004400:	4647      	mov	r7, r8
 8004402:	2800      	cmp	r0, #0
 8004404:	f040 822d 	bne.w	8004862 <_dtoa_r+0x8fa>
 8004408:	9b06      	ldr	r3, [sp, #24]
 800440a:	9a06      	ldr	r2, [sp, #24]
 800440c:	1c5d      	adds	r5, r3, #1
 800440e:	2331      	movs	r3, #49	; 0x31
 8004410:	f10a 0a01 	add.w	sl, sl, #1
 8004414:	7013      	strb	r3, [r2, #0]
 8004416:	e228      	b.n	800486a <_dtoa_r+0x902>
 8004418:	07f2      	lsls	r2, r6, #31
 800441a:	d505      	bpl.n	8004428 <_dtoa_r+0x4c0>
 800441c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004420:	f7fc f85a 	bl	80004d8 <__aeabi_dmul>
 8004424:	2301      	movs	r3, #1
 8004426:	3501      	adds	r5, #1
 8004428:	1076      	asrs	r6, r6, #1
 800442a:	3708      	adds	r7, #8
 800442c:	e76e      	b.n	800430c <_dtoa_r+0x3a4>
 800442e:	2502      	movs	r5, #2
 8004430:	e771      	b.n	8004316 <_dtoa_r+0x3ae>
 8004432:	4657      	mov	r7, sl
 8004434:	4646      	mov	r6, r8
 8004436:	e790      	b.n	800435a <_dtoa_r+0x3f2>
 8004438:	4b4d      	ldr	r3, [pc, #308]	; (8004570 <_dtoa_r+0x608>)
 800443a:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800443e:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8004442:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004444:	2b00      	cmp	r3, #0
 8004446:	d048      	beq.n	80044da <_dtoa_r+0x572>
 8004448:	4602      	mov	r2, r0
 800444a:	460b      	mov	r3, r1
 800444c:	2000      	movs	r0, #0
 800444e:	494e      	ldr	r1, [pc, #312]	; (8004588 <_dtoa_r+0x620>)
 8004450:	f7fc f96c 	bl	800072c <__aeabi_ddiv>
 8004454:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8004458:	f7fb fe86 	bl	8000168 <__aeabi_dsub>
 800445c:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8004460:	9d06      	ldr	r5, [sp, #24]
 8004462:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004466:	f7fc fae7 	bl	8000a38 <__aeabi_d2iz>
 800446a:	9011      	str	r0, [sp, #68]	; 0x44
 800446c:	f7fb ffca 	bl	8000404 <__aeabi_i2d>
 8004470:	4602      	mov	r2, r0
 8004472:	460b      	mov	r3, r1
 8004474:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004478:	f7fb fe76 	bl	8000168 <__aeabi_dsub>
 800447c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800447e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004482:	3330      	adds	r3, #48	; 0x30
 8004484:	f805 3b01 	strb.w	r3, [r5], #1
 8004488:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800448c:	f7fc fa96 	bl	80009bc <__aeabi_dcmplt>
 8004490:	2800      	cmp	r0, #0
 8004492:	d163      	bne.n	800455c <_dtoa_r+0x5f4>
 8004494:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004498:	2000      	movs	r0, #0
 800449a:	4937      	ldr	r1, [pc, #220]	; (8004578 <_dtoa_r+0x610>)
 800449c:	f7fb fe64 	bl	8000168 <__aeabi_dsub>
 80044a0:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80044a4:	f7fc fa8a 	bl	80009bc <__aeabi_dcmplt>
 80044a8:	2800      	cmp	r0, #0
 80044aa:	f040 80b5 	bne.w	8004618 <_dtoa_r+0x6b0>
 80044ae:	9b06      	ldr	r3, [sp, #24]
 80044b0:	1aeb      	subs	r3, r5, r3
 80044b2:	429e      	cmp	r6, r3
 80044b4:	f77f af7c 	ble.w	80043b0 <_dtoa_r+0x448>
 80044b8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80044bc:	2200      	movs	r2, #0
 80044be:	4b2f      	ldr	r3, [pc, #188]	; (800457c <_dtoa_r+0x614>)
 80044c0:	f7fc f80a 	bl	80004d8 <__aeabi_dmul>
 80044c4:	2200      	movs	r2, #0
 80044c6:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80044ca:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80044ce:	4b2b      	ldr	r3, [pc, #172]	; (800457c <_dtoa_r+0x614>)
 80044d0:	f7fc f802 	bl	80004d8 <__aeabi_dmul>
 80044d4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80044d8:	e7c3      	b.n	8004462 <_dtoa_r+0x4fa>
 80044da:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80044de:	f7fb fffb 	bl	80004d8 <__aeabi_dmul>
 80044e2:	9b06      	ldr	r3, [sp, #24]
 80044e4:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80044e8:	199d      	adds	r5, r3, r6
 80044ea:	461e      	mov	r6, r3
 80044ec:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80044f0:	f7fc faa2 	bl	8000a38 <__aeabi_d2iz>
 80044f4:	9011      	str	r0, [sp, #68]	; 0x44
 80044f6:	f7fb ff85 	bl	8000404 <__aeabi_i2d>
 80044fa:	4602      	mov	r2, r0
 80044fc:	460b      	mov	r3, r1
 80044fe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004502:	f7fb fe31 	bl	8000168 <__aeabi_dsub>
 8004506:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8004508:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800450c:	3330      	adds	r3, #48	; 0x30
 800450e:	f806 3b01 	strb.w	r3, [r6], #1
 8004512:	42ae      	cmp	r6, r5
 8004514:	f04f 0200 	mov.w	r2, #0
 8004518:	d124      	bne.n	8004564 <_dtoa_r+0x5fc>
 800451a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800451e:	4b1a      	ldr	r3, [pc, #104]	; (8004588 <_dtoa_r+0x620>)
 8004520:	f7fb fe24 	bl	800016c <__adddf3>
 8004524:	4602      	mov	r2, r0
 8004526:	460b      	mov	r3, r1
 8004528:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800452c:	f7fc fa64 	bl	80009f8 <__aeabi_dcmpgt>
 8004530:	2800      	cmp	r0, #0
 8004532:	d171      	bne.n	8004618 <_dtoa_r+0x6b0>
 8004534:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8004538:	2000      	movs	r0, #0
 800453a:	4913      	ldr	r1, [pc, #76]	; (8004588 <_dtoa_r+0x620>)
 800453c:	f7fb fe14 	bl	8000168 <__aeabi_dsub>
 8004540:	4602      	mov	r2, r0
 8004542:	460b      	mov	r3, r1
 8004544:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004548:	f7fc fa38 	bl	80009bc <__aeabi_dcmplt>
 800454c:	2800      	cmp	r0, #0
 800454e:	f43f af2f 	beq.w	80043b0 <_dtoa_r+0x448>
 8004552:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8004556:	1e6a      	subs	r2, r5, #1
 8004558:	2b30      	cmp	r3, #48	; 0x30
 800455a:	d001      	beq.n	8004560 <_dtoa_r+0x5f8>
 800455c:	46ba      	mov	sl, r7
 800455e:	e04a      	b.n	80045f6 <_dtoa_r+0x68e>
 8004560:	4615      	mov	r5, r2
 8004562:	e7f6      	b.n	8004552 <_dtoa_r+0x5ea>
 8004564:	4b05      	ldr	r3, [pc, #20]	; (800457c <_dtoa_r+0x614>)
 8004566:	f7fb ffb7 	bl	80004d8 <__aeabi_dmul>
 800456a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800456e:	e7bd      	b.n	80044ec <_dtoa_r+0x584>
 8004570:	08006550 	.word	0x08006550
 8004574:	08006528 	.word	0x08006528
 8004578:	3ff00000 	.word	0x3ff00000
 800457c:	40240000 	.word	0x40240000
 8004580:	401c0000 	.word	0x401c0000
 8004584:	40140000 	.word	0x40140000
 8004588:	3fe00000 	.word	0x3fe00000
 800458c:	9d06      	ldr	r5, [sp, #24]
 800458e:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8004592:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004596:	4630      	mov	r0, r6
 8004598:	4639      	mov	r1, r7
 800459a:	f7fc f8c7 	bl	800072c <__aeabi_ddiv>
 800459e:	f7fc fa4b 	bl	8000a38 <__aeabi_d2iz>
 80045a2:	4681      	mov	r9, r0
 80045a4:	f7fb ff2e 	bl	8000404 <__aeabi_i2d>
 80045a8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80045ac:	f7fb ff94 	bl	80004d8 <__aeabi_dmul>
 80045b0:	4602      	mov	r2, r0
 80045b2:	460b      	mov	r3, r1
 80045b4:	4630      	mov	r0, r6
 80045b6:	4639      	mov	r1, r7
 80045b8:	f7fb fdd6 	bl	8000168 <__aeabi_dsub>
 80045bc:	f109 0630 	add.w	r6, r9, #48	; 0x30
 80045c0:	f805 6b01 	strb.w	r6, [r5], #1
 80045c4:	9e06      	ldr	r6, [sp, #24]
 80045c6:	4602      	mov	r2, r0
 80045c8:	1bae      	subs	r6, r5, r6
 80045ca:	45b0      	cmp	r8, r6
 80045cc:	460b      	mov	r3, r1
 80045ce:	d135      	bne.n	800463c <_dtoa_r+0x6d4>
 80045d0:	f7fb fdcc 	bl	800016c <__adddf3>
 80045d4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80045d8:	4606      	mov	r6, r0
 80045da:	460f      	mov	r7, r1
 80045dc:	f7fc fa0c 	bl	80009f8 <__aeabi_dcmpgt>
 80045e0:	b9c8      	cbnz	r0, 8004616 <_dtoa_r+0x6ae>
 80045e2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80045e6:	4630      	mov	r0, r6
 80045e8:	4639      	mov	r1, r7
 80045ea:	f7fc f9dd 	bl	80009a8 <__aeabi_dcmpeq>
 80045ee:	b110      	cbz	r0, 80045f6 <_dtoa_r+0x68e>
 80045f0:	f019 0f01 	tst.w	r9, #1
 80045f4:	d10f      	bne.n	8004616 <_dtoa_r+0x6ae>
 80045f6:	4659      	mov	r1, fp
 80045f8:	4620      	mov	r0, r4
 80045fa:	f000 ffea 	bl	80055d2 <_Bfree>
 80045fe:	2300      	movs	r3, #0
 8004600:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8004602:	702b      	strb	r3, [r5, #0]
 8004604:	f10a 0301 	add.w	r3, sl, #1
 8004608:	6013      	str	r3, [r2, #0]
 800460a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800460c:	2b00      	cmp	r3, #0
 800460e:	f43f acf3 	beq.w	8003ff8 <_dtoa_r+0x90>
 8004612:	601d      	str	r5, [r3, #0]
 8004614:	e4f0      	b.n	8003ff8 <_dtoa_r+0x90>
 8004616:	4657      	mov	r7, sl
 8004618:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800461c:	1e6b      	subs	r3, r5, #1
 800461e:	2a39      	cmp	r2, #57	; 0x39
 8004620:	d106      	bne.n	8004630 <_dtoa_r+0x6c8>
 8004622:	9a06      	ldr	r2, [sp, #24]
 8004624:	429a      	cmp	r2, r3
 8004626:	d107      	bne.n	8004638 <_dtoa_r+0x6d0>
 8004628:	2330      	movs	r3, #48	; 0x30
 800462a:	7013      	strb	r3, [r2, #0]
 800462c:	4613      	mov	r3, r2
 800462e:	3701      	adds	r7, #1
 8004630:	781a      	ldrb	r2, [r3, #0]
 8004632:	3201      	adds	r2, #1
 8004634:	701a      	strb	r2, [r3, #0]
 8004636:	e791      	b.n	800455c <_dtoa_r+0x5f4>
 8004638:	461d      	mov	r5, r3
 800463a:	e7ed      	b.n	8004618 <_dtoa_r+0x6b0>
 800463c:	2200      	movs	r2, #0
 800463e:	4b99      	ldr	r3, [pc, #612]	; (80048a4 <_dtoa_r+0x93c>)
 8004640:	f7fb ff4a 	bl	80004d8 <__aeabi_dmul>
 8004644:	2200      	movs	r2, #0
 8004646:	2300      	movs	r3, #0
 8004648:	4606      	mov	r6, r0
 800464a:	460f      	mov	r7, r1
 800464c:	f7fc f9ac 	bl	80009a8 <__aeabi_dcmpeq>
 8004650:	2800      	cmp	r0, #0
 8004652:	d09e      	beq.n	8004592 <_dtoa_r+0x62a>
 8004654:	e7cf      	b.n	80045f6 <_dtoa_r+0x68e>
 8004656:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004658:	2a00      	cmp	r2, #0
 800465a:	f000 8088 	beq.w	800476e <_dtoa_r+0x806>
 800465e:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8004660:	2a01      	cmp	r2, #1
 8004662:	dc6d      	bgt.n	8004740 <_dtoa_r+0x7d8>
 8004664:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8004666:	2a00      	cmp	r2, #0
 8004668:	d066      	beq.n	8004738 <_dtoa_r+0x7d0>
 800466a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800466e:	464d      	mov	r5, r9
 8004670:	9e08      	ldr	r6, [sp, #32]
 8004672:	9a07      	ldr	r2, [sp, #28]
 8004674:	2101      	movs	r1, #1
 8004676:	441a      	add	r2, r3
 8004678:	4620      	mov	r0, r4
 800467a:	4499      	add	r9, r3
 800467c:	9207      	str	r2, [sp, #28]
 800467e:	f001 f886 	bl	800578e <__i2b>
 8004682:	4607      	mov	r7, r0
 8004684:	2d00      	cmp	r5, #0
 8004686:	dd0b      	ble.n	80046a0 <_dtoa_r+0x738>
 8004688:	9b07      	ldr	r3, [sp, #28]
 800468a:	2b00      	cmp	r3, #0
 800468c:	dd08      	ble.n	80046a0 <_dtoa_r+0x738>
 800468e:	42ab      	cmp	r3, r5
 8004690:	bfa8      	it	ge
 8004692:	462b      	movge	r3, r5
 8004694:	9a07      	ldr	r2, [sp, #28]
 8004696:	eba9 0903 	sub.w	r9, r9, r3
 800469a:	1aed      	subs	r5, r5, r3
 800469c:	1ad3      	subs	r3, r2, r3
 800469e:	9307      	str	r3, [sp, #28]
 80046a0:	9b08      	ldr	r3, [sp, #32]
 80046a2:	b1eb      	cbz	r3, 80046e0 <_dtoa_r+0x778>
 80046a4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d065      	beq.n	8004776 <_dtoa_r+0x80e>
 80046aa:	b18e      	cbz	r6, 80046d0 <_dtoa_r+0x768>
 80046ac:	4639      	mov	r1, r7
 80046ae:	4632      	mov	r2, r6
 80046b0:	4620      	mov	r0, r4
 80046b2:	f001 f90b 	bl	80058cc <__pow5mult>
 80046b6:	465a      	mov	r2, fp
 80046b8:	4601      	mov	r1, r0
 80046ba:	4607      	mov	r7, r0
 80046bc:	4620      	mov	r0, r4
 80046be:	f001 f86f 	bl	80057a0 <__multiply>
 80046c2:	4659      	mov	r1, fp
 80046c4:	900a      	str	r0, [sp, #40]	; 0x28
 80046c6:	4620      	mov	r0, r4
 80046c8:	f000 ff83 	bl	80055d2 <_Bfree>
 80046cc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80046ce:	469b      	mov	fp, r3
 80046d0:	9b08      	ldr	r3, [sp, #32]
 80046d2:	1b9a      	subs	r2, r3, r6
 80046d4:	d004      	beq.n	80046e0 <_dtoa_r+0x778>
 80046d6:	4659      	mov	r1, fp
 80046d8:	4620      	mov	r0, r4
 80046da:	f001 f8f7 	bl	80058cc <__pow5mult>
 80046de:	4683      	mov	fp, r0
 80046e0:	2101      	movs	r1, #1
 80046e2:	4620      	mov	r0, r4
 80046e4:	f001 f853 	bl	800578e <__i2b>
 80046e8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80046ea:	4606      	mov	r6, r0
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	f000 81c6 	beq.w	8004a7e <_dtoa_r+0xb16>
 80046f2:	461a      	mov	r2, r3
 80046f4:	4601      	mov	r1, r0
 80046f6:	4620      	mov	r0, r4
 80046f8:	f001 f8e8 	bl	80058cc <__pow5mult>
 80046fc:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80046fe:	4606      	mov	r6, r0
 8004700:	2b01      	cmp	r3, #1
 8004702:	dc3e      	bgt.n	8004782 <_dtoa_r+0x81a>
 8004704:	9b02      	ldr	r3, [sp, #8]
 8004706:	2b00      	cmp	r3, #0
 8004708:	d137      	bne.n	800477a <_dtoa_r+0x812>
 800470a:	9b03      	ldr	r3, [sp, #12]
 800470c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004710:	2b00      	cmp	r3, #0
 8004712:	d134      	bne.n	800477e <_dtoa_r+0x816>
 8004714:	9b03      	ldr	r3, [sp, #12]
 8004716:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800471a:	0d1b      	lsrs	r3, r3, #20
 800471c:	051b      	lsls	r3, r3, #20
 800471e:	b12b      	cbz	r3, 800472c <_dtoa_r+0x7c4>
 8004720:	9b07      	ldr	r3, [sp, #28]
 8004722:	f109 0901 	add.w	r9, r9, #1
 8004726:	3301      	adds	r3, #1
 8004728:	9307      	str	r3, [sp, #28]
 800472a:	2301      	movs	r3, #1
 800472c:	9308      	str	r3, [sp, #32]
 800472e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004730:	2b00      	cmp	r3, #0
 8004732:	d128      	bne.n	8004786 <_dtoa_r+0x81e>
 8004734:	2001      	movs	r0, #1
 8004736:	e02e      	b.n	8004796 <_dtoa_r+0x82e>
 8004738:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800473a:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800473e:	e796      	b.n	800466e <_dtoa_r+0x706>
 8004740:	9b08      	ldr	r3, [sp, #32]
 8004742:	f108 36ff 	add.w	r6, r8, #4294967295
 8004746:	42b3      	cmp	r3, r6
 8004748:	bfb7      	itett	lt
 800474a:	9b08      	ldrlt	r3, [sp, #32]
 800474c:	1b9e      	subge	r6, r3, r6
 800474e:	1af2      	sublt	r2, r6, r3
 8004750:	9b0c      	ldrlt	r3, [sp, #48]	; 0x30
 8004752:	bfbf      	itttt	lt
 8004754:	9608      	strlt	r6, [sp, #32]
 8004756:	189b      	addlt	r3, r3, r2
 8004758:	930c      	strlt	r3, [sp, #48]	; 0x30
 800475a:	2600      	movlt	r6, #0
 800475c:	f1b8 0f00 	cmp.w	r8, #0
 8004760:	bfb9      	ittee	lt
 8004762:	eba9 0508 	sublt.w	r5, r9, r8
 8004766:	2300      	movlt	r3, #0
 8004768:	464d      	movge	r5, r9
 800476a:	4643      	movge	r3, r8
 800476c:	e781      	b.n	8004672 <_dtoa_r+0x70a>
 800476e:	9e08      	ldr	r6, [sp, #32]
 8004770:	464d      	mov	r5, r9
 8004772:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8004774:	e786      	b.n	8004684 <_dtoa_r+0x71c>
 8004776:	9a08      	ldr	r2, [sp, #32]
 8004778:	e7ad      	b.n	80046d6 <_dtoa_r+0x76e>
 800477a:	2300      	movs	r3, #0
 800477c:	e7d6      	b.n	800472c <_dtoa_r+0x7c4>
 800477e:	9b02      	ldr	r3, [sp, #8]
 8004780:	e7d4      	b.n	800472c <_dtoa_r+0x7c4>
 8004782:	2300      	movs	r3, #0
 8004784:	9308      	str	r3, [sp, #32]
 8004786:	6933      	ldr	r3, [r6, #16]
 8004788:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800478c:	6918      	ldr	r0, [r3, #16]
 800478e:	f000 ffb0 	bl	80056f2 <__hi0bits>
 8004792:	f1c0 0020 	rsb	r0, r0, #32
 8004796:	9b07      	ldr	r3, [sp, #28]
 8004798:	4418      	add	r0, r3
 800479a:	f010 001f 	ands.w	r0, r0, #31
 800479e:	d047      	beq.n	8004830 <_dtoa_r+0x8c8>
 80047a0:	f1c0 0320 	rsb	r3, r0, #32
 80047a4:	2b04      	cmp	r3, #4
 80047a6:	dd3b      	ble.n	8004820 <_dtoa_r+0x8b8>
 80047a8:	9b07      	ldr	r3, [sp, #28]
 80047aa:	f1c0 001c 	rsb	r0, r0, #28
 80047ae:	4481      	add	r9, r0
 80047b0:	4405      	add	r5, r0
 80047b2:	4403      	add	r3, r0
 80047b4:	9307      	str	r3, [sp, #28]
 80047b6:	f1b9 0f00 	cmp.w	r9, #0
 80047ba:	dd05      	ble.n	80047c8 <_dtoa_r+0x860>
 80047bc:	4659      	mov	r1, fp
 80047be:	464a      	mov	r2, r9
 80047c0:	4620      	mov	r0, r4
 80047c2:	f001 f8d1 	bl	8005968 <__lshift>
 80047c6:	4683      	mov	fp, r0
 80047c8:	9b07      	ldr	r3, [sp, #28]
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	dd05      	ble.n	80047da <_dtoa_r+0x872>
 80047ce:	4631      	mov	r1, r6
 80047d0:	461a      	mov	r2, r3
 80047d2:	4620      	mov	r0, r4
 80047d4:	f001 f8c8 	bl	8005968 <__lshift>
 80047d8:	4606      	mov	r6, r0
 80047da:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80047dc:	b353      	cbz	r3, 8004834 <_dtoa_r+0x8cc>
 80047de:	4631      	mov	r1, r6
 80047e0:	4658      	mov	r0, fp
 80047e2:	f001 f915 	bl	8005a10 <__mcmp>
 80047e6:	2800      	cmp	r0, #0
 80047e8:	da24      	bge.n	8004834 <_dtoa_r+0x8cc>
 80047ea:	2300      	movs	r3, #0
 80047ec:	4659      	mov	r1, fp
 80047ee:	220a      	movs	r2, #10
 80047f0:	4620      	mov	r0, r4
 80047f2:	f000 ff05 	bl	8005600 <__multadd>
 80047f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80047f8:	f10a 3aff 	add.w	sl, sl, #4294967295
 80047fc:	4683      	mov	fp, r0
 80047fe:	2b00      	cmp	r3, #0
 8004800:	f000 8144 	beq.w	8004a8c <_dtoa_r+0xb24>
 8004804:	2300      	movs	r3, #0
 8004806:	4639      	mov	r1, r7
 8004808:	220a      	movs	r2, #10
 800480a:	4620      	mov	r0, r4
 800480c:	f000 fef8 	bl	8005600 <__multadd>
 8004810:	9b04      	ldr	r3, [sp, #16]
 8004812:	4607      	mov	r7, r0
 8004814:	2b00      	cmp	r3, #0
 8004816:	dc4d      	bgt.n	80048b4 <_dtoa_r+0x94c>
 8004818:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800481a:	2b02      	cmp	r3, #2
 800481c:	dd4a      	ble.n	80048b4 <_dtoa_r+0x94c>
 800481e:	e011      	b.n	8004844 <_dtoa_r+0x8dc>
 8004820:	d0c9      	beq.n	80047b6 <_dtoa_r+0x84e>
 8004822:	9a07      	ldr	r2, [sp, #28]
 8004824:	331c      	adds	r3, #28
 8004826:	441a      	add	r2, r3
 8004828:	4499      	add	r9, r3
 800482a:	441d      	add	r5, r3
 800482c:	4613      	mov	r3, r2
 800482e:	e7c1      	b.n	80047b4 <_dtoa_r+0x84c>
 8004830:	4603      	mov	r3, r0
 8004832:	e7f6      	b.n	8004822 <_dtoa_r+0x8ba>
 8004834:	f1b8 0f00 	cmp.w	r8, #0
 8004838:	dc36      	bgt.n	80048a8 <_dtoa_r+0x940>
 800483a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800483c:	2b02      	cmp	r3, #2
 800483e:	dd33      	ble.n	80048a8 <_dtoa_r+0x940>
 8004840:	f8cd 8010 	str.w	r8, [sp, #16]
 8004844:	9b04      	ldr	r3, [sp, #16]
 8004846:	b963      	cbnz	r3, 8004862 <_dtoa_r+0x8fa>
 8004848:	4631      	mov	r1, r6
 800484a:	2205      	movs	r2, #5
 800484c:	4620      	mov	r0, r4
 800484e:	f000 fed7 	bl	8005600 <__multadd>
 8004852:	4601      	mov	r1, r0
 8004854:	4606      	mov	r6, r0
 8004856:	4658      	mov	r0, fp
 8004858:	f001 f8da 	bl	8005a10 <__mcmp>
 800485c:	2800      	cmp	r0, #0
 800485e:	f73f add3 	bgt.w	8004408 <_dtoa_r+0x4a0>
 8004862:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8004864:	9d06      	ldr	r5, [sp, #24]
 8004866:	ea6f 0a03 	mvn.w	sl, r3
 800486a:	f04f 0900 	mov.w	r9, #0
 800486e:	4631      	mov	r1, r6
 8004870:	4620      	mov	r0, r4
 8004872:	f000 feae 	bl	80055d2 <_Bfree>
 8004876:	2f00      	cmp	r7, #0
 8004878:	f43f aebd 	beq.w	80045f6 <_dtoa_r+0x68e>
 800487c:	f1b9 0f00 	cmp.w	r9, #0
 8004880:	d005      	beq.n	800488e <_dtoa_r+0x926>
 8004882:	45b9      	cmp	r9, r7
 8004884:	d003      	beq.n	800488e <_dtoa_r+0x926>
 8004886:	4649      	mov	r1, r9
 8004888:	4620      	mov	r0, r4
 800488a:	f000 fea2 	bl	80055d2 <_Bfree>
 800488e:	4639      	mov	r1, r7
 8004890:	4620      	mov	r0, r4
 8004892:	f000 fe9e 	bl	80055d2 <_Bfree>
 8004896:	e6ae      	b.n	80045f6 <_dtoa_r+0x68e>
 8004898:	2600      	movs	r6, #0
 800489a:	4637      	mov	r7, r6
 800489c:	e7e1      	b.n	8004862 <_dtoa_r+0x8fa>
 800489e:	46ba      	mov	sl, r7
 80048a0:	4637      	mov	r7, r6
 80048a2:	e5b1      	b.n	8004408 <_dtoa_r+0x4a0>
 80048a4:	40240000 	.word	0x40240000
 80048a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80048aa:	f8cd 8010 	str.w	r8, [sp, #16]
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	f000 80f3 	beq.w	8004a9a <_dtoa_r+0xb32>
 80048b4:	2d00      	cmp	r5, #0
 80048b6:	dd05      	ble.n	80048c4 <_dtoa_r+0x95c>
 80048b8:	4639      	mov	r1, r7
 80048ba:	462a      	mov	r2, r5
 80048bc:	4620      	mov	r0, r4
 80048be:	f001 f853 	bl	8005968 <__lshift>
 80048c2:	4607      	mov	r7, r0
 80048c4:	9b08      	ldr	r3, [sp, #32]
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d04c      	beq.n	8004964 <_dtoa_r+0x9fc>
 80048ca:	6879      	ldr	r1, [r7, #4]
 80048cc:	4620      	mov	r0, r4
 80048ce:	f000 fe4c 	bl	800556a <_Balloc>
 80048d2:	4605      	mov	r5, r0
 80048d4:	693a      	ldr	r2, [r7, #16]
 80048d6:	f107 010c 	add.w	r1, r7, #12
 80048da:	3202      	adds	r2, #2
 80048dc:	0092      	lsls	r2, r2, #2
 80048de:	300c      	adds	r0, #12
 80048e0:	f000 fe38 	bl	8005554 <memcpy>
 80048e4:	2201      	movs	r2, #1
 80048e6:	4629      	mov	r1, r5
 80048e8:	4620      	mov	r0, r4
 80048ea:	f001 f83d 	bl	8005968 <__lshift>
 80048ee:	46b9      	mov	r9, r7
 80048f0:	4607      	mov	r7, r0
 80048f2:	9b06      	ldr	r3, [sp, #24]
 80048f4:	9307      	str	r3, [sp, #28]
 80048f6:	9b02      	ldr	r3, [sp, #8]
 80048f8:	f003 0301 	and.w	r3, r3, #1
 80048fc:	9308      	str	r3, [sp, #32]
 80048fe:	4631      	mov	r1, r6
 8004900:	4658      	mov	r0, fp
 8004902:	f7ff faa3 	bl	8003e4c <quorem>
 8004906:	4649      	mov	r1, r9
 8004908:	4605      	mov	r5, r0
 800490a:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800490e:	4658      	mov	r0, fp
 8004910:	f001 f87e 	bl	8005a10 <__mcmp>
 8004914:	463a      	mov	r2, r7
 8004916:	9002      	str	r0, [sp, #8]
 8004918:	4631      	mov	r1, r6
 800491a:	4620      	mov	r0, r4
 800491c:	f001 f892 	bl	8005a44 <__mdiff>
 8004920:	68c3      	ldr	r3, [r0, #12]
 8004922:	4602      	mov	r2, r0
 8004924:	bb03      	cbnz	r3, 8004968 <_dtoa_r+0xa00>
 8004926:	4601      	mov	r1, r0
 8004928:	9009      	str	r0, [sp, #36]	; 0x24
 800492a:	4658      	mov	r0, fp
 800492c:	f001 f870 	bl	8005a10 <__mcmp>
 8004930:	4603      	mov	r3, r0
 8004932:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004934:	4611      	mov	r1, r2
 8004936:	4620      	mov	r0, r4
 8004938:	9309      	str	r3, [sp, #36]	; 0x24
 800493a:	f000 fe4a 	bl	80055d2 <_Bfree>
 800493e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004940:	b9a3      	cbnz	r3, 800496c <_dtoa_r+0xa04>
 8004942:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8004944:	b992      	cbnz	r2, 800496c <_dtoa_r+0xa04>
 8004946:	9a08      	ldr	r2, [sp, #32]
 8004948:	b982      	cbnz	r2, 800496c <_dtoa_r+0xa04>
 800494a:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800494e:	d029      	beq.n	80049a4 <_dtoa_r+0xa3c>
 8004950:	9b02      	ldr	r3, [sp, #8]
 8004952:	2b00      	cmp	r3, #0
 8004954:	dd01      	ble.n	800495a <_dtoa_r+0x9f2>
 8004956:	f105 0831 	add.w	r8, r5, #49	; 0x31
 800495a:	9b07      	ldr	r3, [sp, #28]
 800495c:	1c5d      	adds	r5, r3, #1
 800495e:	f883 8000 	strb.w	r8, [r3]
 8004962:	e784      	b.n	800486e <_dtoa_r+0x906>
 8004964:	4638      	mov	r0, r7
 8004966:	e7c2      	b.n	80048ee <_dtoa_r+0x986>
 8004968:	2301      	movs	r3, #1
 800496a:	e7e3      	b.n	8004934 <_dtoa_r+0x9cc>
 800496c:	9a02      	ldr	r2, [sp, #8]
 800496e:	2a00      	cmp	r2, #0
 8004970:	db04      	blt.n	800497c <_dtoa_r+0xa14>
 8004972:	d123      	bne.n	80049bc <_dtoa_r+0xa54>
 8004974:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8004976:	bb0a      	cbnz	r2, 80049bc <_dtoa_r+0xa54>
 8004978:	9a08      	ldr	r2, [sp, #32]
 800497a:	b9fa      	cbnz	r2, 80049bc <_dtoa_r+0xa54>
 800497c:	2b00      	cmp	r3, #0
 800497e:	ddec      	ble.n	800495a <_dtoa_r+0x9f2>
 8004980:	4659      	mov	r1, fp
 8004982:	2201      	movs	r2, #1
 8004984:	4620      	mov	r0, r4
 8004986:	f000 ffef 	bl	8005968 <__lshift>
 800498a:	4631      	mov	r1, r6
 800498c:	4683      	mov	fp, r0
 800498e:	f001 f83f 	bl	8005a10 <__mcmp>
 8004992:	2800      	cmp	r0, #0
 8004994:	dc03      	bgt.n	800499e <_dtoa_r+0xa36>
 8004996:	d1e0      	bne.n	800495a <_dtoa_r+0x9f2>
 8004998:	f018 0f01 	tst.w	r8, #1
 800499c:	d0dd      	beq.n	800495a <_dtoa_r+0x9f2>
 800499e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80049a2:	d1d8      	bne.n	8004956 <_dtoa_r+0x9ee>
 80049a4:	9b07      	ldr	r3, [sp, #28]
 80049a6:	9a07      	ldr	r2, [sp, #28]
 80049a8:	1c5d      	adds	r5, r3, #1
 80049aa:	2339      	movs	r3, #57	; 0x39
 80049ac:	7013      	strb	r3, [r2, #0]
 80049ae:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80049b2:	1e6a      	subs	r2, r5, #1
 80049b4:	2b39      	cmp	r3, #57	; 0x39
 80049b6:	d04d      	beq.n	8004a54 <_dtoa_r+0xaec>
 80049b8:	3301      	adds	r3, #1
 80049ba:	e052      	b.n	8004a62 <_dtoa_r+0xafa>
 80049bc:	9a07      	ldr	r2, [sp, #28]
 80049be:	2b00      	cmp	r3, #0
 80049c0:	f102 0501 	add.w	r5, r2, #1
 80049c4:	dd06      	ble.n	80049d4 <_dtoa_r+0xa6c>
 80049c6:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80049ca:	d0eb      	beq.n	80049a4 <_dtoa_r+0xa3c>
 80049cc:	f108 0801 	add.w	r8, r8, #1
 80049d0:	9b07      	ldr	r3, [sp, #28]
 80049d2:	e7c4      	b.n	800495e <_dtoa_r+0x9f6>
 80049d4:	9b06      	ldr	r3, [sp, #24]
 80049d6:	9a04      	ldr	r2, [sp, #16]
 80049d8:	1aeb      	subs	r3, r5, r3
 80049da:	4293      	cmp	r3, r2
 80049dc:	f805 8c01 	strb.w	r8, [r5, #-1]
 80049e0:	d021      	beq.n	8004a26 <_dtoa_r+0xabe>
 80049e2:	4659      	mov	r1, fp
 80049e4:	2300      	movs	r3, #0
 80049e6:	220a      	movs	r2, #10
 80049e8:	4620      	mov	r0, r4
 80049ea:	f000 fe09 	bl	8005600 <__multadd>
 80049ee:	45b9      	cmp	r9, r7
 80049f0:	4683      	mov	fp, r0
 80049f2:	f04f 0300 	mov.w	r3, #0
 80049f6:	f04f 020a 	mov.w	r2, #10
 80049fa:	4649      	mov	r1, r9
 80049fc:	4620      	mov	r0, r4
 80049fe:	d105      	bne.n	8004a0c <_dtoa_r+0xaa4>
 8004a00:	f000 fdfe 	bl	8005600 <__multadd>
 8004a04:	4681      	mov	r9, r0
 8004a06:	4607      	mov	r7, r0
 8004a08:	9507      	str	r5, [sp, #28]
 8004a0a:	e778      	b.n	80048fe <_dtoa_r+0x996>
 8004a0c:	f000 fdf8 	bl	8005600 <__multadd>
 8004a10:	4639      	mov	r1, r7
 8004a12:	4681      	mov	r9, r0
 8004a14:	2300      	movs	r3, #0
 8004a16:	220a      	movs	r2, #10
 8004a18:	4620      	mov	r0, r4
 8004a1a:	f000 fdf1 	bl	8005600 <__multadd>
 8004a1e:	4607      	mov	r7, r0
 8004a20:	e7f2      	b.n	8004a08 <_dtoa_r+0xaa0>
 8004a22:	f04f 0900 	mov.w	r9, #0
 8004a26:	4659      	mov	r1, fp
 8004a28:	2201      	movs	r2, #1
 8004a2a:	4620      	mov	r0, r4
 8004a2c:	f000 ff9c 	bl	8005968 <__lshift>
 8004a30:	4631      	mov	r1, r6
 8004a32:	4683      	mov	fp, r0
 8004a34:	f000 ffec 	bl	8005a10 <__mcmp>
 8004a38:	2800      	cmp	r0, #0
 8004a3a:	dcb8      	bgt.n	80049ae <_dtoa_r+0xa46>
 8004a3c:	d102      	bne.n	8004a44 <_dtoa_r+0xadc>
 8004a3e:	f018 0f01 	tst.w	r8, #1
 8004a42:	d1b4      	bne.n	80049ae <_dtoa_r+0xa46>
 8004a44:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8004a48:	1e6a      	subs	r2, r5, #1
 8004a4a:	2b30      	cmp	r3, #48	; 0x30
 8004a4c:	f47f af0f 	bne.w	800486e <_dtoa_r+0x906>
 8004a50:	4615      	mov	r5, r2
 8004a52:	e7f7      	b.n	8004a44 <_dtoa_r+0xadc>
 8004a54:	9b06      	ldr	r3, [sp, #24]
 8004a56:	4293      	cmp	r3, r2
 8004a58:	d105      	bne.n	8004a66 <_dtoa_r+0xafe>
 8004a5a:	2331      	movs	r3, #49	; 0x31
 8004a5c:	9a06      	ldr	r2, [sp, #24]
 8004a5e:	f10a 0a01 	add.w	sl, sl, #1
 8004a62:	7013      	strb	r3, [r2, #0]
 8004a64:	e703      	b.n	800486e <_dtoa_r+0x906>
 8004a66:	4615      	mov	r5, r2
 8004a68:	e7a1      	b.n	80049ae <_dtoa_r+0xa46>
 8004a6a:	4b17      	ldr	r3, [pc, #92]	; (8004ac8 <_dtoa_r+0xb60>)
 8004a6c:	f7ff bae1 	b.w	8004032 <_dtoa_r+0xca>
 8004a70:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	f47f aabb 	bne.w	8003fee <_dtoa_r+0x86>
 8004a78:	4b14      	ldr	r3, [pc, #80]	; (8004acc <_dtoa_r+0xb64>)
 8004a7a:	f7ff bada 	b.w	8004032 <_dtoa_r+0xca>
 8004a7e:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8004a80:	2b01      	cmp	r3, #1
 8004a82:	f77f ae3f 	ble.w	8004704 <_dtoa_r+0x79c>
 8004a86:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004a88:	9308      	str	r3, [sp, #32]
 8004a8a:	e653      	b.n	8004734 <_dtoa_r+0x7cc>
 8004a8c:	9b04      	ldr	r3, [sp, #16]
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	dc03      	bgt.n	8004a9a <_dtoa_r+0xb32>
 8004a92:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8004a94:	2b02      	cmp	r3, #2
 8004a96:	f73f aed5 	bgt.w	8004844 <_dtoa_r+0x8dc>
 8004a9a:	9d06      	ldr	r5, [sp, #24]
 8004a9c:	4631      	mov	r1, r6
 8004a9e:	4658      	mov	r0, fp
 8004aa0:	f7ff f9d4 	bl	8003e4c <quorem>
 8004aa4:	9b06      	ldr	r3, [sp, #24]
 8004aa6:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8004aaa:	f805 8b01 	strb.w	r8, [r5], #1
 8004aae:	9a04      	ldr	r2, [sp, #16]
 8004ab0:	1aeb      	subs	r3, r5, r3
 8004ab2:	429a      	cmp	r2, r3
 8004ab4:	ddb5      	ble.n	8004a22 <_dtoa_r+0xaba>
 8004ab6:	4659      	mov	r1, fp
 8004ab8:	2300      	movs	r3, #0
 8004aba:	220a      	movs	r2, #10
 8004abc:	4620      	mov	r0, r4
 8004abe:	f000 fd9f 	bl	8005600 <__multadd>
 8004ac2:	4683      	mov	fp, r0
 8004ac4:	e7ea      	b.n	8004a9c <_dtoa_r+0xb34>
 8004ac6:	bf00      	nop
 8004ac8:	08006428 	.word	0x08006428
 8004acc:	080064a8 	.word	0x080064a8

08004ad0 <__sflush_r>:
 8004ad0:	898a      	ldrh	r2, [r1, #12]
 8004ad2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004ad6:	4605      	mov	r5, r0
 8004ad8:	0710      	lsls	r0, r2, #28
 8004ada:	460c      	mov	r4, r1
 8004adc:	d458      	bmi.n	8004b90 <__sflush_r+0xc0>
 8004ade:	684b      	ldr	r3, [r1, #4]
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	dc05      	bgt.n	8004af0 <__sflush_r+0x20>
 8004ae4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	dc02      	bgt.n	8004af0 <__sflush_r+0x20>
 8004aea:	2000      	movs	r0, #0
 8004aec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004af0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004af2:	2e00      	cmp	r6, #0
 8004af4:	d0f9      	beq.n	8004aea <__sflush_r+0x1a>
 8004af6:	2300      	movs	r3, #0
 8004af8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004afc:	682f      	ldr	r7, [r5, #0]
 8004afe:	6a21      	ldr	r1, [r4, #32]
 8004b00:	602b      	str	r3, [r5, #0]
 8004b02:	d032      	beq.n	8004b6a <__sflush_r+0x9a>
 8004b04:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004b06:	89a3      	ldrh	r3, [r4, #12]
 8004b08:	075a      	lsls	r2, r3, #29
 8004b0a:	d505      	bpl.n	8004b18 <__sflush_r+0x48>
 8004b0c:	6863      	ldr	r3, [r4, #4]
 8004b0e:	1ac0      	subs	r0, r0, r3
 8004b10:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004b12:	b10b      	cbz	r3, 8004b18 <__sflush_r+0x48>
 8004b14:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004b16:	1ac0      	subs	r0, r0, r3
 8004b18:	2300      	movs	r3, #0
 8004b1a:	4602      	mov	r2, r0
 8004b1c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004b1e:	6a21      	ldr	r1, [r4, #32]
 8004b20:	4628      	mov	r0, r5
 8004b22:	47b0      	blx	r6
 8004b24:	1c43      	adds	r3, r0, #1
 8004b26:	89a3      	ldrh	r3, [r4, #12]
 8004b28:	d106      	bne.n	8004b38 <__sflush_r+0x68>
 8004b2a:	6829      	ldr	r1, [r5, #0]
 8004b2c:	291d      	cmp	r1, #29
 8004b2e:	d848      	bhi.n	8004bc2 <__sflush_r+0xf2>
 8004b30:	4a29      	ldr	r2, [pc, #164]	; (8004bd8 <__sflush_r+0x108>)
 8004b32:	40ca      	lsrs	r2, r1
 8004b34:	07d6      	lsls	r6, r2, #31
 8004b36:	d544      	bpl.n	8004bc2 <__sflush_r+0xf2>
 8004b38:	2200      	movs	r2, #0
 8004b3a:	6062      	str	r2, [r4, #4]
 8004b3c:	6922      	ldr	r2, [r4, #16]
 8004b3e:	04d9      	lsls	r1, r3, #19
 8004b40:	6022      	str	r2, [r4, #0]
 8004b42:	d504      	bpl.n	8004b4e <__sflush_r+0x7e>
 8004b44:	1c42      	adds	r2, r0, #1
 8004b46:	d101      	bne.n	8004b4c <__sflush_r+0x7c>
 8004b48:	682b      	ldr	r3, [r5, #0]
 8004b4a:	b903      	cbnz	r3, 8004b4e <__sflush_r+0x7e>
 8004b4c:	6560      	str	r0, [r4, #84]	; 0x54
 8004b4e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004b50:	602f      	str	r7, [r5, #0]
 8004b52:	2900      	cmp	r1, #0
 8004b54:	d0c9      	beq.n	8004aea <__sflush_r+0x1a>
 8004b56:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004b5a:	4299      	cmp	r1, r3
 8004b5c:	d002      	beq.n	8004b64 <__sflush_r+0x94>
 8004b5e:	4628      	mov	r0, r5
 8004b60:	f001 f90a 	bl	8005d78 <_free_r>
 8004b64:	2000      	movs	r0, #0
 8004b66:	6360      	str	r0, [r4, #52]	; 0x34
 8004b68:	e7c0      	b.n	8004aec <__sflush_r+0x1c>
 8004b6a:	2301      	movs	r3, #1
 8004b6c:	4628      	mov	r0, r5
 8004b6e:	47b0      	blx	r6
 8004b70:	1c41      	adds	r1, r0, #1
 8004b72:	d1c8      	bne.n	8004b06 <__sflush_r+0x36>
 8004b74:	682b      	ldr	r3, [r5, #0]
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d0c5      	beq.n	8004b06 <__sflush_r+0x36>
 8004b7a:	2b1d      	cmp	r3, #29
 8004b7c:	d001      	beq.n	8004b82 <__sflush_r+0xb2>
 8004b7e:	2b16      	cmp	r3, #22
 8004b80:	d101      	bne.n	8004b86 <__sflush_r+0xb6>
 8004b82:	602f      	str	r7, [r5, #0]
 8004b84:	e7b1      	b.n	8004aea <__sflush_r+0x1a>
 8004b86:	89a3      	ldrh	r3, [r4, #12]
 8004b88:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004b8c:	81a3      	strh	r3, [r4, #12]
 8004b8e:	e7ad      	b.n	8004aec <__sflush_r+0x1c>
 8004b90:	690f      	ldr	r7, [r1, #16]
 8004b92:	2f00      	cmp	r7, #0
 8004b94:	d0a9      	beq.n	8004aea <__sflush_r+0x1a>
 8004b96:	0793      	lsls	r3, r2, #30
 8004b98:	bf18      	it	ne
 8004b9a:	2300      	movne	r3, #0
 8004b9c:	680e      	ldr	r6, [r1, #0]
 8004b9e:	bf08      	it	eq
 8004ba0:	694b      	ldreq	r3, [r1, #20]
 8004ba2:	eba6 0807 	sub.w	r8, r6, r7
 8004ba6:	600f      	str	r7, [r1, #0]
 8004ba8:	608b      	str	r3, [r1, #8]
 8004baa:	f1b8 0f00 	cmp.w	r8, #0
 8004bae:	dd9c      	ble.n	8004aea <__sflush_r+0x1a>
 8004bb0:	4643      	mov	r3, r8
 8004bb2:	463a      	mov	r2, r7
 8004bb4:	6a21      	ldr	r1, [r4, #32]
 8004bb6:	4628      	mov	r0, r5
 8004bb8:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004bba:	47b0      	blx	r6
 8004bbc:	2800      	cmp	r0, #0
 8004bbe:	dc06      	bgt.n	8004bce <__sflush_r+0xfe>
 8004bc0:	89a3      	ldrh	r3, [r4, #12]
 8004bc2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004bc6:	81a3      	strh	r3, [r4, #12]
 8004bc8:	f04f 30ff 	mov.w	r0, #4294967295
 8004bcc:	e78e      	b.n	8004aec <__sflush_r+0x1c>
 8004bce:	4407      	add	r7, r0
 8004bd0:	eba8 0800 	sub.w	r8, r8, r0
 8004bd4:	e7e9      	b.n	8004baa <__sflush_r+0xda>
 8004bd6:	bf00      	nop
 8004bd8:	20400001 	.word	0x20400001

08004bdc <_fflush_r>:
 8004bdc:	b538      	push	{r3, r4, r5, lr}
 8004bde:	690b      	ldr	r3, [r1, #16]
 8004be0:	4605      	mov	r5, r0
 8004be2:	460c      	mov	r4, r1
 8004be4:	b1db      	cbz	r3, 8004c1e <_fflush_r+0x42>
 8004be6:	b118      	cbz	r0, 8004bf0 <_fflush_r+0x14>
 8004be8:	6983      	ldr	r3, [r0, #24]
 8004bea:	b90b      	cbnz	r3, 8004bf0 <_fflush_r+0x14>
 8004bec:	f000 f860 	bl	8004cb0 <__sinit>
 8004bf0:	4b0c      	ldr	r3, [pc, #48]	; (8004c24 <_fflush_r+0x48>)
 8004bf2:	429c      	cmp	r4, r3
 8004bf4:	d109      	bne.n	8004c0a <_fflush_r+0x2e>
 8004bf6:	686c      	ldr	r4, [r5, #4]
 8004bf8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004bfc:	b17b      	cbz	r3, 8004c1e <_fflush_r+0x42>
 8004bfe:	4621      	mov	r1, r4
 8004c00:	4628      	mov	r0, r5
 8004c02:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004c06:	f7ff bf63 	b.w	8004ad0 <__sflush_r>
 8004c0a:	4b07      	ldr	r3, [pc, #28]	; (8004c28 <_fflush_r+0x4c>)
 8004c0c:	429c      	cmp	r4, r3
 8004c0e:	d101      	bne.n	8004c14 <_fflush_r+0x38>
 8004c10:	68ac      	ldr	r4, [r5, #8]
 8004c12:	e7f1      	b.n	8004bf8 <_fflush_r+0x1c>
 8004c14:	4b05      	ldr	r3, [pc, #20]	; (8004c2c <_fflush_r+0x50>)
 8004c16:	429c      	cmp	r4, r3
 8004c18:	bf08      	it	eq
 8004c1a:	68ec      	ldreq	r4, [r5, #12]
 8004c1c:	e7ec      	b.n	8004bf8 <_fflush_r+0x1c>
 8004c1e:	2000      	movs	r0, #0
 8004c20:	bd38      	pop	{r3, r4, r5, pc}
 8004c22:	bf00      	nop
 8004c24:	080064d8 	.word	0x080064d8
 8004c28:	080064f8 	.word	0x080064f8
 8004c2c:	080064b8 	.word	0x080064b8

08004c30 <std>:
 8004c30:	2300      	movs	r3, #0
 8004c32:	b510      	push	{r4, lr}
 8004c34:	4604      	mov	r4, r0
 8004c36:	e9c0 3300 	strd	r3, r3, [r0]
 8004c3a:	6083      	str	r3, [r0, #8]
 8004c3c:	8181      	strh	r1, [r0, #12]
 8004c3e:	6643      	str	r3, [r0, #100]	; 0x64
 8004c40:	81c2      	strh	r2, [r0, #14]
 8004c42:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004c46:	6183      	str	r3, [r0, #24]
 8004c48:	4619      	mov	r1, r3
 8004c4a:	2208      	movs	r2, #8
 8004c4c:	305c      	adds	r0, #92	; 0x5c
 8004c4e:	f7fd fabd 	bl	80021cc <memset>
 8004c52:	4b05      	ldr	r3, [pc, #20]	; (8004c68 <std+0x38>)
 8004c54:	6224      	str	r4, [r4, #32]
 8004c56:	6263      	str	r3, [r4, #36]	; 0x24
 8004c58:	4b04      	ldr	r3, [pc, #16]	; (8004c6c <std+0x3c>)
 8004c5a:	62a3      	str	r3, [r4, #40]	; 0x28
 8004c5c:	4b04      	ldr	r3, [pc, #16]	; (8004c70 <std+0x40>)
 8004c5e:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004c60:	4b04      	ldr	r3, [pc, #16]	; (8004c74 <std+0x44>)
 8004c62:	6323      	str	r3, [r4, #48]	; 0x30
 8004c64:	bd10      	pop	{r4, pc}
 8004c66:	bf00      	nop
 8004c68:	08006189 	.word	0x08006189
 8004c6c:	080061ab 	.word	0x080061ab
 8004c70:	080061e3 	.word	0x080061e3
 8004c74:	08006207 	.word	0x08006207

08004c78 <_cleanup_r>:
 8004c78:	4901      	ldr	r1, [pc, #4]	; (8004c80 <_cleanup_r+0x8>)
 8004c7a:	f000 b885 	b.w	8004d88 <_fwalk_reent>
 8004c7e:	bf00      	nop
 8004c80:	08004bdd 	.word	0x08004bdd

08004c84 <__sfmoreglue>:
 8004c84:	b570      	push	{r4, r5, r6, lr}
 8004c86:	2568      	movs	r5, #104	; 0x68
 8004c88:	1e4a      	subs	r2, r1, #1
 8004c8a:	4355      	muls	r5, r2
 8004c8c:	460e      	mov	r6, r1
 8004c8e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8004c92:	f001 f8bd 	bl	8005e10 <_malloc_r>
 8004c96:	4604      	mov	r4, r0
 8004c98:	b140      	cbz	r0, 8004cac <__sfmoreglue+0x28>
 8004c9a:	2100      	movs	r1, #0
 8004c9c:	e9c0 1600 	strd	r1, r6, [r0]
 8004ca0:	300c      	adds	r0, #12
 8004ca2:	60a0      	str	r0, [r4, #8]
 8004ca4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8004ca8:	f7fd fa90 	bl	80021cc <memset>
 8004cac:	4620      	mov	r0, r4
 8004cae:	bd70      	pop	{r4, r5, r6, pc}

08004cb0 <__sinit>:
 8004cb0:	6983      	ldr	r3, [r0, #24]
 8004cb2:	b510      	push	{r4, lr}
 8004cb4:	4604      	mov	r4, r0
 8004cb6:	bb33      	cbnz	r3, 8004d06 <__sinit+0x56>
 8004cb8:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8004cbc:	6503      	str	r3, [r0, #80]	; 0x50
 8004cbe:	4b12      	ldr	r3, [pc, #72]	; (8004d08 <__sinit+0x58>)
 8004cc0:	4a12      	ldr	r2, [pc, #72]	; (8004d0c <__sinit+0x5c>)
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	6282      	str	r2, [r0, #40]	; 0x28
 8004cc6:	4298      	cmp	r0, r3
 8004cc8:	bf04      	itt	eq
 8004cca:	2301      	moveq	r3, #1
 8004ccc:	6183      	streq	r3, [r0, #24]
 8004cce:	f000 f81f 	bl	8004d10 <__sfp>
 8004cd2:	6060      	str	r0, [r4, #4]
 8004cd4:	4620      	mov	r0, r4
 8004cd6:	f000 f81b 	bl	8004d10 <__sfp>
 8004cda:	60a0      	str	r0, [r4, #8]
 8004cdc:	4620      	mov	r0, r4
 8004cde:	f000 f817 	bl	8004d10 <__sfp>
 8004ce2:	2200      	movs	r2, #0
 8004ce4:	60e0      	str	r0, [r4, #12]
 8004ce6:	2104      	movs	r1, #4
 8004ce8:	6860      	ldr	r0, [r4, #4]
 8004cea:	f7ff ffa1 	bl	8004c30 <std>
 8004cee:	2201      	movs	r2, #1
 8004cf0:	2109      	movs	r1, #9
 8004cf2:	68a0      	ldr	r0, [r4, #8]
 8004cf4:	f7ff ff9c 	bl	8004c30 <std>
 8004cf8:	2202      	movs	r2, #2
 8004cfa:	2112      	movs	r1, #18
 8004cfc:	68e0      	ldr	r0, [r4, #12]
 8004cfe:	f7ff ff97 	bl	8004c30 <std>
 8004d02:	2301      	movs	r3, #1
 8004d04:	61a3      	str	r3, [r4, #24]
 8004d06:	bd10      	pop	{r4, pc}
 8004d08:	08006414 	.word	0x08006414
 8004d0c:	08004c79 	.word	0x08004c79

08004d10 <__sfp>:
 8004d10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d12:	4b1b      	ldr	r3, [pc, #108]	; (8004d80 <__sfp+0x70>)
 8004d14:	4607      	mov	r7, r0
 8004d16:	681e      	ldr	r6, [r3, #0]
 8004d18:	69b3      	ldr	r3, [r6, #24]
 8004d1a:	b913      	cbnz	r3, 8004d22 <__sfp+0x12>
 8004d1c:	4630      	mov	r0, r6
 8004d1e:	f7ff ffc7 	bl	8004cb0 <__sinit>
 8004d22:	3648      	adds	r6, #72	; 0x48
 8004d24:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8004d28:	3b01      	subs	r3, #1
 8004d2a:	d503      	bpl.n	8004d34 <__sfp+0x24>
 8004d2c:	6833      	ldr	r3, [r6, #0]
 8004d2e:	b133      	cbz	r3, 8004d3e <__sfp+0x2e>
 8004d30:	6836      	ldr	r6, [r6, #0]
 8004d32:	e7f7      	b.n	8004d24 <__sfp+0x14>
 8004d34:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8004d38:	b16d      	cbz	r5, 8004d56 <__sfp+0x46>
 8004d3a:	3468      	adds	r4, #104	; 0x68
 8004d3c:	e7f4      	b.n	8004d28 <__sfp+0x18>
 8004d3e:	2104      	movs	r1, #4
 8004d40:	4638      	mov	r0, r7
 8004d42:	f7ff ff9f 	bl	8004c84 <__sfmoreglue>
 8004d46:	6030      	str	r0, [r6, #0]
 8004d48:	2800      	cmp	r0, #0
 8004d4a:	d1f1      	bne.n	8004d30 <__sfp+0x20>
 8004d4c:	230c      	movs	r3, #12
 8004d4e:	4604      	mov	r4, r0
 8004d50:	603b      	str	r3, [r7, #0]
 8004d52:	4620      	mov	r0, r4
 8004d54:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004d56:	4b0b      	ldr	r3, [pc, #44]	; (8004d84 <__sfp+0x74>)
 8004d58:	6665      	str	r5, [r4, #100]	; 0x64
 8004d5a:	e9c4 5500 	strd	r5, r5, [r4]
 8004d5e:	60a5      	str	r5, [r4, #8]
 8004d60:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8004d64:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8004d68:	2208      	movs	r2, #8
 8004d6a:	4629      	mov	r1, r5
 8004d6c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8004d70:	f7fd fa2c 	bl	80021cc <memset>
 8004d74:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8004d78:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8004d7c:	e7e9      	b.n	8004d52 <__sfp+0x42>
 8004d7e:	bf00      	nop
 8004d80:	08006414 	.word	0x08006414
 8004d84:	ffff0001 	.word	0xffff0001

08004d88 <_fwalk_reent>:
 8004d88:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004d8c:	4680      	mov	r8, r0
 8004d8e:	4689      	mov	r9, r1
 8004d90:	2600      	movs	r6, #0
 8004d92:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8004d96:	b914      	cbnz	r4, 8004d9e <_fwalk_reent+0x16>
 8004d98:	4630      	mov	r0, r6
 8004d9a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004d9e:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8004da2:	3f01      	subs	r7, #1
 8004da4:	d501      	bpl.n	8004daa <_fwalk_reent+0x22>
 8004da6:	6824      	ldr	r4, [r4, #0]
 8004da8:	e7f5      	b.n	8004d96 <_fwalk_reent+0xe>
 8004daa:	89ab      	ldrh	r3, [r5, #12]
 8004dac:	2b01      	cmp	r3, #1
 8004dae:	d907      	bls.n	8004dc0 <_fwalk_reent+0x38>
 8004db0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004db4:	3301      	adds	r3, #1
 8004db6:	d003      	beq.n	8004dc0 <_fwalk_reent+0x38>
 8004db8:	4629      	mov	r1, r5
 8004dba:	4640      	mov	r0, r8
 8004dbc:	47c8      	blx	r9
 8004dbe:	4306      	orrs	r6, r0
 8004dc0:	3568      	adds	r5, #104	; 0x68
 8004dc2:	e7ee      	b.n	8004da2 <_fwalk_reent+0x1a>

08004dc4 <rshift>:
 8004dc4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004dc6:	6906      	ldr	r6, [r0, #16]
 8004dc8:	114b      	asrs	r3, r1, #5
 8004dca:	429e      	cmp	r6, r3
 8004dcc:	f100 0414 	add.w	r4, r0, #20
 8004dd0:	dd31      	ble.n	8004e36 <rshift+0x72>
 8004dd2:	f011 011f 	ands.w	r1, r1, #31
 8004dd6:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 8004dda:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 8004dde:	d108      	bne.n	8004df2 <rshift+0x2e>
 8004de0:	4621      	mov	r1, r4
 8004de2:	42b2      	cmp	r2, r6
 8004de4:	460b      	mov	r3, r1
 8004de6:	d211      	bcs.n	8004e0c <rshift+0x48>
 8004de8:	f852 3b04 	ldr.w	r3, [r2], #4
 8004dec:	f841 3b04 	str.w	r3, [r1], #4
 8004df0:	e7f7      	b.n	8004de2 <rshift+0x1e>
 8004df2:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 8004df6:	4623      	mov	r3, r4
 8004df8:	f1c1 0c20 	rsb	ip, r1, #32
 8004dfc:	40cd      	lsrs	r5, r1
 8004dfe:	3204      	adds	r2, #4
 8004e00:	42b2      	cmp	r2, r6
 8004e02:	4617      	mov	r7, r2
 8004e04:	d30d      	bcc.n	8004e22 <rshift+0x5e>
 8004e06:	601d      	str	r5, [r3, #0]
 8004e08:	b105      	cbz	r5, 8004e0c <rshift+0x48>
 8004e0a:	3304      	adds	r3, #4
 8004e0c:	42a3      	cmp	r3, r4
 8004e0e:	eba3 0204 	sub.w	r2, r3, r4
 8004e12:	bf08      	it	eq
 8004e14:	2300      	moveq	r3, #0
 8004e16:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8004e1a:	6102      	str	r2, [r0, #16]
 8004e1c:	bf08      	it	eq
 8004e1e:	6143      	streq	r3, [r0, #20]
 8004e20:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004e22:	683f      	ldr	r7, [r7, #0]
 8004e24:	fa07 f70c 	lsl.w	r7, r7, ip
 8004e28:	433d      	orrs	r5, r7
 8004e2a:	f843 5b04 	str.w	r5, [r3], #4
 8004e2e:	f852 5b04 	ldr.w	r5, [r2], #4
 8004e32:	40cd      	lsrs	r5, r1
 8004e34:	e7e4      	b.n	8004e00 <rshift+0x3c>
 8004e36:	4623      	mov	r3, r4
 8004e38:	e7e8      	b.n	8004e0c <rshift+0x48>

08004e3a <__hexdig_fun>:
 8004e3a:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8004e3e:	2b09      	cmp	r3, #9
 8004e40:	d802      	bhi.n	8004e48 <__hexdig_fun+0xe>
 8004e42:	3820      	subs	r0, #32
 8004e44:	b2c0      	uxtb	r0, r0
 8004e46:	4770      	bx	lr
 8004e48:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8004e4c:	2b05      	cmp	r3, #5
 8004e4e:	d801      	bhi.n	8004e54 <__hexdig_fun+0x1a>
 8004e50:	3847      	subs	r0, #71	; 0x47
 8004e52:	e7f7      	b.n	8004e44 <__hexdig_fun+0xa>
 8004e54:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8004e58:	2b05      	cmp	r3, #5
 8004e5a:	d801      	bhi.n	8004e60 <__hexdig_fun+0x26>
 8004e5c:	3827      	subs	r0, #39	; 0x27
 8004e5e:	e7f1      	b.n	8004e44 <__hexdig_fun+0xa>
 8004e60:	2000      	movs	r0, #0
 8004e62:	4770      	bx	lr

08004e64 <__gethex>:
 8004e64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004e68:	b08b      	sub	sp, #44	; 0x2c
 8004e6a:	9002      	str	r0, [sp, #8]
 8004e6c:	9816      	ldr	r0, [sp, #88]	; 0x58
 8004e6e:	468a      	mov	sl, r1
 8004e70:	4690      	mov	r8, r2
 8004e72:	9306      	str	r3, [sp, #24]
 8004e74:	f000 fad1 	bl	800541a <__localeconv_l>
 8004e78:	6803      	ldr	r3, [r0, #0]
 8004e7a:	f04f 0b00 	mov.w	fp, #0
 8004e7e:	4618      	mov	r0, r3
 8004e80:	9303      	str	r3, [sp, #12]
 8004e82:	f7fb f965 	bl	8000150 <strlen>
 8004e86:	9b03      	ldr	r3, [sp, #12]
 8004e88:	9001      	str	r0, [sp, #4]
 8004e8a:	4403      	add	r3, r0
 8004e8c:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8004e90:	9307      	str	r3, [sp, #28]
 8004e92:	f8da 3000 	ldr.w	r3, [sl]
 8004e96:	3302      	adds	r3, #2
 8004e98:	461f      	mov	r7, r3
 8004e9a:	f813 0b01 	ldrb.w	r0, [r3], #1
 8004e9e:	2830      	cmp	r0, #48	; 0x30
 8004ea0:	d06c      	beq.n	8004f7c <__gethex+0x118>
 8004ea2:	f7ff ffca 	bl	8004e3a <__hexdig_fun>
 8004ea6:	4604      	mov	r4, r0
 8004ea8:	2800      	cmp	r0, #0
 8004eaa:	d16a      	bne.n	8004f82 <__gethex+0x11e>
 8004eac:	9a01      	ldr	r2, [sp, #4]
 8004eae:	9903      	ldr	r1, [sp, #12]
 8004eb0:	4638      	mov	r0, r7
 8004eb2:	f001 f9ac 	bl	800620e <strncmp>
 8004eb6:	2800      	cmp	r0, #0
 8004eb8:	d166      	bne.n	8004f88 <__gethex+0x124>
 8004eba:	9b01      	ldr	r3, [sp, #4]
 8004ebc:	5cf8      	ldrb	r0, [r7, r3]
 8004ebe:	18fe      	adds	r6, r7, r3
 8004ec0:	f7ff ffbb 	bl	8004e3a <__hexdig_fun>
 8004ec4:	2800      	cmp	r0, #0
 8004ec6:	d062      	beq.n	8004f8e <__gethex+0x12a>
 8004ec8:	4633      	mov	r3, r6
 8004eca:	7818      	ldrb	r0, [r3, #0]
 8004ecc:	461f      	mov	r7, r3
 8004ece:	2830      	cmp	r0, #48	; 0x30
 8004ed0:	f103 0301 	add.w	r3, r3, #1
 8004ed4:	d0f9      	beq.n	8004eca <__gethex+0x66>
 8004ed6:	f7ff ffb0 	bl	8004e3a <__hexdig_fun>
 8004eda:	fab0 f580 	clz	r5, r0
 8004ede:	4634      	mov	r4, r6
 8004ee0:	f04f 0b01 	mov.w	fp, #1
 8004ee4:	096d      	lsrs	r5, r5, #5
 8004ee6:	463a      	mov	r2, r7
 8004ee8:	4616      	mov	r6, r2
 8004eea:	7830      	ldrb	r0, [r6, #0]
 8004eec:	3201      	adds	r2, #1
 8004eee:	f7ff ffa4 	bl	8004e3a <__hexdig_fun>
 8004ef2:	2800      	cmp	r0, #0
 8004ef4:	d1f8      	bne.n	8004ee8 <__gethex+0x84>
 8004ef6:	9a01      	ldr	r2, [sp, #4]
 8004ef8:	9903      	ldr	r1, [sp, #12]
 8004efa:	4630      	mov	r0, r6
 8004efc:	f001 f987 	bl	800620e <strncmp>
 8004f00:	b950      	cbnz	r0, 8004f18 <__gethex+0xb4>
 8004f02:	b954      	cbnz	r4, 8004f1a <__gethex+0xb6>
 8004f04:	9b01      	ldr	r3, [sp, #4]
 8004f06:	18f4      	adds	r4, r6, r3
 8004f08:	4622      	mov	r2, r4
 8004f0a:	4616      	mov	r6, r2
 8004f0c:	7830      	ldrb	r0, [r6, #0]
 8004f0e:	3201      	adds	r2, #1
 8004f10:	f7ff ff93 	bl	8004e3a <__hexdig_fun>
 8004f14:	2800      	cmp	r0, #0
 8004f16:	d1f8      	bne.n	8004f0a <__gethex+0xa6>
 8004f18:	b10c      	cbz	r4, 8004f1e <__gethex+0xba>
 8004f1a:	1ba4      	subs	r4, r4, r6
 8004f1c:	00a4      	lsls	r4, r4, #2
 8004f1e:	7833      	ldrb	r3, [r6, #0]
 8004f20:	2b50      	cmp	r3, #80	; 0x50
 8004f22:	d001      	beq.n	8004f28 <__gethex+0xc4>
 8004f24:	2b70      	cmp	r3, #112	; 0x70
 8004f26:	d140      	bne.n	8004faa <__gethex+0x146>
 8004f28:	7873      	ldrb	r3, [r6, #1]
 8004f2a:	2b2b      	cmp	r3, #43	; 0x2b
 8004f2c:	d031      	beq.n	8004f92 <__gethex+0x12e>
 8004f2e:	2b2d      	cmp	r3, #45	; 0x2d
 8004f30:	d033      	beq.n	8004f9a <__gethex+0x136>
 8004f32:	f04f 0900 	mov.w	r9, #0
 8004f36:	1c71      	adds	r1, r6, #1
 8004f38:	7808      	ldrb	r0, [r1, #0]
 8004f3a:	f7ff ff7e 	bl	8004e3a <__hexdig_fun>
 8004f3e:	1e43      	subs	r3, r0, #1
 8004f40:	b2db      	uxtb	r3, r3
 8004f42:	2b18      	cmp	r3, #24
 8004f44:	d831      	bhi.n	8004faa <__gethex+0x146>
 8004f46:	f1a0 0210 	sub.w	r2, r0, #16
 8004f4a:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8004f4e:	f7ff ff74 	bl	8004e3a <__hexdig_fun>
 8004f52:	1e43      	subs	r3, r0, #1
 8004f54:	b2db      	uxtb	r3, r3
 8004f56:	2b18      	cmp	r3, #24
 8004f58:	d922      	bls.n	8004fa0 <__gethex+0x13c>
 8004f5a:	f1b9 0f00 	cmp.w	r9, #0
 8004f5e:	d000      	beq.n	8004f62 <__gethex+0xfe>
 8004f60:	4252      	negs	r2, r2
 8004f62:	4414      	add	r4, r2
 8004f64:	f8ca 1000 	str.w	r1, [sl]
 8004f68:	b30d      	cbz	r5, 8004fae <__gethex+0x14a>
 8004f6a:	f1bb 0f00 	cmp.w	fp, #0
 8004f6e:	bf0c      	ite	eq
 8004f70:	2706      	moveq	r7, #6
 8004f72:	2700      	movne	r7, #0
 8004f74:	4638      	mov	r0, r7
 8004f76:	b00b      	add	sp, #44	; 0x2c
 8004f78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004f7c:	f10b 0b01 	add.w	fp, fp, #1
 8004f80:	e78a      	b.n	8004e98 <__gethex+0x34>
 8004f82:	2500      	movs	r5, #0
 8004f84:	462c      	mov	r4, r5
 8004f86:	e7ae      	b.n	8004ee6 <__gethex+0x82>
 8004f88:	463e      	mov	r6, r7
 8004f8a:	2501      	movs	r5, #1
 8004f8c:	e7c7      	b.n	8004f1e <__gethex+0xba>
 8004f8e:	4604      	mov	r4, r0
 8004f90:	e7fb      	b.n	8004f8a <__gethex+0x126>
 8004f92:	f04f 0900 	mov.w	r9, #0
 8004f96:	1cb1      	adds	r1, r6, #2
 8004f98:	e7ce      	b.n	8004f38 <__gethex+0xd4>
 8004f9a:	f04f 0901 	mov.w	r9, #1
 8004f9e:	e7fa      	b.n	8004f96 <__gethex+0x132>
 8004fa0:	230a      	movs	r3, #10
 8004fa2:	fb03 0202 	mla	r2, r3, r2, r0
 8004fa6:	3a10      	subs	r2, #16
 8004fa8:	e7cf      	b.n	8004f4a <__gethex+0xe6>
 8004faa:	4631      	mov	r1, r6
 8004fac:	e7da      	b.n	8004f64 <__gethex+0x100>
 8004fae:	4629      	mov	r1, r5
 8004fb0:	1bf3      	subs	r3, r6, r7
 8004fb2:	3b01      	subs	r3, #1
 8004fb4:	2b07      	cmp	r3, #7
 8004fb6:	dc49      	bgt.n	800504c <__gethex+0x1e8>
 8004fb8:	9802      	ldr	r0, [sp, #8]
 8004fba:	f000 fad6 	bl	800556a <_Balloc>
 8004fbe:	f04f 0b00 	mov.w	fp, #0
 8004fc2:	4605      	mov	r5, r0
 8004fc4:	46da      	mov	sl, fp
 8004fc6:	9b01      	ldr	r3, [sp, #4]
 8004fc8:	f100 0914 	add.w	r9, r0, #20
 8004fcc:	f1c3 0301 	rsb	r3, r3, #1
 8004fd0:	f8cd 9010 	str.w	r9, [sp, #16]
 8004fd4:	9308      	str	r3, [sp, #32]
 8004fd6:	42b7      	cmp	r7, r6
 8004fd8:	d33b      	bcc.n	8005052 <__gethex+0x1ee>
 8004fda:	9804      	ldr	r0, [sp, #16]
 8004fdc:	f840 ab04 	str.w	sl, [r0], #4
 8004fe0:	eba0 0009 	sub.w	r0, r0, r9
 8004fe4:	1080      	asrs	r0, r0, #2
 8004fe6:	6128      	str	r0, [r5, #16]
 8004fe8:	0147      	lsls	r7, r0, #5
 8004fea:	4650      	mov	r0, sl
 8004fec:	f000 fb81 	bl	80056f2 <__hi0bits>
 8004ff0:	f8d8 6000 	ldr.w	r6, [r8]
 8004ff4:	1a3f      	subs	r7, r7, r0
 8004ff6:	42b7      	cmp	r7, r6
 8004ff8:	dd64      	ble.n	80050c4 <__gethex+0x260>
 8004ffa:	1bbf      	subs	r7, r7, r6
 8004ffc:	4639      	mov	r1, r7
 8004ffe:	4628      	mov	r0, r5
 8005000:	f000 fe8b 	bl	8005d1a <__any_on>
 8005004:	4682      	mov	sl, r0
 8005006:	b178      	cbz	r0, 8005028 <__gethex+0x1c4>
 8005008:	f04f 0a01 	mov.w	sl, #1
 800500c:	1e7b      	subs	r3, r7, #1
 800500e:	1159      	asrs	r1, r3, #5
 8005010:	f003 021f 	and.w	r2, r3, #31
 8005014:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8005018:	fa0a f202 	lsl.w	r2, sl, r2
 800501c:	420a      	tst	r2, r1
 800501e:	d003      	beq.n	8005028 <__gethex+0x1c4>
 8005020:	4553      	cmp	r3, sl
 8005022:	dc46      	bgt.n	80050b2 <__gethex+0x24e>
 8005024:	f04f 0a02 	mov.w	sl, #2
 8005028:	4639      	mov	r1, r7
 800502a:	4628      	mov	r0, r5
 800502c:	f7ff feca 	bl	8004dc4 <rshift>
 8005030:	443c      	add	r4, r7
 8005032:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8005036:	42a3      	cmp	r3, r4
 8005038:	da52      	bge.n	80050e0 <__gethex+0x27c>
 800503a:	4629      	mov	r1, r5
 800503c:	9802      	ldr	r0, [sp, #8]
 800503e:	f000 fac8 	bl	80055d2 <_Bfree>
 8005042:	2300      	movs	r3, #0
 8005044:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8005046:	27a3      	movs	r7, #163	; 0xa3
 8005048:	6013      	str	r3, [r2, #0]
 800504a:	e793      	b.n	8004f74 <__gethex+0x110>
 800504c:	3101      	adds	r1, #1
 800504e:	105b      	asrs	r3, r3, #1
 8005050:	e7b0      	b.n	8004fb4 <__gethex+0x150>
 8005052:	1e73      	subs	r3, r6, #1
 8005054:	9305      	str	r3, [sp, #20]
 8005056:	9a07      	ldr	r2, [sp, #28]
 8005058:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800505c:	4293      	cmp	r3, r2
 800505e:	d018      	beq.n	8005092 <__gethex+0x22e>
 8005060:	f1bb 0f20 	cmp.w	fp, #32
 8005064:	d107      	bne.n	8005076 <__gethex+0x212>
 8005066:	9b04      	ldr	r3, [sp, #16]
 8005068:	f8c3 a000 	str.w	sl, [r3]
 800506c:	f04f 0a00 	mov.w	sl, #0
 8005070:	46d3      	mov	fp, sl
 8005072:	3304      	adds	r3, #4
 8005074:	9304      	str	r3, [sp, #16]
 8005076:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800507a:	f7ff fede 	bl	8004e3a <__hexdig_fun>
 800507e:	f000 000f 	and.w	r0, r0, #15
 8005082:	fa00 f00b 	lsl.w	r0, r0, fp
 8005086:	ea4a 0a00 	orr.w	sl, sl, r0
 800508a:	f10b 0b04 	add.w	fp, fp, #4
 800508e:	9b05      	ldr	r3, [sp, #20]
 8005090:	e00d      	b.n	80050ae <__gethex+0x24a>
 8005092:	9b05      	ldr	r3, [sp, #20]
 8005094:	9a08      	ldr	r2, [sp, #32]
 8005096:	4413      	add	r3, r2
 8005098:	42bb      	cmp	r3, r7
 800509a:	d3e1      	bcc.n	8005060 <__gethex+0x1fc>
 800509c:	4618      	mov	r0, r3
 800509e:	9a01      	ldr	r2, [sp, #4]
 80050a0:	9903      	ldr	r1, [sp, #12]
 80050a2:	9309      	str	r3, [sp, #36]	; 0x24
 80050a4:	f001 f8b3 	bl	800620e <strncmp>
 80050a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80050aa:	2800      	cmp	r0, #0
 80050ac:	d1d8      	bne.n	8005060 <__gethex+0x1fc>
 80050ae:	461e      	mov	r6, r3
 80050b0:	e791      	b.n	8004fd6 <__gethex+0x172>
 80050b2:	1eb9      	subs	r1, r7, #2
 80050b4:	4628      	mov	r0, r5
 80050b6:	f000 fe30 	bl	8005d1a <__any_on>
 80050ba:	2800      	cmp	r0, #0
 80050bc:	d0b2      	beq.n	8005024 <__gethex+0x1c0>
 80050be:	f04f 0a03 	mov.w	sl, #3
 80050c2:	e7b1      	b.n	8005028 <__gethex+0x1c4>
 80050c4:	da09      	bge.n	80050da <__gethex+0x276>
 80050c6:	1bf7      	subs	r7, r6, r7
 80050c8:	4629      	mov	r1, r5
 80050ca:	463a      	mov	r2, r7
 80050cc:	9802      	ldr	r0, [sp, #8]
 80050ce:	f000 fc4b 	bl	8005968 <__lshift>
 80050d2:	4605      	mov	r5, r0
 80050d4:	1be4      	subs	r4, r4, r7
 80050d6:	f100 0914 	add.w	r9, r0, #20
 80050da:	f04f 0a00 	mov.w	sl, #0
 80050de:	e7a8      	b.n	8005032 <__gethex+0x1ce>
 80050e0:	f8d8 0004 	ldr.w	r0, [r8, #4]
 80050e4:	42a0      	cmp	r0, r4
 80050e6:	dd6b      	ble.n	80051c0 <__gethex+0x35c>
 80050e8:	1b04      	subs	r4, r0, r4
 80050ea:	42a6      	cmp	r6, r4
 80050ec:	dc2e      	bgt.n	800514c <__gethex+0x2e8>
 80050ee:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80050f2:	2b02      	cmp	r3, #2
 80050f4:	d022      	beq.n	800513c <__gethex+0x2d8>
 80050f6:	2b03      	cmp	r3, #3
 80050f8:	d024      	beq.n	8005144 <__gethex+0x2e0>
 80050fa:	2b01      	cmp	r3, #1
 80050fc:	d115      	bne.n	800512a <__gethex+0x2c6>
 80050fe:	42a6      	cmp	r6, r4
 8005100:	d113      	bne.n	800512a <__gethex+0x2c6>
 8005102:	2e01      	cmp	r6, #1
 8005104:	dc0b      	bgt.n	800511e <__gethex+0x2ba>
 8005106:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800510a:	9a06      	ldr	r2, [sp, #24]
 800510c:	2762      	movs	r7, #98	; 0x62
 800510e:	6013      	str	r3, [r2, #0]
 8005110:	2301      	movs	r3, #1
 8005112:	612b      	str	r3, [r5, #16]
 8005114:	f8c9 3000 	str.w	r3, [r9]
 8005118:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800511a:	601d      	str	r5, [r3, #0]
 800511c:	e72a      	b.n	8004f74 <__gethex+0x110>
 800511e:	1e71      	subs	r1, r6, #1
 8005120:	4628      	mov	r0, r5
 8005122:	f000 fdfa 	bl	8005d1a <__any_on>
 8005126:	2800      	cmp	r0, #0
 8005128:	d1ed      	bne.n	8005106 <__gethex+0x2a2>
 800512a:	4629      	mov	r1, r5
 800512c:	9802      	ldr	r0, [sp, #8]
 800512e:	f000 fa50 	bl	80055d2 <_Bfree>
 8005132:	2300      	movs	r3, #0
 8005134:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8005136:	2750      	movs	r7, #80	; 0x50
 8005138:	6013      	str	r3, [r2, #0]
 800513a:	e71b      	b.n	8004f74 <__gethex+0x110>
 800513c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800513e:	2b00      	cmp	r3, #0
 8005140:	d0e1      	beq.n	8005106 <__gethex+0x2a2>
 8005142:	e7f2      	b.n	800512a <__gethex+0x2c6>
 8005144:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8005146:	2b00      	cmp	r3, #0
 8005148:	d1dd      	bne.n	8005106 <__gethex+0x2a2>
 800514a:	e7ee      	b.n	800512a <__gethex+0x2c6>
 800514c:	1e67      	subs	r7, r4, #1
 800514e:	f1ba 0f00 	cmp.w	sl, #0
 8005152:	d132      	bne.n	80051ba <__gethex+0x356>
 8005154:	b127      	cbz	r7, 8005160 <__gethex+0x2fc>
 8005156:	4639      	mov	r1, r7
 8005158:	4628      	mov	r0, r5
 800515a:	f000 fdde 	bl	8005d1a <__any_on>
 800515e:	4682      	mov	sl, r0
 8005160:	2301      	movs	r3, #1
 8005162:	117a      	asrs	r2, r7, #5
 8005164:	f007 071f 	and.w	r7, r7, #31
 8005168:	fa03 f707 	lsl.w	r7, r3, r7
 800516c:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 8005170:	4621      	mov	r1, r4
 8005172:	421f      	tst	r7, r3
 8005174:	f04f 0702 	mov.w	r7, #2
 8005178:	4628      	mov	r0, r5
 800517a:	bf18      	it	ne
 800517c:	f04a 0a02 	orrne.w	sl, sl, #2
 8005180:	1b36      	subs	r6, r6, r4
 8005182:	f7ff fe1f 	bl	8004dc4 <rshift>
 8005186:	f8d8 4004 	ldr.w	r4, [r8, #4]
 800518a:	f1ba 0f00 	cmp.w	sl, #0
 800518e:	d048      	beq.n	8005222 <__gethex+0x3be>
 8005190:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8005194:	2b02      	cmp	r3, #2
 8005196:	d015      	beq.n	80051c4 <__gethex+0x360>
 8005198:	2b03      	cmp	r3, #3
 800519a:	d017      	beq.n	80051cc <__gethex+0x368>
 800519c:	2b01      	cmp	r3, #1
 800519e:	d109      	bne.n	80051b4 <__gethex+0x350>
 80051a0:	f01a 0f02 	tst.w	sl, #2
 80051a4:	d006      	beq.n	80051b4 <__gethex+0x350>
 80051a6:	f8d9 3000 	ldr.w	r3, [r9]
 80051aa:	ea4a 0a03 	orr.w	sl, sl, r3
 80051ae:	f01a 0f01 	tst.w	sl, #1
 80051b2:	d10e      	bne.n	80051d2 <__gethex+0x36e>
 80051b4:	f047 0710 	orr.w	r7, r7, #16
 80051b8:	e033      	b.n	8005222 <__gethex+0x3be>
 80051ba:	f04f 0a01 	mov.w	sl, #1
 80051be:	e7cf      	b.n	8005160 <__gethex+0x2fc>
 80051c0:	2701      	movs	r7, #1
 80051c2:	e7e2      	b.n	800518a <__gethex+0x326>
 80051c4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80051c6:	f1c3 0301 	rsb	r3, r3, #1
 80051ca:	9315      	str	r3, [sp, #84]	; 0x54
 80051cc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d0f0      	beq.n	80051b4 <__gethex+0x350>
 80051d2:	f04f 0c00 	mov.w	ip, #0
 80051d6:	f8d5 9010 	ldr.w	r9, [r5, #16]
 80051da:	f105 0314 	add.w	r3, r5, #20
 80051de:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 80051e2:	eb03 010a 	add.w	r1, r3, sl
 80051e6:	4618      	mov	r0, r3
 80051e8:	f853 2b04 	ldr.w	r2, [r3], #4
 80051ec:	f1b2 3fff 	cmp.w	r2, #4294967295
 80051f0:	d01c      	beq.n	800522c <__gethex+0x3c8>
 80051f2:	3201      	adds	r2, #1
 80051f4:	6002      	str	r2, [r0, #0]
 80051f6:	2f02      	cmp	r7, #2
 80051f8:	f105 0314 	add.w	r3, r5, #20
 80051fc:	d138      	bne.n	8005270 <__gethex+0x40c>
 80051fe:	f8d8 2000 	ldr.w	r2, [r8]
 8005202:	3a01      	subs	r2, #1
 8005204:	42b2      	cmp	r2, r6
 8005206:	d10a      	bne.n	800521e <__gethex+0x3ba>
 8005208:	2201      	movs	r2, #1
 800520a:	1171      	asrs	r1, r6, #5
 800520c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8005210:	f006 061f 	and.w	r6, r6, #31
 8005214:	fa02 f606 	lsl.w	r6, r2, r6
 8005218:	421e      	tst	r6, r3
 800521a:	bf18      	it	ne
 800521c:	4617      	movne	r7, r2
 800521e:	f047 0720 	orr.w	r7, r7, #32
 8005222:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8005224:	601d      	str	r5, [r3, #0]
 8005226:	9b06      	ldr	r3, [sp, #24]
 8005228:	601c      	str	r4, [r3, #0]
 800522a:	e6a3      	b.n	8004f74 <__gethex+0x110>
 800522c:	4299      	cmp	r1, r3
 800522e:	f843 cc04 	str.w	ip, [r3, #-4]
 8005232:	d8d8      	bhi.n	80051e6 <__gethex+0x382>
 8005234:	68ab      	ldr	r3, [r5, #8]
 8005236:	4599      	cmp	r9, r3
 8005238:	db12      	blt.n	8005260 <__gethex+0x3fc>
 800523a:	6869      	ldr	r1, [r5, #4]
 800523c:	9802      	ldr	r0, [sp, #8]
 800523e:	3101      	adds	r1, #1
 8005240:	f000 f993 	bl	800556a <_Balloc>
 8005244:	4683      	mov	fp, r0
 8005246:	692a      	ldr	r2, [r5, #16]
 8005248:	f105 010c 	add.w	r1, r5, #12
 800524c:	3202      	adds	r2, #2
 800524e:	0092      	lsls	r2, r2, #2
 8005250:	300c      	adds	r0, #12
 8005252:	f000 f97f 	bl	8005554 <memcpy>
 8005256:	4629      	mov	r1, r5
 8005258:	9802      	ldr	r0, [sp, #8]
 800525a:	f000 f9ba 	bl	80055d2 <_Bfree>
 800525e:	465d      	mov	r5, fp
 8005260:	692b      	ldr	r3, [r5, #16]
 8005262:	1c5a      	adds	r2, r3, #1
 8005264:	612a      	str	r2, [r5, #16]
 8005266:	2201      	movs	r2, #1
 8005268:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 800526c:	615a      	str	r2, [r3, #20]
 800526e:	e7c2      	b.n	80051f6 <__gethex+0x392>
 8005270:	692a      	ldr	r2, [r5, #16]
 8005272:	454a      	cmp	r2, r9
 8005274:	dd0b      	ble.n	800528e <__gethex+0x42a>
 8005276:	2101      	movs	r1, #1
 8005278:	4628      	mov	r0, r5
 800527a:	f7ff fda3 	bl	8004dc4 <rshift>
 800527e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8005282:	3401      	adds	r4, #1
 8005284:	42a3      	cmp	r3, r4
 8005286:	f6ff aed8 	blt.w	800503a <__gethex+0x1d6>
 800528a:	2701      	movs	r7, #1
 800528c:	e7c7      	b.n	800521e <__gethex+0x3ba>
 800528e:	f016 061f 	ands.w	r6, r6, #31
 8005292:	d0fa      	beq.n	800528a <__gethex+0x426>
 8005294:	449a      	add	sl, r3
 8005296:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 800529a:	f000 fa2a 	bl	80056f2 <__hi0bits>
 800529e:	f1c6 0620 	rsb	r6, r6, #32
 80052a2:	42b0      	cmp	r0, r6
 80052a4:	dbe7      	blt.n	8005276 <__gethex+0x412>
 80052a6:	e7f0      	b.n	800528a <__gethex+0x426>

080052a8 <L_shift>:
 80052a8:	f1c2 0208 	rsb	r2, r2, #8
 80052ac:	0092      	lsls	r2, r2, #2
 80052ae:	b570      	push	{r4, r5, r6, lr}
 80052b0:	f1c2 0620 	rsb	r6, r2, #32
 80052b4:	6843      	ldr	r3, [r0, #4]
 80052b6:	6804      	ldr	r4, [r0, #0]
 80052b8:	fa03 f506 	lsl.w	r5, r3, r6
 80052bc:	432c      	orrs	r4, r5
 80052be:	40d3      	lsrs	r3, r2
 80052c0:	6004      	str	r4, [r0, #0]
 80052c2:	f840 3f04 	str.w	r3, [r0, #4]!
 80052c6:	4288      	cmp	r0, r1
 80052c8:	d3f4      	bcc.n	80052b4 <L_shift+0xc>
 80052ca:	bd70      	pop	{r4, r5, r6, pc}

080052cc <__match>:
 80052cc:	b530      	push	{r4, r5, lr}
 80052ce:	6803      	ldr	r3, [r0, #0]
 80052d0:	3301      	adds	r3, #1
 80052d2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80052d6:	b914      	cbnz	r4, 80052de <__match+0x12>
 80052d8:	6003      	str	r3, [r0, #0]
 80052da:	2001      	movs	r0, #1
 80052dc:	bd30      	pop	{r4, r5, pc}
 80052de:	f813 2b01 	ldrb.w	r2, [r3], #1
 80052e2:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 80052e6:	2d19      	cmp	r5, #25
 80052e8:	bf98      	it	ls
 80052ea:	3220      	addls	r2, #32
 80052ec:	42a2      	cmp	r2, r4
 80052ee:	d0f0      	beq.n	80052d2 <__match+0x6>
 80052f0:	2000      	movs	r0, #0
 80052f2:	e7f3      	b.n	80052dc <__match+0x10>

080052f4 <__hexnan>:
 80052f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80052f8:	2500      	movs	r5, #0
 80052fa:	680b      	ldr	r3, [r1, #0]
 80052fc:	4682      	mov	sl, r0
 80052fe:	115f      	asrs	r7, r3, #5
 8005300:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 8005304:	f013 031f 	ands.w	r3, r3, #31
 8005308:	bf18      	it	ne
 800530a:	3704      	addne	r7, #4
 800530c:	1f3e      	subs	r6, r7, #4
 800530e:	4690      	mov	r8, r2
 8005310:	46b1      	mov	r9, r6
 8005312:	4634      	mov	r4, r6
 8005314:	46ab      	mov	fp, r5
 8005316:	b087      	sub	sp, #28
 8005318:	6801      	ldr	r1, [r0, #0]
 800531a:	9301      	str	r3, [sp, #4]
 800531c:	f847 5c04 	str.w	r5, [r7, #-4]
 8005320:	9502      	str	r5, [sp, #8]
 8005322:	784a      	ldrb	r2, [r1, #1]
 8005324:	1c4b      	adds	r3, r1, #1
 8005326:	9303      	str	r3, [sp, #12]
 8005328:	b342      	cbz	r2, 800537c <__hexnan+0x88>
 800532a:	4610      	mov	r0, r2
 800532c:	9105      	str	r1, [sp, #20]
 800532e:	9204      	str	r2, [sp, #16]
 8005330:	f7ff fd83 	bl	8004e3a <__hexdig_fun>
 8005334:	2800      	cmp	r0, #0
 8005336:	d143      	bne.n	80053c0 <__hexnan+0xcc>
 8005338:	9a04      	ldr	r2, [sp, #16]
 800533a:	9905      	ldr	r1, [sp, #20]
 800533c:	2a20      	cmp	r2, #32
 800533e:	d818      	bhi.n	8005372 <__hexnan+0x7e>
 8005340:	9b02      	ldr	r3, [sp, #8]
 8005342:	459b      	cmp	fp, r3
 8005344:	dd13      	ble.n	800536e <__hexnan+0x7a>
 8005346:	454c      	cmp	r4, r9
 8005348:	d206      	bcs.n	8005358 <__hexnan+0x64>
 800534a:	2d07      	cmp	r5, #7
 800534c:	dc04      	bgt.n	8005358 <__hexnan+0x64>
 800534e:	462a      	mov	r2, r5
 8005350:	4649      	mov	r1, r9
 8005352:	4620      	mov	r0, r4
 8005354:	f7ff ffa8 	bl	80052a8 <L_shift>
 8005358:	4544      	cmp	r4, r8
 800535a:	d944      	bls.n	80053e6 <__hexnan+0xf2>
 800535c:	2300      	movs	r3, #0
 800535e:	f1a4 0904 	sub.w	r9, r4, #4
 8005362:	f844 3c04 	str.w	r3, [r4, #-4]
 8005366:	461d      	mov	r5, r3
 8005368:	464c      	mov	r4, r9
 800536a:	f8cd b008 	str.w	fp, [sp, #8]
 800536e:	9903      	ldr	r1, [sp, #12]
 8005370:	e7d7      	b.n	8005322 <__hexnan+0x2e>
 8005372:	2a29      	cmp	r2, #41	; 0x29
 8005374:	d14a      	bne.n	800540c <__hexnan+0x118>
 8005376:	3102      	adds	r1, #2
 8005378:	f8ca 1000 	str.w	r1, [sl]
 800537c:	f1bb 0f00 	cmp.w	fp, #0
 8005380:	d044      	beq.n	800540c <__hexnan+0x118>
 8005382:	454c      	cmp	r4, r9
 8005384:	d206      	bcs.n	8005394 <__hexnan+0xa0>
 8005386:	2d07      	cmp	r5, #7
 8005388:	dc04      	bgt.n	8005394 <__hexnan+0xa0>
 800538a:	462a      	mov	r2, r5
 800538c:	4649      	mov	r1, r9
 800538e:	4620      	mov	r0, r4
 8005390:	f7ff ff8a 	bl	80052a8 <L_shift>
 8005394:	4544      	cmp	r4, r8
 8005396:	d928      	bls.n	80053ea <__hexnan+0xf6>
 8005398:	4643      	mov	r3, r8
 800539a:	f854 2b04 	ldr.w	r2, [r4], #4
 800539e:	42a6      	cmp	r6, r4
 80053a0:	f843 2b04 	str.w	r2, [r3], #4
 80053a4:	d2f9      	bcs.n	800539a <__hexnan+0xa6>
 80053a6:	2200      	movs	r2, #0
 80053a8:	f843 2b04 	str.w	r2, [r3], #4
 80053ac:	429e      	cmp	r6, r3
 80053ae:	d2fb      	bcs.n	80053a8 <__hexnan+0xb4>
 80053b0:	6833      	ldr	r3, [r6, #0]
 80053b2:	b91b      	cbnz	r3, 80053bc <__hexnan+0xc8>
 80053b4:	4546      	cmp	r6, r8
 80053b6:	d127      	bne.n	8005408 <__hexnan+0x114>
 80053b8:	2301      	movs	r3, #1
 80053ba:	6033      	str	r3, [r6, #0]
 80053bc:	2005      	movs	r0, #5
 80053be:	e026      	b.n	800540e <__hexnan+0x11a>
 80053c0:	3501      	adds	r5, #1
 80053c2:	2d08      	cmp	r5, #8
 80053c4:	f10b 0b01 	add.w	fp, fp, #1
 80053c8:	dd06      	ble.n	80053d8 <__hexnan+0xe4>
 80053ca:	4544      	cmp	r4, r8
 80053cc:	d9cf      	bls.n	800536e <__hexnan+0x7a>
 80053ce:	2300      	movs	r3, #0
 80053d0:	2501      	movs	r5, #1
 80053d2:	f844 3c04 	str.w	r3, [r4, #-4]
 80053d6:	3c04      	subs	r4, #4
 80053d8:	6822      	ldr	r2, [r4, #0]
 80053da:	f000 000f 	and.w	r0, r0, #15
 80053de:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 80053e2:	6020      	str	r0, [r4, #0]
 80053e4:	e7c3      	b.n	800536e <__hexnan+0x7a>
 80053e6:	2508      	movs	r5, #8
 80053e8:	e7c1      	b.n	800536e <__hexnan+0x7a>
 80053ea:	9b01      	ldr	r3, [sp, #4]
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d0df      	beq.n	80053b0 <__hexnan+0xbc>
 80053f0:	f04f 32ff 	mov.w	r2, #4294967295
 80053f4:	f1c3 0320 	rsb	r3, r3, #32
 80053f8:	fa22 f303 	lsr.w	r3, r2, r3
 80053fc:	f857 2c04 	ldr.w	r2, [r7, #-4]
 8005400:	401a      	ands	r2, r3
 8005402:	f847 2c04 	str.w	r2, [r7, #-4]
 8005406:	e7d3      	b.n	80053b0 <__hexnan+0xbc>
 8005408:	3e04      	subs	r6, #4
 800540a:	e7d1      	b.n	80053b0 <__hexnan+0xbc>
 800540c:	2004      	movs	r0, #4
 800540e:	b007      	add	sp, #28
 8005410:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08005414 <__locale_ctype_ptr_l>:
 8005414:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 8005418:	4770      	bx	lr

0800541a <__localeconv_l>:
 800541a:	30f0      	adds	r0, #240	; 0xf0
 800541c:	4770      	bx	lr
	...

08005420 <_localeconv_r>:
 8005420:	4b04      	ldr	r3, [pc, #16]	; (8005434 <_localeconv_r+0x14>)
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	6a18      	ldr	r0, [r3, #32]
 8005426:	4b04      	ldr	r3, [pc, #16]	; (8005438 <_localeconv_r+0x18>)
 8005428:	2800      	cmp	r0, #0
 800542a:	bf08      	it	eq
 800542c:	4618      	moveq	r0, r3
 800542e:	30f0      	adds	r0, #240	; 0xf0
 8005430:	4770      	bx	lr
 8005432:	bf00      	nop
 8005434:	2000000c 	.word	0x2000000c
 8005438:	20000070 	.word	0x20000070

0800543c <__swhatbuf_r>:
 800543c:	b570      	push	{r4, r5, r6, lr}
 800543e:	460e      	mov	r6, r1
 8005440:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005444:	b096      	sub	sp, #88	; 0x58
 8005446:	2900      	cmp	r1, #0
 8005448:	4614      	mov	r4, r2
 800544a:	461d      	mov	r5, r3
 800544c:	da07      	bge.n	800545e <__swhatbuf_r+0x22>
 800544e:	2300      	movs	r3, #0
 8005450:	602b      	str	r3, [r5, #0]
 8005452:	89b3      	ldrh	r3, [r6, #12]
 8005454:	061a      	lsls	r2, r3, #24
 8005456:	d410      	bmi.n	800547a <__swhatbuf_r+0x3e>
 8005458:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800545c:	e00e      	b.n	800547c <__swhatbuf_r+0x40>
 800545e:	466a      	mov	r2, sp
 8005460:	f000 ff16 	bl	8006290 <_fstat_r>
 8005464:	2800      	cmp	r0, #0
 8005466:	dbf2      	blt.n	800544e <__swhatbuf_r+0x12>
 8005468:	9a01      	ldr	r2, [sp, #4]
 800546a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800546e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8005472:	425a      	negs	r2, r3
 8005474:	415a      	adcs	r2, r3
 8005476:	602a      	str	r2, [r5, #0]
 8005478:	e7ee      	b.n	8005458 <__swhatbuf_r+0x1c>
 800547a:	2340      	movs	r3, #64	; 0x40
 800547c:	2000      	movs	r0, #0
 800547e:	6023      	str	r3, [r4, #0]
 8005480:	b016      	add	sp, #88	; 0x58
 8005482:	bd70      	pop	{r4, r5, r6, pc}

08005484 <__smakebuf_r>:
 8005484:	898b      	ldrh	r3, [r1, #12]
 8005486:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005488:	079d      	lsls	r5, r3, #30
 800548a:	4606      	mov	r6, r0
 800548c:	460c      	mov	r4, r1
 800548e:	d507      	bpl.n	80054a0 <__smakebuf_r+0x1c>
 8005490:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005494:	6023      	str	r3, [r4, #0]
 8005496:	6123      	str	r3, [r4, #16]
 8005498:	2301      	movs	r3, #1
 800549a:	6163      	str	r3, [r4, #20]
 800549c:	b002      	add	sp, #8
 800549e:	bd70      	pop	{r4, r5, r6, pc}
 80054a0:	ab01      	add	r3, sp, #4
 80054a2:	466a      	mov	r2, sp
 80054a4:	f7ff ffca 	bl	800543c <__swhatbuf_r>
 80054a8:	9900      	ldr	r1, [sp, #0]
 80054aa:	4605      	mov	r5, r0
 80054ac:	4630      	mov	r0, r6
 80054ae:	f000 fcaf 	bl	8005e10 <_malloc_r>
 80054b2:	b948      	cbnz	r0, 80054c8 <__smakebuf_r+0x44>
 80054b4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80054b8:	059a      	lsls	r2, r3, #22
 80054ba:	d4ef      	bmi.n	800549c <__smakebuf_r+0x18>
 80054bc:	f023 0303 	bic.w	r3, r3, #3
 80054c0:	f043 0302 	orr.w	r3, r3, #2
 80054c4:	81a3      	strh	r3, [r4, #12]
 80054c6:	e7e3      	b.n	8005490 <__smakebuf_r+0xc>
 80054c8:	4b0d      	ldr	r3, [pc, #52]	; (8005500 <__smakebuf_r+0x7c>)
 80054ca:	62b3      	str	r3, [r6, #40]	; 0x28
 80054cc:	89a3      	ldrh	r3, [r4, #12]
 80054ce:	6020      	str	r0, [r4, #0]
 80054d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80054d4:	81a3      	strh	r3, [r4, #12]
 80054d6:	9b00      	ldr	r3, [sp, #0]
 80054d8:	6120      	str	r0, [r4, #16]
 80054da:	6163      	str	r3, [r4, #20]
 80054dc:	9b01      	ldr	r3, [sp, #4]
 80054de:	b15b      	cbz	r3, 80054f8 <__smakebuf_r+0x74>
 80054e0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80054e4:	4630      	mov	r0, r6
 80054e6:	f000 fee5 	bl	80062b4 <_isatty_r>
 80054ea:	b128      	cbz	r0, 80054f8 <__smakebuf_r+0x74>
 80054ec:	89a3      	ldrh	r3, [r4, #12]
 80054ee:	f023 0303 	bic.w	r3, r3, #3
 80054f2:	f043 0301 	orr.w	r3, r3, #1
 80054f6:	81a3      	strh	r3, [r4, #12]
 80054f8:	89a3      	ldrh	r3, [r4, #12]
 80054fa:	431d      	orrs	r5, r3
 80054fc:	81a5      	strh	r5, [r4, #12]
 80054fe:	e7cd      	b.n	800549c <__smakebuf_r+0x18>
 8005500:	08004c79 	.word	0x08004c79

08005504 <malloc>:
 8005504:	4b02      	ldr	r3, [pc, #8]	; (8005510 <malloc+0xc>)
 8005506:	4601      	mov	r1, r0
 8005508:	6818      	ldr	r0, [r3, #0]
 800550a:	f000 bc81 	b.w	8005e10 <_malloc_r>
 800550e:	bf00      	nop
 8005510:	2000000c 	.word	0x2000000c

08005514 <__ascii_mbtowc>:
 8005514:	b082      	sub	sp, #8
 8005516:	b901      	cbnz	r1, 800551a <__ascii_mbtowc+0x6>
 8005518:	a901      	add	r1, sp, #4
 800551a:	b142      	cbz	r2, 800552e <__ascii_mbtowc+0x1a>
 800551c:	b14b      	cbz	r3, 8005532 <__ascii_mbtowc+0x1e>
 800551e:	7813      	ldrb	r3, [r2, #0]
 8005520:	600b      	str	r3, [r1, #0]
 8005522:	7812      	ldrb	r2, [r2, #0]
 8005524:	1c10      	adds	r0, r2, #0
 8005526:	bf18      	it	ne
 8005528:	2001      	movne	r0, #1
 800552a:	b002      	add	sp, #8
 800552c:	4770      	bx	lr
 800552e:	4610      	mov	r0, r2
 8005530:	e7fb      	b.n	800552a <__ascii_mbtowc+0x16>
 8005532:	f06f 0001 	mvn.w	r0, #1
 8005536:	e7f8      	b.n	800552a <__ascii_mbtowc+0x16>

08005538 <memchr>:
 8005538:	b510      	push	{r4, lr}
 800553a:	b2c9      	uxtb	r1, r1
 800553c:	4402      	add	r2, r0
 800553e:	4290      	cmp	r0, r2
 8005540:	4603      	mov	r3, r0
 8005542:	d101      	bne.n	8005548 <memchr+0x10>
 8005544:	2300      	movs	r3, #0
 8005546:	e003      	b.n	8005550 <memchr+0x18>
 8005548:	781c      	ldrb	r4, [r3, #0]
 800554a:	3001      	adds	r0, #1
 800554c:	428c      	cmp	r4, r1
 800554e:	d1f6      	bne.n	800553e <memchr+0x6>
 8005550:	4618      	mov	r0, r3
 8005552:	bd10      	pop	{r4, pc}

08005554 <memcpy>:
 8005554:	b510      	push	{r4, lr}
 8005556:	1e43      	subs	r3, r0, #1
 8005558:	440a      	add	r2, r1
 800555a:	4291      	cmp	r1, r2
 800555c:	d100      	bne.n	8005560 <memcpy+0xc>
 800555e:	bd10      	pop	{r4, pc}
 8005560:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005564:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005568:	e7f7      	b.n	800555a <memcpy+0x6>

0800556a <_Balloc>:
 800556a:	b570      	push	{r4, r5, r6, lr}
 800556c:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800556e:	4604      	mov	r4, r0
 8005570:	460e      	mov	r6, r1
 8005572:	b93d      	cbnz	r5, 8005584 <_Balloc+0x1a>
 8005574:	2010      	movs	r0, #16
 8005576:	f7ff ffc5 	bl	8005504 <malloc>
 800557a:	6260      	str	r0, [r4, #36]	; 0x24
 800557c:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8005580:	6005      	str	r5, [r0, #0]
 8005582:	60c5      	str	r5, [r0, #12]
 8005584:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8005586:	68eb      	ldr	r3, [r5, #12]
 8005588:	b183      	cbz	r3, 80055ac <_Balloc+0x42>
 800558a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800558c:	68db      	ldr	r3, [r3, #12]
 800558e:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8005592:	b9b8      	cbnz	r0, 80055c4 <_Balloc+0x5a>
 8005594:	2101      	movs	r1, #1
 8005596:	fa01 f506 	lsl.w	r5, r1, r6
 800559a:	1d6a      	adds	r2, r5, #5
 800559c:	0092      	lsls	r2, r2, #2
 800559e:	4620      	mov	r0, r4
 80055a0:	f000 fbdc 	bl	8005d5c <_calloc_r>
 80055a4:	b160      	cbz	r0, 80055c0 <_Balloc+0x56>
 80055a6:	e9c0 6501 	strd	r6, r5, [r0, #4]
 80055aa:	e00e      	b.n	80055ca <_Balloc+0x60>
 80055ac:	2221      	movs	r2, #33	; 0x21
 80055ae:	2104      	movs	r1, #4
 80055b0:	4620      	mov	r0, r4
 80055b2:	f000 fbd3 	bl	8005d5c <_calloc_r>
 80055b6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80055b8:	60e8      	str	r0, [r5, #12]
 80055ba:	68db      	ldr	r3, [r3, #12]
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d1e4      	bne.n	800558a <_Balloc+0x20>
 80055c0:	2000      	movs	r0, #0
 80055c2:	bd70      	pop	{r4, r5, r6, pc}
 80055c4:	6802      	ldr	r2, [r0, #0]
 80055c6:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 80055ca:	2300      	movs	r3, #0
 80055cc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80055d0:	e7f7      	b.n	80055c2 <_Balloc+0x58>

080055d2 <_Bfree>:
 80055d2:	b570      	push	{r4, r5, r6, lr}
 80055d4:	6a44      	ldr	r4, [r0, #36]	; 0x24
 80055d6:	4606      	mov	r6, r0
 80055d8:	460d      	mov	r5, r1
 80055da:	b93c      	cbnz	r4, 80055ec <_Bfree+0x1a>
 80055dc:	2010      	movs	r0, #16
 80055de:	f7ff ff91 	bl	8005504 <malloc>
 80055e2:	6270      	str	r0, [r6, #36]	; 0x24
 80055e4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80055e8:	6004      	str	r4, [r0, #0]
 80055ea:	60c4      	str	r4, [r0, #12]
 80055ec:	b13d      	cbz	r5, 80055fe <_Bfree+0x2c>
 80055ee:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80055f0:	686a      	ldr	r2, [r5, #4]
 80055f2:	68db      	ldr	r3, [r3, #12]
 80055f4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80055f8:	6029      	str	r1, [r5, #0]
 80055fa:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 80055fe:	bd70      	pop	{r4, r5, r6, pc}

08005600 <__multadd>:
 8005600:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005604:	461f      	mov	r7, r3
 8005606:	4606      	mov	r6, r0
 8005608:	460c      	mov	r4, r1
 800560a:	2300      	movs	r3, #0
 800560c:	690d      	ldr	r5, [r1, #16]
 800560e:	f101 0c14 	add.w	ip, r1, #20
 8005612:	f8dc 0000 	ldr.w	r0, [ip]
 8005616:	3301      	adds	r3, #1
 8005618:	b281      	uxth	r1, r0
 800561a:	fb02 7101 	mla	r1, r2, r1, r7
 800561e:	0c00      	lsrs	r0, r0, #16
 8005620:	0c0f      	lsrs	r7, r1, #16
 8005622:	fb02 7000 	mla	r0, r2, r0, r7
 8005626:	b289      	uxth	r1, r1
 8005628:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 800562c:	429d      	cmp	r5, r3
 800562e:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8005632:	f84c 1b04 	str.w	r1, [ip], #4
 8005636:	dcec      	bgt.n	8005612 <__multadd+0x12>
 8005638:	b1d7      	cbz	r7, 8005670 <__multadd+0x70>
 800563a:	68a3      	ldr	r3, [r4, #8]
 800563c:	42ab      	cmp	r3, r5
 800563e:	dc12      	bgt.n	8005666 <__multadd+0x66>
 8005640:	6861      	ldr	r1, [r4, #4]
 8005642:	4630      	mov	r0, r6
 8005644:	3101      	adds	r1, #1
 8005646:	f7ff ff90 	bl	800556a <_Balloc>
 800564a:	4680      	mov	r8, r0
 800564c:	6922      	ldr	r2, [r4, #16]
 800564e:	f104 010c 	add.w	r1, r4, #12
 8005652:	3202      	adds	r2, #2
 8005654:	0092      	lsls	r2, r2, #2
 8005656:	300c      	adds	r0, #12
 8005658:	f7ff ff7c 	bl	8005554 <memcpy>
 800565c:	4621      	mov	r1, r4
 800565e:	4630      	mov	r0, r6
 8005660:	f7ff ffb7 	bl	80055d2 <_Bfree>
 8005664:	4644      	mov	r4, r8
 8005666:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800566a:	3501      	adds	r5, #1
 800566c:	615f      	str	r7, [r3, #20]
 800566e:	6125      	str	r5, [r4, #16]
 8005670:	4620      	mov	r0, r4
 8005672:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08005676 <__s2b>:
 8005676:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800567a:	4615      	mov	r5, r2
 800567c:	2209      	movs	r2, #9
 800567e:	461f      	mov	r7, r3
 8005680:	3308      	adds	r3, #8
 8005682:	460c      	mov	r4, r1
 8005684:	fb93 f3f2 	sdiv	r3, r3, r2
 8005688:	4606      	mov	r6, r0
 800568a:	2201      	movs	r2, #1
 800568c:	2100      	movs	r1, #0
 800568e:	429a      	cmp	r2, r3
 8005690:	db20      	blt.n	80056d4 <__s2b+0x5e>
 8005692:	4630      	mov	r0, r6
 8005694:	f7ff ff69 	bl	800556a <_Balloc>
 8005698:	9b08      	ldr	r3, [sp, #32]
 800569a:	2d09      	cmp	r5, #9
 800569c:	6143      	str	r3, [r0, #20]
 800569e:	f04f 0301 	mov.w	r3, #1
 80056a2:	6103      	str	r3, [r0, #16]
 80056a4:	dd19      	ble.n	80056da <__s2b+0x64>
 80056a6:	f104 0809 	add.w	r8, r4, #9
 80056aa:	46c1      	mov	r9, r8
 80056ac:	442c      	add	r4, r5
 80056ae:	f819 3b01 	ldrb.w	r3, [r9], #1
 80056b2:	4601      	mov	r1, r0
 80056b4:	3b30      	subs	r3, #48	; 0x30
 80056b6:	220a      	movs	r2, #10
 80056b8:	4630      	mov	r0, r6
 80056ba:	f7ff ffa1 	bl	8005600 <__multadd>
 80056be:	45a1      	cmp	r9, r4
 80056c0:	d1f5      	bne.n	80056ae <__s2b+0x38>
 80056c2:	eb08 0405 	add.w	r4, r8, r5
 80056c6:	3c08      	subs	r4, #8
 80056c8:	1b2d      	subs	r5, r5, r4
 80056ca:	1963      	adds	r3, r4, r5
 80056cc:	42bb      	cmp	r3, r7
 80056ce:	db07      	blt.n	80056e0 <__s2b+0x6a>
 80056d0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80056d4:	0052      	lsls	r2, r2, #1
 80056d6:	3101      	adds	r1, #1
 80056d8:	e7d9      	b.n	800568e <__s2b+0x18>
 80056da:	340a      	adds	r4, #10
 80056dc:	2509      	movs	r5, #9
 80056de:	e7f3      	b.n	80056c8 <__s2b+0x52>
 80056e0:	f814 3b01 	ldrb.w	r3, [r4], #1
 80056e4:	4601      	mov	r1, r0
 80056e6:	3b30      	subs	r3, #48	; 0x30
 80056e8:	220a      	movs	r2, #10
 80056ea:	4630      	mov	r0, r6
 80056ec:	f7ff ff88 	bl	8005600 <__multadd>
 80056f0:	e7eb      	b.n	80056ca <__s2b+0x54>

080056f2 <__hi0bits>:
 80056f2:	0c02      	lsrs	r2, r0, #16
 80056f4:	0412      	lsls	r2, r2, #16
 80056f6:	4603      	mov	r3, r0
 80056f8:	b9b2      	cbnz	r2, 8005728 <__hi0bits+0x36>
 80056fa:	0403      	lsls	r3, r0, #16
 80056fc:	2010      	movs	r0, #16
 80056fe:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8005702:	bf04      	itt	eq
 8005704:	021b      	lsleq	r3, r3, #8
 8005706:	3008      	addeq	r0, #8
 8005708:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800570c:	bf04      	itt	eq
 800570e:	011b      	lsleq	r3, r3, #4
 8005710:	3004      	addeq	r0, #4
 8005712:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8005716:	bf04      	itt	eq
 8005718:	009b      	lsleq	r3, r3, #2
 800571a:	3002      	addeq	r0, #2
 800571c:	2b00      	cmp	r3, #0
 800571e:	db06      	blt.n	800572e <__hi0bits+0x3c>
 8005720:	005b      	lsls	r3, r3, #1
 8005722:	d503      	bpl.n	800572c <__hi0bits+0x3a>
 8005724:	3001      	adds	r0, #1
 8005726:	4770      	bx	lr
 8005728:	2000      	movs	r0, #0
 800572a:	e7e8      	b.n	80056fe <__hi0bits+0xc>
 800572c:	2020      	movs	r0, #32
 800572e:	4770      	bx	lr

08005730 <__lo0bits>:
 8005730:	6803      	ldr	r3, [r0, #0]
 8005732:	4601      	mov	r1, r0
 8005734:	f013 0207 	ands.w	r2, r3, #7
 8005738:	d00b      	beq.n	8005752 <__lo0bits+0x22>
 800573a:	07da      	lsls	r2, r3, #31
 800573c:	d423      	bmi.n	8005786 <__lo0bits+0x56>
 800573e:	0798      	lsls	r0, r3, #30
 8005740:	bf49      	itett	mi
 8005742:	085b      	lsrmi	r3, r3, #1
 8005744:	089b      	lsrpl	r3, r3, #2
 8005746:	2001      	movmi	r0, #1
 8005748:	600b      	strmi	r3, [r1, #0]
 800574a:	bf5c      	itt	pl
 800574c:	600b      	strpl	r3, [r1, #0]
 800574e:	2002      	movpl	r0, #2
 8005750:	4770      	bx	lr
 8005752:	b298      	uxth	r0, r3
 8005754:	b9a8      	cbnz	r0, 8005782 <__lo0bits+0x52>
 8005756:	2010      	movs	r0, #16
 8005758:	0c1b      	lsrs	r3, r3, #16
 800575a:	f013 0fff 	tst.w	r3, #255	; 0xff
 800575e:	bf04      	itt	eq
 8005760:	0a1b      	lsreq	r3, r3, #8
 8005762:	3008      	addeq	r0, #8
 8005764:	071a      	lsls	r2, r3, #28
 8005766:	bf04      	itt	eq
 8005768:	091b      	lsreq	r3, r3, #4
 800576a:	3004      	addeq	r0, #4
 800576c:	079a      	lsls	r2, r3, #30
 800576e:	bf04      	itt	eq
 8005770:	089b      	lsreq	r3, r3, #2
 8005772:	3002      	addeq	r0, #2
 8005774:	07da      	lsls	r2, r3, #31
 8005776:	d402      	bmi.n	800577e <__lo0bits+0x4e>
 8005778:	085b      	lsrs	r3, r3, #1
 800577a:	d006      	beq.n	800578a <__lo0bits+0x5a>
 800577c:	3001      	adds	r0, #1
 800577e:	600b      	str	r3, [r1, #0]
 8005780:	4770      	bx	lr
 8005782:	4610      	mov	r0, r2
 8005784:	e7e9      	b.n	800575a <__lo0bits+0x2a>
 8005786:	2000      	movs	r0, #0
 8005788:	4770      	bx	lr
 800578a:	2020      	movs	r0, #32
 800578c:	4770      	bx	lr

0800578e <__i2b>:
 800578e:	b510      	push	{r4, lr}
 8005790:	460c      	mov	r4, r1
 8005792:	2101      	movs	r1, #1
 8005794:	f7ff fee9 	bl	800556a <_Balloc>
 8005798:	2201      	movs	r2, #1
 800579a:	6144      	str	r4, [r0, #20]
 800579c:	6102      	str	r2, [r0, #16]
 800579e:	bd10      	pop	{r4, pc}

080057a0 <__multiply>:
 80057a0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80057a4:	4614      	mov	r4, r2
 80057a6:	690a      	ldr	r2, [r1, #16]
 80057a8:	6923      	ldr	r3, [r4, #16]
 80057aa:	4688      	mov	r8, r1
 80057ac:	429a      	cmp	r2, r3
 80057ae:	bfbe      	ittt	lt
 80057b0:	460b      	movlt	r3, r1
 80057b2:	46a0      	movlt	r8, r4
 80057b4:	461c      	movlt	r4, r3
 80057b6:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80057ba:	f8d4 9010 	ldr.w	r9, [r4, #16]
 80057be:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80057c2:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80057c6:	eb07 0609 	add.w	r6, r7, r9
 80057ca:	42b3      	cmp	r3, r6
 80057cc:	bfb8      	it	lt
 80057ce:	3101      	addlt	r1, #1
 80057d0:	f7ff fecb 	bl	800556a <_Balloc>
 80057d4:	f100 0514 	add.w	r5, r0, #20
 80057d8:	462b      	mov	r3, r5
 80057da:	2200      	movs	r2, #0
 80057dc:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 80057e0:	4573      	cmp	r3, lr
 80057e2:	d316      	bcc.n	8005812 <__multiply+0x72>
 80057e4:	f104 0214 	add.w	r2, r4, #20
 80057e8:	f108 0114 	add.w	r1, r8, #20
 80057ec:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 80057f0:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 80057f4:	9300      	str	r3, [sp, #0]
 80057f6:	9b00      	ldr	r3, [sp, #0]
 80057f8:	9201      	str	r2, [sp, #4]
 80057fa:	4293      	cmp	r3, r2
 80057fc:	d80c      	bhi.n	8005818 <__multiply+0x78>
 80057fe:	2e00      	cmp	r6, #0
 8005800:	dd03      	ble.n	800580a <__multiply+0x6a>
 8005802:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8005806:	2b00      	cmp	r3, #0
 8005808:	d05d      	beq.n	80058c6 <__multiply+0x126>
 800580a:	6106      	str	r6, [r0, #16]
 800580c:	b003      	add	sp, #12
 800580e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005812:	f843 2b04 	str.w	r2, [r3], #4
 8005816:	e7e3      	b.n	80057e0 <__multiply+0x40>
 8005818:	f8b2 b000 	ldrh.w	fp, [r2]
 800581c:	f1bb 0f00 	cmp.w	fp, #0
 8005820:	d023      	beq.n	800586a <__multiply+0xca>
 8005822:	4689      	mov	r9, r1
 8005824:	46ac      	mov	ip, r5
 8005826:	f04f 0800 	mov.w	r8, #0
 800582a:	f859 4b04 	ldr.w	r4, [r9], #4
 800582e:	f8dc a000 	ldr.w	sl, [ip]
 8005832:	b2a3      	uxth	r3, r4
 8005834:	fa1f fa8a 	uxth.w	sl, sl
 8005838:	fb0b a303 	mla	r3, fp, r3, sl
 800583c:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8005840:	f8dc 4000 	ldr.w	r4, [ip]
 8005844:	4443      	add	r3, r8
 8005846:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800584a:	fb0b 840a 	mla	r4, fp, sl, r8
 800584e:	46e2      	mov	sl, ip
 8005850:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8005854:	b29b      	uxth	r3, r3
 8005856:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800585a:	454f      	cmp	r7, r9
 800585c:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8005860:	f84a 3b04 	str.w	r3, [sl], #4
 8005864:	d82b      	bhi.n	80058be <__multiply+0x11e>
 8005866:	f8cc 8004 	str.w	r8, [ip, #4]
 800586a:	9b01      	ldr	r3, [sp, #4]
 800586c:	3204      	adds	r2, #4
 800586e:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8005872:	f1ba 0f00 	cmp.w	sl, #0
 8005876:	d020      	beq.n	80058ba <__multiply+0x11a>
 8005878:	4689      	mov	r9, r1
 800587a:	46a8      	mov	r8, r5
 800587c:	f04f 0b00 	mov.w	fp, #0
 8005880:	682b      	ldr	r3, [r5, #0]
 8005882:	f8b9 c000 	ldrh.w	ip, [r9]
 8005886:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 800588a:	b29b      	uxth	r3, r3
 800588c:	fb0a 440c 	mla	r4, sl, ip, r4
 8005890:	46c4      	mov	ip, r8
 8005892:	445c      	add	r4, fp
 8005894:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8005898:	f84c 3b04 	str.w	r3, [ip], #4
 800589c:	f859 3b04 	ldr.w	r3, [r9], #4
 80058a0:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 80058a4:	0c1b      	lsrs	r3, r3, #16
 80058a6:	fb0a b303 	mla	r3, sl, r3, fp
 80058aa:	454f      	cmp	r7, r9
 80058ac:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 80058b0:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 80058b4:	d805      	bhi.n	80058c2 <__multiply+0x122>
 80058b6:	f8c8 3004 	str.w	r3, [r8, #4]
 80058ba:	3504      	adds	r5, #4
 80058bc:	e79b      	b.n	80057f6 <__multiply+0x56>
 80058be:	46d4      	mov	ip, sl
 80058c0:	e7b3      	b.n	800582a <__multiply+0x8a>
 80058c2:	46e0      	mov	r8, ip
 80058c4:	e7dd      	b.n	8005882 <__multiply+0xe2>
 80058c6:	3e01      	subs	r6, #1
 80058c8:	e799      	b.n	80057fe <__multiply+0x5e>
	...

080058cc <__pow5mult>:
 80058cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80058d0:	4615      	mov	r5, r2
 80058d2:	f012 0203 	ands.w	r2, r2, #3
 80058d6:	4606      	mov	r6, r0
 80058d8:	460f      	mov	r7, r1
 80058da:	d007      	beq.n	80058ec <__pow5mult+0x20>
 80058dc:	4c21      	ldr	r4, [pc, #132]	; (8005964 <__pow5mult+0x98>)
 80058de:	3a01      	subs	r2, #1
 80058e0:	2300      	movs	r3, #0
 80058e2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80058e6:	f7ff fe8b 	bl	8005600 <__multadd>
 80058ea:	4607      	mov	r7, r0
 80058ec:	10ad      	asrs	r5, r5, #2
 80058ee:	d035      	beq.n	800595c <__pow5mult+0x90>
 80058f0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80058f2:	b93c      	cbnz	r4, 8005904 <__pow5mult+0x38>
 80058f4:	2010      	movs	r0, #16
 80058f6:	f7ff fe05 	bl	8005504 <malloc>
 80058fa:	6270      	str	r0, [r6, #36]	; 0x24
 80058fc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8005900:	6004      	str	r4, [r0, #0]
 8005902:	60c4      	str	r4, [r0, #12]
 8005904:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8005908:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800590c:	b94c      	cbnz	r4, 8005922 <__pow5mult+0x56>
 800590e:	f240 2171 	movw	r1, #625	; 0x271
 8005912:	4630      	mov	r0, r6
 8005914:	f7ff ff3b 	bl	800578e <__i2b>
 8005918:	2300      	movs	r3, #0
 800591a:	4604      	mov	r4, r0
 800591c:	f8c8 0008 	str.w	r0, [r8, #8]
 8005920:	6003      	str	r3, [r0, #0]
 8005922:	f04f 0800 	mov.w	r8, #0
 8005926:	07eb      	lsls	r3, r5, #31
 8005928:	d50a      	bpl.n	8005940 <__pow5mult+0x74>
 800592a:	4639      	mov	r1, r7
 800592c:	4622      	mov	r2, r4
 800592e:	4630      	mov	r0, r6
 8005930:	f7ff ff36 	bl	80057a0 <__multiply>
 8005934:	4681      	mov	r9, r0
 8005936:	4639      	mov	r1, r7
 8005938:	4630      	mov	r0, r6
 800593a:	f7ff fe4a 	bl	80055d2 <_Bfree>
 800593e:	464f      	mov	r7, r9
 8005940:	106d      	asrs	r5, r5, #1
 8005942:	d00b      	beq.n	800595c <__pow5mult+0x90>
 8005944:	6820      	ldr	r0, [r4, #0]
 8005946:	b938      	cbnz	r0, 8005958 <__pow5mult+0x8c>
 8005948:	4622      	mov	r2, r4
 800594a:	4621      	mov	r1, r4
 800594c:	4630      	mov	r0, r6
 800594e:	f7ff ff27 	bl	80057a0 <__multiply>
 8005952:	6020      	str	r0, [r4, #0]
 8005954:	f8c0 8000 	str.w	r8, [r0]
 8005958:	4604      	mov	r4, r0
 800595a:	e7e4      	b.n	8005926 <__pow5mult+0x5a>
 800595c:	4638      	mov	r0, r7
 800595e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005962:	bf00      	nop
 8005964:	08006618 	.word	0x08006618

08005968 <__lshift>:
 8005968:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800596c:	460c      	mov	r4, r1
 800596e:	4607      	mov	r7, r0
 8005970:	4616      	mov	r6, r2
 8005972:	6923      	ldr	r3, [r4, #16]
 8005974:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8005978:	eb0a 0903 	add.w	r9, sl, r3
 800597c:	6849      	ldr	r1, [r1, #4]
 800597e:	68a3      	ldr	r3, [r4, #8]
 8005980:	f109 0501 	add.w	r5, r9, #1
 8005984:	42ab      	cmp	r3, r5
 8005986:	db32      	blt.n	80059ee <__lshift+0x86>
 8005988:	4638      	mov	r0, r7
 800598a:	f7ff fdee 	bl	800556a <_Balloc>
 800598e:	2300      	movs	r3, #0
 8005990:	4680      	mov	r8, r0
 8005992:	461a      	mov	r2, r3
 8005994:	f100 0114 	add.w	r1, r0, #20
 8005998:	4553      	cmp	r3, sl
 800599a:	db2b      	blt.n	80059f4 <__lshift+0x8c>
 800599c:	6920      	ldr	r0, [r4, #16]
 800599e:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80059a2:	f104 0314 	add.w	r3, r4, #20
 80059a6:	f016 021f 	ands.w	r2, r6, #31
 80059aa:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80059ae:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80059b2:	d025      	beq.n	8005a00 <__lshift+0x98>
 80059b4:	2000      	movs	r0, #0
 80059b6:	f1c2 0e20 	rsb	lr, r2, #32
 80059ba:	468a      	mov	sl, r1
 80059bc:	681e      	ldr	r6, [r3, #0]
 80059be:	4096      	lsls	r6, r2
 80059c0:	4330      	orrs	r0, r6
 80059c2:	f84a 0b04 	str.w	r0, [sl], #4
 80059c6:	f853 0b04 	ldr.w	r0, [r3], #4
 80059ca:	459c      	cmp	ip, r3
 80059cc:	fa20 f00e 	lsr.w	r0, r0, lr
 80059d0:	d814      	bhi.n	80059fc <__lshift+0x94>
 80059d2:	6048      	str	r0, [r1, #4]
 80059d4:	b108      	cbz	r0, 80059da <__lshift+0x72>
 80059d6:	f109 0502 	add.w	r5, r9, #2
 80059da:	3d01      	subs	r5, #1
 80059dc:	4638      	mov	r0, r7
 80059de:	f8c8 5010 	str.w	r5, [r8, #16]
 80059e2:	4621      	mov	r1, r4
 80059e4:	f7ff fdf5 	bl	80055d2 <_Bfree>
 80059e8:	4640      	mov	r0, r8
 80059ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80059ee:	3101      	adds	r1, #1
 80059f0:	005b      	lsls	r3, r3, #1
 80059f2:	e7c7      	b.n	8005984 <__lshift+0x1c>
 80059f4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 80059f8:	3301      	adds	r3, #1
 80059fa:	e7cd      	b.n	8005998 <__lshift+0x30>
 80059fc:	4651      	mov	r1, sl
 80059fe:	e7dc      	b.n	80059ba <__lshift+0x52>
 8005a00:	3904      	subs	r1, #4
 8005a02:	f853 2b04 	ldr.w	r2, [r3], #4
 8005a06:	459c      	cmp	ip, r3
 8005a08:	f841 2f04 	str.w	r2, [r1, #4]!
 8005a0c:	d8f9      	bhi.n	8005a02 <__lshift+0x9a>
 8005a0e:	e7e4      	b.n	80059da <__lshift+0x72>

08005a10 <__mcmp>:
 8005a10:	6903      	ldr	r3, [r0, #16]
 8005a12:	690a      	ldr	r2, [r1, #16]
 8005a14:	b530      	push	{r4, r5, lr}
 8005a16:	1a9b      	subs	r3, r3, r2
 8005a18:	d10c      	bne.n	8005a34 <__mcmp+0x24>
 8005a1a:	0092      	lsls	r2, r2, #2
 8005a1c:	3014      	adds	r0, #20
 8005a1e:	3114      	adds	r1, #20
 8005a20:	1884      	adds	r4, r0, r2
 8005a22:	4411      	add	r1, r2
 8005a24:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8005a28:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8005a2c:	4295      	cmp	r5, r2
 8005a2e:	d003      	beq.n	8005a38 <__mcmp+0x28>
 8005a30:	d305      	bcc.n	8005a3e <__mcmp+0x2e>
 8005a32:	2301      	movs	r3, #1
 8005a34:	4618      	mov	r0, r3
 8005a36:	bd30      	pop	{r4, r5, pc}
 8005a38:	42a0      	cmp	r0, r4
 8005a3a:	d3f3      	bcc.n	8005a24 <__mcmp+0x14>
 8005a3c:	e7fa      	b.n	8005a34 <__mcmp+0x24>
 8005a3e:	f04f 33ff 	mov.w	r3, #4294967295
 8005a42:	e7f7      	b.n	8005a34 <__mcmp+0x24>

08005a44 <__mdiff>:
 8005a44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005a48:	460d      	mov	r5, r1
 8005a4a:	4607      	mov	r7, r0
 8005a4c:	4611      	mov	r1, r2
 8005a4e:	4628      	mov	r0, r5
 8005a50:	4614      	mov	r4, r2
 8005a52:	f7ff ffdd 	bl	8005a10 <__mcmp>
 8005a56:	1e06      	subs	r6, r0, #0
 8005a58:	d108      	bne.n	8005a6c <__mdiff+0x28>
 8005a5a:	4631      	mov	r1, r6
 8005a5c:	4638      	mov	r0, r7
 8005a5e:	f7ff fd84 	bl	800556a <_Balloc>
 8005a62:	2301      	movs	r3, #1
 8005a64:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8005a68:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005a6c:	bfa4      	itt	ge
 8005a6e:	4623      	movge	r3, r4
 8005a70:	462c      	movge	r4, r5
 8005a72:	4638      	mov	r0, r7
 8005a74:	6861      	ldr	r1, [r4, #4]
 8005a76:	bfa6      	itte	ge
 8005a78:	461d      	movge	r5, r3
 8005a7a:	2600      	movge	r6, #0
 8005a7c:	2601      	movlt	r6, #1
 8005a7e:	f7ff fd74 	bl	800556a <_Balloc>
 8005a82:	f04f 0e00 	mov.w	lr, #0
 8005a86:	60c6      	str	r6, [r0, #12]
 8005a88:	692b      	ldr	r3, [r5, #16]
 8005a8a:	6926      	ldr	r6, [r4, #16]
 8005a8c:	f104 0214 	add.w	r2, r4, #20
 8005a90:	f105 0914 	add.w	r9, r5, #20
 8005a94:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8005a98:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8005a9c:	f100 0114 	add.w	r1, r0, #20
 8005aa0:	f852 ab04 	ldr.w	sl, [r2], #4
 8005aa4:	f859 5b04 	ldr.w	r5, [r9], #4
 8005aa8:	fa1f f38a 	uxth.w	r3, sl
 8005aac:	4473      	add	r3, lr
 8005aae:	b2ac      	uxth	r4, r5
 8005ab0:	1b1b      	subs	r3, r3, r4
 8005ab2:	0c2c      	lsrs	r4, r5, #16
 8005ab4:	ebc4 441a 	rsb	r4, r4, sl, lsr #16
 8005ab8:	eb04 4423 	add.w	r4, r4, r3, asr #16
 8005abc:	b29b      	uxth	r3, r3
 8005abe:	ea4f 4e24 	mov.w	lr, r4, asr #16
 8005ac2:	45c8      	cmp	r8, r9
 8005ac4:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8005ac8:	4694      	mov	ip, r2
 8005aca:	f841 4b04 	str.w	r4, [r1], #4
 8005ace:	d8e7      	bhi.n	8005aa0 <__mdiff+0x5c>
 8005ad0:	45bc      	cmp	ip, r7
 8005ad2:	d304      	bcc.n	8005ade <__mdiff+0x9a>
 8005ad4:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8005ad8:	b183      	cbz	r3, 8005afc <__mdiff+0xb8>
 8005ada:	6106      	str	r6, [r0, #16]
 8005adc:	e7c4      	b.n	8005a68 <__mdiff+0x24>
 8005ade:	f85c 4b04 	ldr.w	r4, [ip], #4
 8005ae2:	b2a2      	uxth	r2, r4
 8005ae4:	4472      	add	r2, lr
 8005ae6:	1413      	asrs	r3, r2, #16
 8005ae8:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8005aec:	b292      	uxth	r2, r2
 8005aee:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8005af2:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8005af6:	f841 2b04 	str.w	r2, [r1], #4
 8005afa:	e7e9      	b.n	8005ad0 <__mdiff+0x8c>
 8005afc:	3e01      	subs	r6, #1
 8005afe:	e7e9      	b.n	8005ad4 <__mdiff+0x90>

08005b00 <__ulp>:
 8005b00:	4b10      	ldr	r3, [pc, #64]	; (8005b44 <__ulp+0x44>)
 8005b02:	400b      	ands	r3, r1
 8005b04:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	dd02      	ble.n	8005b12 <__ulp+0x12>
 8005b0c:	2000      	movs	r0, #0
 8005b0e:	4619      	mov	r1, r3
 8005b10:	4770      	bx	lr
 8005b12:	425b      	negs	r3, r3
 8005b14:	151b      	asrs	r3, r3, #20
 8005b16:	2b13      	cmp	r3, #19
 8005b18:	f04f 0000 	mov.w	r0, #0
 8005b1c:	f04f 0100 	mov.w	r1, #0
 8005b20:	dc04      	bgt.n	8005b2c <__ulp+0x2c>
 8005b22:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8005b26:	fa42 f103 	asr.w	r1, r2, r3
 8005b2a:	4770      	bx	lr
 8005b2c:	2201      	movs	r2, #1
 8005b2e:	3b14      	subs	r3, #20
 8005b30:	2b1e      	cmp	r3, #30
 8005b32:	bfce      	itee	gt
 8005b34:	4613      	movgt	r3, r2
 8005b36:	f1c3 031f 	rsble	r3, r3, #31
 8005b3a:	fa02 f303 	lslle.w	r3, r2, r3
 8005b3e:	4618      	mov	r0, r3
 8005b40:	4770      	bx	lr
 8005b42:	bf00      	nop
 8005b44:	7ff00000 	.word	0x7ff00000

08005b48 <__b2d>:
 8005b48:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005b4c:	6907      	ldr	r7, [r0, #16]
 8005b4e:	f100 0914 	add.w	r9, r0, #20
 8005b52:	eb09 0787 	add.w	r7, r9, r7, lsl #2
 8005b56:	f857 6c04 	ldr.w	r6, [r7, #-4]
 8005b5a:	f1a7 0804 	sub.w	r8, r7, #4
 8005b5e:	4630      	mov	r0, r6
 8005b60:	f7ff fdc7 	bl	80056f2 <__hi0bits>
 8005b64:	f1c0 0320 	rsb	r3, r0, #32
 8005b68:	280a      	cmp	r0, #10
 8005b6a:	600b      	str	r3, [r1, #0]
 8005b6c:	491e      	ldr	r1, [pc, #120]	; (8005be8 <__b2d+0xa0>)
 8005b6e:	dc17      	bgt.n	8005ba0 <__b2d+0x58>
 8005b70:	45c1      	cmp	r9, r8
 8005b72:	bf28      	it	cs
 8005b74:	2200      	movcs	r2, #0
 8005b76:	f1c0 0c0b 	rsb	ip, r0, #11
 8005b7a:	fa26 f30c 	lsr.w	r3, r6, ip
 8005b7e:	bf38      	it	cc
 8005b80:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 8005b84:	ea43 0501 	orr.w	r5, r3, r1
 8005b88:	f100 0315 	add.w	r3, r0, #21
 8005b8c:	fa06 f303 	lsl.w	r3, r6, r3
 8005b90:	fa22 f20c 	lsr.w	r2, r2, ip
 8005b94:	ea43 0402 	orr.w	r4, r3, r2
 8005b98:	4620      	mov	r0, r4
 8005b9a:	4629      	mov	r1, r5
 8005b9c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005ba0:	45c1      	cmp	r9, r8
 8005ba2:	bf3a      	itte	cc
 8005ba4:	f1a7 0808 	subcc.w	r8, r7, #8
 8005ba8:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 8005bac:	2200      	movcs	r2, #0
 8005bae:	f1b0 030b 	subs.w	r3, r0, #11
 8005bb2:	d015      	beq.n	8005be0 <__b2d+0x98>
 8005bb4:	409e      	lsls	r6, r3
 8005bb6:	f1c3 0720 	rsb	r7, r3, #32
 8005bba:	f046 567f 	orr.w	r6, r6, #1069547520	; 0x3fc00000
 8005bbe:	fa22 f107 	lsr.w	r1, r2, r7
 8005bc2:	45c8      	cmp	r8, r9
 8005bc4:	f446 1640 	orr.w	r6, r6, #3145728	; 0x300000
 8005bc8:	ea46 0501 	orr.w	r5, r6, r1
 8005bcc:	bf94      	ite	ls
 8005bce:	2100      	movls	r1, #0
 8005bd0:	f858 1c04 	ldrhi.w	r1, [r8, #-4]
 8005bd4:	fa02 f003 	lsl.w	r0, r2, r3
 8005bd8:	40f9      	lsrs	r1, r7
 8005bda:	ea40 0401 	orr.w	r4, r0, r1
 8005bde:	e7db      	b.n	8005b98 <__b2d+0x50>
 8005be0:	ea46 0501 	orr.w	r5, r6, r1
 8005be4:	4614      	mov	r4, r2
 8005be6:	e7d7      	b.n	8005b98 <__b2d+0x50>
 8005be8:	3ff00000 	.word	0x3ff00000

08005bec <__d2b>:
 8005bec:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8005bf0:	461c      	mov	r4, r3
 8005bf2:	e9dd 6508 	ldrd	r6, r5, [sp, #32]
 8005bf6:	2101      	movs	r1, #1
 8005bf8:	4690      	mov	r8, r2
 8005bfa:	f7ff fcb6 	bl	800556a <_Balloc>
 8005bfe:	f3c4 0213 	ubfx	r2, r4, #0, #20
 8005c02:	f3c4 540a 	ubfx	r4, r4, #20, #11
 8005c06:	4607      	mov	r7, r0
 8005c08:	bb34      	cbnz	r4, 8005c58 <__d2b+0x6c>
 8005c0a:	9201      	str	r2, [sp, #4]
 8005c0c:	f1b8 0200 	subs.w	r2, r8, #0
 8005c10:	d027      	beq.n	8005c62 <__d2b+0x76>
 8005c12:	a802      	add	r0, sp, #8
 8005c14:	f840 2d08 	str.w	r2, [r0, #-8]!
 8005c18:	f7ff fd8a 	bl	8005730 <__lo0bits>
 8005c1c:	9900      	ldr	r1, [sp, #0]
 8005c1e:	b1f0      	cbz	r0, 8005c5e <__d2b+0x72>
 8005c20:	9a01      	ldr	r2, [sp, #4]
 8005c22:	f1c0 0320 	rsb	r3, r0, #32
 8005c26:	fa02 f303 	lsl.w	r3, r2, r3
 8005c2a:	430b      	orrs	r3, r1
 8005c2c:	40c2      	lsrs	r2, r0
 8005c2e:	617b      	str	r3, [r7, #20]
 8005c30:	9201      	str	r2, [sp, #4]
 8005c32:	9b01      	ldr	r3, [sp, #4]
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	bf14      	ite	ne
 8005c38:	2102      	movne	r1, #2
 8005c3a:	2101      	moveq	r1, #1
 8005c3c:	61bb      	str	r3, [r7, #24]
 8005c3e:	6139      	str	r1, [r7, #16]
 8005c40:	b1c4      	cbz	r4, 8005c74 <__d2b+0x88>
 8005c42:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8005c46:	4404      	add	r4, r0
 8005c48:	6034      	str	r4, [r6, #0]
 8005c4a:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8005c4e:	6028      	str	r0, [r5, #0]
 8005c50:	4638      	mov	r0, r7
 8005c52:	b002      	add	sp, #8
 8005c54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005c58:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8005c5c:	e7d5      	b.n	8005c0a <__d2b+0x1e>
 8005c5e:	6179      	str	r1, [r7, #20]
 8005c60:	e7e7      	b.n	8005c32 <__d2b+0x46>
 8005c62:	a801      	add	r0, sp, #4
 8005c64:	f7ff fd64 	bl	8005730 <__lo0bits>
 8005c68:	2101      	movs	r1, #1
 8005c6a:	9b01      	ldr	r3, [sp, #4]
 8005c6c:	6139      	str	r1, [r7, #16]
 8005c6e:	617b      	str	r3, [r7, #20]
 8005c70:	3020      	adds	r0, #32
 8005c72:	e7e5      	b.n	8005c40 <__d2b+0x54>
 8005c74:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8005c78:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8005c7c:	6030      	str	r0, [r6, #0]
 8005c7e:	6918      	ldr	r0, [r3, #16]
 8005c80:	f7ff fd37 	bl	80056f2 <__hi0bits>
 8005c84:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8005c88:	e7e1      	b.n	8005c4e <__d2b+0x62>

08005c8a <__ratio>:
 8005c8a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005c8e:	4688      	mov	r8, r1
 8005c90:	4669      	mov	r1, sp
 8005c92:	4681      	mov	r9, r0
 8005c94:	f7ff ff58 	bl	8005b48 <__b2d>
 8005c98:	468b      	mov	fp, r1
 8005c9a:	4606      	mov	r6, r0
 8005c9c:	460f      	mov	r7, r1
 8005c9e:	4640      	mov	r0, r8
 8005ca0:	a901      	add	r1, sp, #4
 8005ca2:	f7ff ff51 	bl	8005b48 <__b2d>
 8005ca6:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8005caa:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8005cae:	460d      	mov	r5, r1
 8005cb0:	eba3 0c02 	sub.w	ip, r3, r2
 8005cb4:	e9dd 3200 	ldrd	r3, r2, [sp]
 8005cb8:	1a9b      	subs	r3, r3, r2
 8005cba:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	bfd5      	itete	le
 8005cc2:	460a      	movle	r2, r1
 8005cc4:	463a      	movgt	r2, r7
 8005cc6:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8005cca:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 8005cce:	bfd8      	it	le
 8005cd0:	eb02 5503 	addle.w	r5, r2, r3, lsl #20
 8005cd4:	462b      	mov	r3, r5
 8005cd6:	4602      	mov	r2, r0
 8005cd8:	4659      	mov	r1, fp
 8005cda:	4630      	mov	r0, r6
 8005cdc:	f7fa fd26 	bl	800072c <__aeabi_ddiv>
 8005ce0:	b003      	add	sp, #12
 8005ce2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08005ce6 <__copybits>:
 8005ce6:	3901      	subs	r1, #1
 8005ce8:	b510      	push	{r4, lr}
 8005cea:	1149      	asrs	r1, r1, #5
 8005cec:	6914      	ldr	r4, [r2, #16]
 8005cee:	3101      	adds	r1, #1
 8005cf0:	f102 0314 	add.w	r3, r2, #20
 8005cf4:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8005cf8:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8005cfc:	42a3      	cmp	r3, r4
 8005cfe:	4602      	mov	r2, r0
 8005d00:	d303      	bcc.n	8005d0a <__copybits+0x24>
 8005d02:	2300      	movs	r3, #0
 8005d04:	428a      	cmp	r2, r1
 8005d06:	d305      	bcc.n	8005d14 <__copybits+0x2e>
 8005d08:	bd10      	pop	{r4, pc}
 8005d0a:	f853 2b04 	ldr.w	r2, [r3], #4
 8005d0e:	f840 2b04 	str.w	r2, [r0], #4
 8005d12:	e7f3      	b.n	8005cfc <__copybits+0x16>
 8005d14:	f842 3b04 	str.w	r3, [r2], #4
 8005d18:	e7f4      	b.n	8005d04 <__copybits+0x1e>

08005d1a <__any_on>:
 8005d1a:	f100 0214 	add.w	r2, r0, #20
 8005d1e:	6900      	ldr	r0, [r0, #16]
 8005d20:	114b      	asrs	r3, r1, #5
 8005d22:	4298      	cmp	r0, r3
 8005d24:	b510      	push	{r4, lr}
 8005d26:	db11      	blt.n	8005d4c <__any_on+0x32>
 8005d28:	dd0a      	ble.n	8005d40 <__any_on+0x26>
 8005d2a:	f011 011f 	ands.w	r1, r1, #31
 8005d2e:	d007      	beq.n	8005d40 <__any_on+0x26>
 8005d30:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8005d34:	fa24 f001 	lsr.w	r0, r4, r1
 8005d38:	fa00 f101 	lsl.w	r1, r0, r1
 8005d3c:	428c      	cmp	r4, r1
 8005d3e:	d10b      	bne.n	8005d58 <__any_on+0x3e>
 8005d40:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8005d44:	4293      	cmp	r3, r2
 8005d46:	d803      	bhi.n	8005d50 <__any_on+0x36>
 8005d48:	2000      	movs	r0, #0
 8005d4a:	bd10      	pop	{r4, pc}
 8005d4c:	4603      	mov	r3, r0
 8005d4e:	e7f7      	b.n	8005d40 <__any_on+0x26>
 8005d50:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8005d54:	2900      	cmp	r1, #0
 8005d56:	d0f5      	beq.n	8005d44 <__any_on+0x2a>
 8005d58:	2001      	movs	r0, #1
 8005d5a:	e7f6      	b.n	8005d4a <__any_on+0x30>

08005d5c <_calloc_r>:
 8005d5c:	b538      	push	{r3, r4, r5, lr}
 8005d5e:	fb02 f401 	mul.w	r4, r2, r1
 8005d62:	4621      	mov	r1, r4
 8005d64:	f000 f854 	bl	8005e10 <_malloc_r>
 8005d68:	4605      	mov	r5, r0
 8005d6a:	b118      	cbz	r0, 8005d74 <_calloc_r+0x18>
 8005d6c:	4622      	mov	r2, r4
 8005d6e:	2100      	movs	r1, #0
 8005d70:	f7fc fa2c 	bl	80021cc <memset>
 8005d74:	4628      	mov	r0, r5
 8005d76:	bd38      	pop	{r3, r4, r5, pc}

08005d78 <_free_r>:
 8005d78:	b538      	push	{r3, r4, r5, lr}
 8005d7a:	4605      	mov	r5, r0
 8005d7c:	2900      	cmp	r1, #0
 8005d7e:	d043      	beq.n	8005e08 <_free_r+0x90>
 8005d80:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005d84:	1f0c      	subs	r4, r1, #4
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	bfb8      	it	lt
 8005d8a:	18e4      	addlt	r4, r4, r3
 8005d8c:	f000 facd 	bl	800632a <__malloc_lock>
 8005d90:	4a1e      	ldr	r2, [pc, #120]	; (8005e0c <_free_r+0x94>)
 8005d92:	6813      	ldr	r3, [r2, #0]
 8005d94:	4610      	mov	r0, r2
 8005d96:	b933      	cbnz	r3, 8005da6 <_free_r+0x2e>
 8005d98:	6063      	str	r3, [r4, #4]
 8005d9a:	6014      	str	r4, [r2, #0]
 8005d9c:	4628      	mov	r0, r5
 8005d9e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005da2:	f000 bac3 	b.w	800632c <__malloc_unlock>
 8005da6:	42a3      	cmp	r3, r4
 8005da8:	d90b      	bls.n	8005dc2 <_free_r+0x4a>
 8005daa:	6821      	ldr	r1, [r4, #0]
 8005dac:	1862      	adds	r2, r4, r1
 8005dae:	4293      	cmp	r3, r2
 8005db0:	bf01      	itttt	eq
 8005db2:	681a      	ldreq	r2, [r3, #0]
 8005db4:	685b      	ldreq	r3, [r3, #4]
 8005db6:	1852      	addeq	r2, r2, r1
 8005db8:	6022      	streq	r2, [r4, #0]
 8005dba:	6063      	str	r3, [r4, #4]
 8005dbc:	6004      	str	r4, [r0, #0]
 8005dbe:	e7ed      	b.n	8005d9c <_free_r+0x24>
 8005dc0:	4613      	mov	r3, r2
 8005dc2:	685a      	ldr	r2, [r3, #4]
 8005dc4:	b10a      	cbz	r2, 8005dca <_free_r+0x52>
 8005dc6:	42a2      	cmp	r2, r4
 8005dc8:	d9fa      	bls.n	8005dc0 <_free_r+0x48>
 8005dca:	6819      	ldr	r1, [r3, #0]
 8005dcc:	1858      	adds	r0, r3, r1
 8005dce:	42a0      	cmp	r0, r4
 8005dd0:	d10b      	bne.n	8005dea <_free_r+0x72>
 8005dd2:	6820      	ldr	r0, [r4, #0]
 8005dd4:	4401      	add	r1, r0
 8005dd6:	1858      	adds	r0, r3, r1
 8005dd8:	4282      	cmp	r2, r0
 8005dda:	6019      	str	r1, [r3, #0]
 8005ddc:	d1de      	bne.n	8005d9c <_free_r+0x24>
 8005dde:	6810      	ldr	r0, [r2, #0]
 8005de0:	6852      	ldr	r2, [r2, #4]
 8005de2:	4401      	add	r1, r0
 8005de4:	6019      	str	r1, [r3, #0]
 8005de6:	605a      	str	r2, [r3, #4]
 8005de8:	e7d8      	b.n	8005d9c <_free_r+0x24>
 8005dea:	d902      	bls.n	8005df2 <_free_r+0x7a>
 8005dec:	230c      	movs	r3, #12
 8005dee:	602b      	str	r3, [r5, #0]
 8005df0:	e7d4      	b.n	8005d9c <_free_r+0x24>
 8005df2:	6820      	ldr	r0, [r4, #0]
 8005df4:	1821      	adds	r1, r4, r0
 8005df6:	428a      	cmp	r2, r1
 8005df8:	bf01      	itttt	eq
 8005dfa:	6811      	ldreq	r1, [r2, #0]
 8005dfc:	6852      	ldreq	r2, [r2, #4]
 8005dfe:	1809      	addeq	r1, r1, r0
 8005e00:	6021      	streq	r1, [r4, #0]
 8005e02:	6062      	str	r2, [r4, #4]
 8005e04:	605c      	str	r4, [r3, #4]
 8005e06:	e7c9      	b.n	8005d9c <_free_r+0x24>
 8005e08:	bd38      	pop	{r3, r4, r5, pc}
 8005e0a:	bf00      	nop
 8005e0c:	20000214 	.word	0x20000214

08005e10 <_malloc_r>:
 8005e10:	b570      	push	{r4, r5, r6, lr}
 8005e12:	1ccd      	adds	r5, r1, #3
 8005e14:	f025 0503 	bic.w	r5, r5, #3
 8005e18:	3508      	adds	r5, #8
 8005e1a:	2d0c      	cmp	r5, #12
 8005e1c:	bf38      	it	cc
 8005e1e:	250c      	movcc	r5, #12
 8005e20:	2d00      	cmp	r5, #0
 8005e22:	4606      	mov	r6, r0
 8005e24:	db01      	blt.n	8005e2a <_malloc_r+0x1a>
 8005e26:	42a9      	cmp	r1, r5
 8005e28:	d903      	bls.n	8005e32 <_malloc_r+0x22>
 8005e2a:	230c      	movs	r3, #12
 8005e2c:	6033      	str	r3, [r6, #0]
 8005e2e:	2000      	movs	r0, #0
 8005e30:	bd70      	pop	{r4, r5, r6, pc}
 8005e32:	f000 fa7a 	bl	800632a <__malloc_lock>
 8005e36:	4a21      	ldr	r2, [pc, #132]	; (8005ebc <_malloc_r+0xac>)
 8005e38:	6814      	ldr	r4, [r2, #0]
 8005e3a:	4621      	mov	r1, r4
 8005e3c:	b991      	cbnz	r1, 8005e64 <_malloc_r+0x54>
 8005e3e:	4c20      	ldr	r4, [pc, #128]	; (8005ec0 <_malloc_r+0xb0>)
 8005e40:	6823      	ldr	r3, [r4, #0]
 8005e42:	b91b      	cbnz	r3, 8005e4c <_malloc_r+0x3c>
 8005e44:	4630      	mov	r0, r6
 8005e46:	f000 f98f 	bl	8006168 <_sbrk_r>
 8005e4a:	6020      	str	r0, [r4, #0]
 8005e4c:	4629      	mov	r1, r5
 8005e4e:	4630      	mov	r0, r6
 8005e50:	f000 f98a 	bl	8006168 <_sbrk_r>
 8005e54:	1c43      	adds	r3, r0, #1
 8005e56:	d124      	bne.n	8005ea2 <_malloc_r+0x92>
 8005e58:	230c      	movs	r3, #12
 8005e5a:	4630      	mov	r0, r6
 8005e5c:	6033      	str	r3, [r6, #0]
 8005e5e:	f000 fa65 	bl	800632c <__malloc_unlock>
 8005e62:	e7e4      	b.n	8005e2e <_malloc_r+0x1e>
 8005e64:	680b      	ldr	r3, [r1, #0]
 8005e66:	1b5b      	subs	r3, r3, r5
 8005e68:	d418      	bmi.n	8005e9c <_malloc_r+0x8c>
 8005e6a:	2b0b      	cmp	r3, #11
 8005e6c:	d90f      	bls.n	8005e8e <_malloc_r+0x7e>
 8005e6e:	600b      	str	r3, [r1, #0]
 8005e70:	18cc      	adds	r4, r1, r3
 8005e72:	50cd      	str	r5, [r1, r3]
 8005e74:	4630      	mov	r0, r6
 8005e76:	f000 fa59 	bl	800632c <__malloc_unlock>
 8005e7a:	f104 000b 	add.w	r0, r4, #11
 8005e7e:	1d23      	adds	r3, r4, #4
 8005e80:	f020 0007 	bic.w	r0, r0, #7
 8005e84:	1ac3      	subs	r3, r0, r3
 8005e86:	d0d3      	beq.n	8005e30 <_malloc_r+0x20>
 8005e88:	425a      	negs	r2, r3
 8005e8a:	50e2      	str	r2, [r4, r3]
 8005e8c:	e7d0      	b.n	8005e30 <_malloc_r+0x20>
 8005e8e:	684b      	ldr	r3, [r1, #4]
 8005e90:	428c      	cmp	r4, r1
 8005e92:	bf16      	itet	ne
 8005e94:	6063      	strne	r3, [r4, #4]
 8005e96:	6013      	streq	r3, [r2, #0]
 8005e98:	460c      	movne	r4, r1
 8005e9a:	e7eb      	b.n	8005e74 <_malloc_r+0x64>
 8005e9c:	460c      	mov	r4, r1
 8005e9e:	6849      	ldr	r1, [r1, #4]
 8005ea0:	e7cc      	b.n	8005e3c <_malloc_r+0x2c>
 8005ea2:	1cc4      	adds	r4, r0, #3
 8005ea4:	f024 0403 	bic.w	r4, r4, #3
 8005ea8:	42a0      	cmp	r0, r4
 8005eaa:	d005      	beq.n	8005eb8 <_malloc_r+0xa8>
 8005eac:	1a21      	subs	r1, r4, r0
 8005eae:	4630      	mov	r0, r6
 8005eb0:	f000 f95a 	bl	8006168 <_sbrk_r>
 8005eb4:	3001      	adds	r0, #1
 8005eb6:	d0cf      	beq.n	8005e58 <_malloc_r+0x48>
 8005eb8:	6025      	str	r5, [r4, #0]
 8005eba:	e7db      	b.n	8005e74 <_malloc_r+0x64>
 8005ebc:	20000214 	.word	0x20000214
 8005ec0:	20000218 	.word	0x20000218

08005ec4 <__ssputs_r>:
 8005ec4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005ec8:	688e      	ldr	r6, [r1, #8]
 8005eca:	4682      	mov	sl, r0
 8005ecc:	429e      	cmp	r6, r3
 8005ece:	460c      	mov	r4, r1
 8005ed0:	4690      	mov	r8, r2
 8005ed2:	4699      	mov	r9, r3
 8005ed4:	d837      	bhi.n	8005f46 <__ssputs_r+0x82>
 8005ed6:	898a      	ldrh	r2, [r1, #12]
 8005ed8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005edc:	d031      	beq.n	8005f42 <__ssputs_r+0x7e>
 8005ede:	2302      	movs	r3, #2
 8005ee0:	6825      	ldr	r5, [r4, #0]
 8005ee2:	6909      	ldr	r1, [r1, #16]
 8005ee4:	1a6f      	subs	r7, r5, r1
 8005ee6:	6965      	ldr	r5, [r4, #20]
 8005ee8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005eec:	fb95 f5f3 	sdiv	r5, r5, r3
 8005ef0:	f109 0301 	add.w	r3, r9, #1
 8005ef4:	443b      	add	r3, r7
 8005ef6:	429d      	cmp	r5, r3
 8005ef8:	bf38      	it	cc
 8005efa:	461d      	movcc	r5, r3
 8005efc:	0553      	lsls	r3, r2, #21
 8005efe:	d530      	bpl.n	8005f62 <__ssputs_r+0x9e>
 8005f00:	4629      	mov	r1, r5
 8005f02:	f7ff ff85 	bl	8005e10 <_malloc_r>
 8005f06:	4606      	mov	r6, r0
 8005f08:	b950      	cbnz	r0, 8005f20 <__ssputs_r+0x5c>
 8005f0a:	230c      	movs	r3, #12
 8005f0c:	f04f 30ff 	mov.w	r0, #4294967295
 8005f10:	f8ca 3000 	str.w	r3, [sl]
 8005f14:	89a3      	ldrh	r3, [r4, #12]
 8005f16:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005f1a:	81a3      	strh	r3, [r4, #12]
 8005f1c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005f20:	463a      	mov	r2, r7
 8005f22:	6921      	ldr	r1, [r4, #16]
 8005f24:	f7ff fb16 	bl	8005554 <memcpy>
 8005f28:	89a3      	ldrh	r3, [r4, #12]
 8005f2a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005f2e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005f32:	81a3      	strh	r3, [r4, #12]
 8005f34:	6126      	str	r6, [r4, #16]
 8005f36:	443e      	add	r6, r7
 8005f38:	6026      	str	r6, [r4, #0]
 8005f3a:	464e      	mov	r6, r9
 8005f3c:	6165      	str	r5, [r4, #20]
 8005f3e:	1bed      	subs	r5, r5, r7
 8005f40:	60a5      	str	r5, [r4, #8]
 8005f42:	454e      	cmp	r6, r9
 8005f44:	d900      	bls.n	8005f48 <__ssputs_r+0x84>
 8005f46:	464e      	mov	r6, r9
 8005f48:	4632      	mov	r2, r6
 8005f4a:	4641      	mov	r1, r8
 8005f4c:	6820      	ldr	r0, [r4, #0]
 8005f4e:	f000 f9d3 	bl	80062f8 <memmove>
 8005f52:	68a3      	ldr	r3, [r4, #8]
 8005f54:	2000      	movs	r0, #0
 8005f56:	1b9b      	subs	r3, r3, r6
 8005f58:	60a3      	str	r3, [r4, #8]
 8005f5a:	6823      	ldr	r3, [r4, #0]
 8005f5c:	441e      	add	r6, r3
 8005f5e:	6026      	str	r6, [r4, #0]
 8005f60:	e7dc      	b.n	8005f1c <__ssputs_r+0x58>
 8005f62:	462a      	mov	r2, r5
 8005f64:	f000 f9e3 	bl	800632e <_realloc_r>
 8005f68:	4606      	mov	r6, r0
 8005f6a:	2800      	cmp	r0, #0
 8005f6c:	d1e2      	bne.n	8005f34 <__ssputs_r+0x70>
 8005f6e:	6921      	ldr	r1, [r4, #16]
 8005f70:	4650      	mov	r0, sl
 8005f72:	f7ff ff01 	bl	8005d78 <_free_r>
 8005f76:	e7c8      	b.n	8005f0a <__ssputs_r+0x46>

08005f78 <_svfiprintf_r>:
 8005f78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f7c:	461d      	mov	r5, r3
 8005f7e:	898b      	ldrh	r3, [r1, #12]
 8005f80:	b09d      	sub	sp, #116	; 0x74
 8005f82:	061f      	lsls	r7, r3, #24
 8005f84:	4680      	mov	r8, r0
 8005f86:	460c      	mov	r4, r1
 8005f88:	4616      	mov	r6, r2
 8005f8a:	d50f      	bpl.n	8005fac <_svfiprintf_r+0x34>
 8005f8c:	690b      	ldr	r3, [r1, #16]
 8005f8e:	b96b      	cbnz	r3, 8005fac <_svfiprintf_r+0x34>
 8005f90:	2140      	movs	r1, #64	; 0x40
 8005f92:	f7ff ff3d 	bl	8005e10 <_malloc_r>
 8005f96:	6020      	str	r0, [r4, #0]
 8005f98:	6120      	str	r0, [r4, #16]
 8005f9a:	b928      	cbnz	r0, 8005fa8 <_svfiprintf_r+0x30>
 8005f9c:	230c      	movs	r3, #12
 8005f9e:	f8c8 3000 	str.w	r3, [r8]
 8005fa2:	f04f 30ff 	mov.w	r0, #4294967295
 8005fa6:	e0c8      	b.n	800613a <_svfiprintf_r+0x1c2>
 8005fa8:	2340      	movs	r3, #64	; 0x40
 8005faa:	6163      	str	r3, [r4, #20]
 8005fac:	2300      	movs	r3, #0
 8005fae:	9309      	str	r3, [sp, #36]	; 0x24
 8005fb0:	2320      	movs	r3, #32
 8005fb2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005fb6:	2330      	movs	r3, #48	; 0x30
 8005fb8:	f04f 0b01 	mov.w	fp, #1
 8005fbc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005fc0:	9503      	str	r5, [sp, #12]
 8005fc2:	4637      	mov	r7, r6
 8005fc4:	463d      	mov	r5, r7
 8005fc6:	f815 3b01 	ldrb.w	r3, [r5], #1
 8005fca:	b10b      	cbz	r3, 8005fd0 <_svfiprintf_r+0x58>
 8005fcc:	2b25      	cmp	r3, #37	; 0x25
 8005fce:	d13e      	bne.n	800604e <_svfiprintf_r+0xd6>
 8005fd0:	ebb7 0a06 	subs.w	sl, r7, r6
 8005fd4:	d00b      	beq.n	8005fee <_svfiprintf_r+0x76>
 8005fd6:	4653      	mov	r3, sl
 8005fd8:	4632      	mov	r2, r6
 8005fda:	4621      	mov	r1, r4
 8005fdc:	4640      	mov	r0, r8
 8005fde:	f7ff ff71 	bl	8005ec4 <__ssputs_r>
 8005fe2:	3001      	adds	r0, #1
 8005fe4:	f000 80a4 	beq.w	8006130 <_svfiprintf_r+0x1b8>
 8005fe8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005fea:	4453      	add	r3, sl
 8005fec:	9309      	str	r3, [sp, #36]	; 0x24
 8005fee:	783b      	ldrb	r3, [r7, #0]
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	f000 809d 	beq.w	8006130 <_svfiprintf_r+0x1b8>
 8005ff6:	2300      	movs	r3, #0
 8005ff8:	f04f 32ff 	mov.w	r2, #4294967295
 8005ffc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006000:	9304      	str	r3, [sp, #16]
 8006002:	9307      	str	r3, [sp, #28]
 8006004:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006008:	931a      	str	r3, [sp, #104]	; 0x68
 800600a:	462f      	mov	r7, r5
 800600c:	2205      	movs	r2, #5
 800600e:	f817 1b01 	ldrb.w	r1, [r7], #1
 8006012:	4850      	ldr	r0, [pc, #320]	; (8006154 <_svfiprintf_r+0x1dc>)
 8006014:	f7ff fa90 	bl	8005538 <memchr>
 8006018:	9b04      	ldr	r3, [sp, #16]
 800601a:	b9d0      	cbnz	r0, 8006052 <_svfiprintf_r+0xda>
 800601c:	06d9      	lsls	r1, r3, #27
 800601e:	bf44      	itt	mi
 8006020:	2220      	movmi	r2, #32
 8006022:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8006026:	071a      	lsls	r2, r3, #28
 8006028:	bf44      	itt	mi
 800602a:	222b      	movmi	r2, #43	; 0x2b
 800602c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8006030:	782a      	ldrb	r2, [r5, #0]
 8006032:	2a2a      	cmp	r2, #42	; 0x2a
 8006034:	d015      	beq.n	8006062 <_svfiprintf_r+0xea>
 8006036:	462f      	mov	r7, r5
 8006038:	2000      	movs	r0, #0
 800603a:	250a      	movs	r5, #10
 800603c:	9a07      	ldr	r2, [sp, #28]
 800603e:	4639      	mov	r1, r7
 8006040:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006044:	3b30      	subs	r3, #48	; 0x30
 8006046:	2b09      	cmp	r3, #9
 8006048:	d94d      	bls.n	80060e6 <_svfiprintf_r+0x16e>
 800604a:	b1b8      	cbz	r0, 800607c <_svfiprintf_r+0x104>
 800604c:	e00f      	b.n	800606e <_svfiprintf_r+0xf6>
 800604e:	462f      	mov	r7, r5
 8006050:	e7b8      	b.n	8005fc4 <_svfiprintf_r+0x4c>
 8006052:	4a40      	ldr	r2, [pc, #256]	; (8006154 <_svfiprintf_r+0x1dc>)
 8006054:	463d      	mov	r5, r7
 8006056:	1a80      	subs	r0, r0, r2
 8006058:	fa0b f000 	lsl.w	r0, fp, r0
 800605c:	4318      	orrs	r0, r3
 800605e:	9004      	str	r0, [sp, #16]
 8006060:	e7d3      	b.n	800600a <_svfiprintf_r+0x92>
 8006062:	9a03      	ldr	r2, [sp, #12]
 8006064:	1d11      	adds	r1, r2, #4
 8006066:	6812      	ldr	r2, [r2, #0]
 8006068:	9103      	str	r1, [sp, #12]
 800606a:	2a00      	cmp	r2, #0
 800606c:	db01      	blt.n	8006072 <_svfiprintf_r+0xfa>
 800606e:	9207      	str	r2, [sp, #28]
 8006070:	e004      	b.n	800607c <_svfiprintf_r+0x104>
 8006072:	4252      	negs	r2, r2
 8006074:	f043 0302 	orr.w	r3, r3, #2
 8006078:	9207      	str	r2, [sp, #28]
 800607a:	9304      	str	r3, [sp, #16]
 800607c:	783b      	ldrb	r3, [r7, #0]
 800607e:	2b2e      	cmp	r3, #46	; 0x2e
 8006080:	d10c      	bne.n	800609c <_svfiprintf_r+0x124>
 8006082:	787b      	ldrb	r3, [r7, #1]
 8006084:	2b2a      	cmp	r3, #42	; 0x2a
 8006086:	d133      	bne.n	80060f0 <_svfiprintf_r+0x178>
 8006088:	9b03      	ldr	r3, [sp, #12]
 800608a:	3702      	adds	r7, #2
 800608c:	1d1a      	adds	r2, r3, #4
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	9203      	str	r2, [sp, #12]
 8006092:	2b00      	cmp	r3, #0
 8006094:	bfb8      	it	lt
 8006096:	f04f 33ff 	movlt.w	r3, #4294967295
 800609a:	9305      	str	r3, [sp, #20]
 800609c:	4d2e      	ldr	r5, [pc, #184]	; (8006158 <_svfiprintf_r+0x1e0>)
 800609e:	2203      	movs	r2, #3
 80060a0:	7839      	ldrb	r1, [r7, #0]
 80060a2:	4628      	mov	r0, r5
 80060a4:	f7ff fa48 	bl	8005538 <memchr>
 80060a8:	b138      	cbz	r0, 80060ba <_svfiprintf_r+0x142>
 80060aa:	2340      	movs	r3, #64	; 0x40
 80060ac:	1b40      	subs	r0, r0, r5
 80060ae:	fa03 f000 	lsl.w	r0, r3, r0
 80060b2:	9b04      	ldr	r3, [sp, #16]
 80060b4:	3701      	adds	r7, #1
 80060b6:	4303      	orrs	r3, r0
 80060b8:	9304      	str	r3, [sp, #16]
 80060ba:	7839      	ldrb	r1, [r7, #0]
 80060bc:	2206      	movs	r2, #6
 80060be:	4827      	ldr	r0, [pc, #156]	; (800615c <_svfiprintf_r+0x1e4>)
 80060c0:	1c7e      	adds	r6, r7, #1
 80060c2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80060c6:	f7ff fa37 	bl	8005538 <memchr>
 80060ca:	2800      	cmp	r0, #0
 80060cc:	d038      	beq.n	8006140 <_svfiprintf_r+0x1c8>
 80060ce:	4b24      	ldr	r3, [pc, #144]	; (8006160 <_svfiprintf_r+0x1e8>)
 80060d0:	bb13      	cbnz	r3, 8006118 <_svfiprintf_r+0x1a0>
 80060d2:	9b03      	ldr	r3, [sp, #12]
 80060d4:	3307      	adds	r3, #7
 80060d6:	f023 0307 	bic.w	r3, r3, #7
 80060da:	3308      	adds	r3, #8
 80060dc:	9303      	str	r3, [sp, #12]
 80060de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80060e0:	444b      	add	r3, r9
 80060e2:	9309      	str	r3, [sp, #36]	; 0x24
 80060e4:	e76d      	b.n	8005fc2 <_svfiprintf_r+0x4a>
 80060e6:	fb05 3202 	mla	r2, r5, r2, r3
 80060ea:	2001      	movs	r0, #1
 80060ec:	460f      	mov	r7, r1
 80060ee:	e7a6      	b.n	800603e <_svfiprintf_r+0xc6>
 80060f0:	2300      	movs	r3, #0
 80060f2:	250a      	movs	r5, #10
 80060f4:	4619      	mov	r1, r3
 80060f6:	3701      	adds	r7, #1
 80060f8:	9305      	str	r3, [sp, #20]
 80060fa:	4638      	mov	r0, r7
 80060fc:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006100:	3a30      	subs	r2, #48	; 0x30
 8006102:	2a09      	cmp	r2, #9
 8006104:	d903      	bls.n	800610e <_svfiprintf_r+0x196>
 8006106:	2b00      	cmp	r3, #0
 8006108:	d0c8      	beq.n	800609c <_svfiprintf_r+0x124>
 800610a:	9105      	str	r1, [sp, #20]
 800610c:	e7c6      	b.n	800609c <_svfiprintf_r+0x124>
 800610e:	fb05 2101 	mla	r1, r5, r1, r2
 8006112:	2301      	movs	r3, #1
 8006114:	4607      	mov	r7, r0
 8006116:	e7f0      	b.n	80060fa <_svfiprintf_r+0x182>
 8006118:	ab03      	add	r3, sp, #12
 800611a:	9300      	str	r3, [sp, #0]
 800611c:	4622      	mov	r2, r4
 800611e:	4b11      	ldr	r3, [pc, #68]	; (8006164 <_svfiprintf_r+0x1ec>)
 8006120:	a904      	add	r1, sp, #16
 8006122:	4640      	mov	r0, r8
 8006124:	f7fc f8ec 	bl	8002300 <_printf_float>
 8006128:	f1b0 3fff 	cmp.w	r0, #4294967295
 800612c:	4681      	mov	r9, r0
 800612e:	d1d6      	bne.n	80060de <_svfiprintf_r+0x166>
 8006130:	89a3      	ldrh	r3, [r4, #12]
 8006132:	065b      	lsls	r3, r3, #25
 8006134:	f53f af35 	bmi.w	8005fa2 <_svfiprintf_r+0x2a>
 8006138:	9809      	ldr	r0, [sp, #36]	; 0x24
 800613a:	b01d      	add	sp, #116	; 0x74
 800613c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006140:	ab03      	add	r3, sp, #12
 8006142:	9300      	str	r3, [sp, #0]
 8006144:	4622      	mov	r2, r4
 8006146:	4b07      	ldr	r3, [pc, #28]	; (8006164 <_svfiprintf_r+0x1ec>)
 8006148:	a904      	add	r1, sp, #16
 800614a:	4640      	mov	r0, r8
 800614c:	f7fc fb84 	bl	8002858 <_printf_i>
 8006150:	e7ea      	b.n	8006128 <_svfiprintf_r+0x1b0>
 8006152:	bf00      	nop
 8006154:	08006624 	.word	0x08006624
 8006158:	0800662a 	.word	0x0800662a
 800615c:	0800662e 	.word	0x0800662e
 8006160:	08002301 	.word	0x08002301
 8006164:	08005ec5 	.word	0x08005ec5

08006168 <_sbrk_r>:
 8006168:	b538      	push	{r3, r4, r5, lr}
 800616a:	2300      	movs	r3, #0
 800616c:	4c05      	ldr	r4, [pc, #20]	; (8006184 <_sbrk_r+0x1c>)
 800616e:	4605      	mov	r5, r0
 8006170:	4608      	mov	r0, r1
 8006172:	6023      	str	r3, [r4, #0]
 8006174:	f7fa fec0 	bl	8000ef8 <_sbrk>
 8006178:	1c43      	adds	r3, r0, #1
 800617a:	d102      	bne.n	8006182 <_sbrk_r+0x1a>
 800617c:	6823      	ldr	r3, [r4, #0]
 800617e:	b103      	cbz	r3, 8006182 <_sbrk_r+0x1a>
 8006180:	602b      	str	r3, [r5, #0]
 8006182:	bd38      	pop	{r3, r4, r5, pc}
 8006184:	20000240 	.word	0x20000240

08006188 <__sread>:
 8006188:	b510      	push	{r4, lr}
 800618a:	460c      	mov	r4, r1
 800618c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006190:	f000 f8f4 	bl	800637c <_read_r>
 8006194:	2800      	cmp	r0, #0
 8006196:	bfab      	itete	ge
 8006198:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800619a:	89a3      	ldrhlt	r3, [r4, #12]
 800619c:	181b      	addge	r3, r3, r0
 800619e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80061a2:	bfac      	ite	ge
 80061a4:	6563      	strge	r3, [r4, #84]	; 0x54
 80061a6:	81a3      	strhlt	r3, [r4, #12]
 80061a8:	bd10      	pop	{r4, pc}

080061aa <__swrite>:
 80061aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80061ae:	461f      	mov	r7, r3
 80061b0:	898b      	ldrh	r3, [r1, #12]
 80061b2:	4605      	mov	r5, r0
 80061b4:	05db      	lsls	r3, r3, #23
 80061b6:	460c      	mov	r4, r1
 80061b8:	4616      	mov	r6, r2
 80061ba:	d505      	bpl.n	80061c8 <__swrite+0x1e>
 80061bc:	2302      	movs	r3, #2
 80061be:	2200      	movs	r2, #0
 80061c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80061c4:	f000 f886 	bl	80062d4 <_lseek_r>
 80061c8:	89a3      	ldrh	r3, [r4, #12]
 80061ca:	4632      	mov	r2, r6
 80061cc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80061d0:	81a3      	strh	r3, [r4, #12]
 80061d2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80061d6:	463b      	mov	r3, r7
 80061d8:	4628      	mov	r0, r5
 80061da:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80061de:	f000 b835 	b.w	800624c <_write_r>

080061e2 <__sseek>:
 80061e2:	b510      	push	{r4, lr}
 80061e4:	460c      	mov	r4, r1
 80061e6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80061ea:	f000 f873 	bl	80062d4 <_lseek_r>
 80061ee:	1c43      	adds	r3, r0, #1
 80061f0:	89a3      	ldrh	r3, [r4, #12]
 80061f2:	bf15      	itete	ne
 80061f4:	6560      	strne	r0, [r4, #84]	; 0x54
 80061f6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80061fa:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80061fe:	81a3      	strheq	r3, [r4, #12]
 8006200:	bf18      	it	ne
 8006202:	81a3      	strhne	r3, [r4, #12]
 8006204:	bd10      	pop	{r4, pc}

08006206 <__sclose>:
 8006206:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800620a:	f000 b831 	b.w	8006270 <_close_r>

0800620e <strncmp>:
 800620e:	b510      	push	{r4, lr}
 8006210:	b16a      	cbz	r2, 800622e <strncmp+0x20>
 8006212:	3901      	subs	r1, #1
 8006214:	1884      	adds	r4, r0, r2
 8006216:	f810 3b01 	ldrb.w	r3, [r0], #1
 800621a:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800621e:	4293      	cmp	r3, r2
 8006220:	d103      	bne.n	800622a <strncmp+0x1c>
 8006222:	42a0      	cmp	r0, r4
 8006224:	d001      	beq.n	800622a <strncmp+0x1c>
 8006226:	2b00      	cmp	r3, #0
 8006228:	d1f5      	bne.n	8006216 <strncmp+0x8>
 800622a:	1a98      	subs	r0, r3, r2
 800622c:	bd10      	pop	{r4, pc}
 800622e:	4610      	mov	r0, r2
 8006230:	e7fc      	b.n	800622c <strncmp+0x1e>

08006232 <__ascii_wctomb>:
 8006232:	b149      	cbz	r1, 8006248 <__ascii_wctomb+0x16>
 8006234:	2aff      	cmp	r2, #255	; 0xff
 8006236:	bf8b      	itete	hi
 8006238:	238a      	movhi	r3, #138	; 0x8a
 800623a:	700a      	strbls	r2, [r1, #0]
 800623c:	6003      	strhi	r3, [r0, #0]
 800623e:	2001      	movls	r0, #1
 8006240:	bf88      	it	hi
 8006242:	f04f 30ff 	movhi.w	r0, #4294967295
 8006246:	4770      	bx	lr
 8006248:	4608      	mov	r0, r1
 800624a:	4770      	bx	lr

0800624c <_write_r>:
 800624c:	b538      	push	{r3, r4, r5, lr}
 800624e:	4605      	mov	r5, r0
 8006250:	4608      	mov	r0, r1
 8006252:	4611      	mov	r1, r2
 8006254:	2200      	movs	r2, #0
 8006256:	4c05      	ldr	r4, [pc, #20]	; (800626c <_write_r+0x20>)
 8006258:	6022      	str	r2, [r4, #0]
 800625a:	461a      	mov	r2, r3
 800625c:	f7fa fe00 	bl	8000e60 <_write>
 8006260:	1c43      	adds	r3, r0, #1
 8006262:	d102      	bne.n	800626a <_write_r+0x1e>
 8006264:	6823      	ldr	r3, [r4, #0]
 8006266:	b103      	cbz	r3, 800626a <_write_r+0x1e>
 8006268:	602b      	str	r3, [r5, #0]
 800626a:	bd38      	pop	{r3, r4, r5, pc}
 800626c:	20000240 	.word	0x20000240

08006270 <_close_r>:
 8006270:	b538      	push	{r3, r4, r5, lr}
 8006272:	2300      	movs	r3, #0
 8006274:	4c05      	ldr	r4, [pc, #20]	; (800628c <_close_r+0x1c>)
 8006276:	4605      	mov	r5, r0
 8006278:	4608      	mov	r0, r1
 800627a:	6023      	str	r3, [r4, #0]
 800627c:	f7fa fe0c 	bl	8000e98 <_close>
 8006280:	1c43      	adds	r3, r0, #1
 8006282:	d102      	bne.n	800628a <_close_r+0x1a>
 8006284:	6823      	ldr	r3, [r4, #0]
 8006286:	b103      	cbz	r3, 800628a <_close_r+0x1a>
 8006288:	602b      	str	r3, [r5, #0]
 800628a:	bd38      	pop	{r3, r4, r5, pc}
 800628c:	20000240 	.word	0x20000240

08006290 <_fstat_r>:
 8006290:	b538      	push	{r3, r4, r5, lr}
 8006292:	2300      	movs	r3, #0
 8006294:	4c06      	ldr	r4, [pc, #24]	; (80062b0 <_fstat_r+0x20>)
 8006296:	4605      	mov	r5, r0
 8006298:	4608      	mov	r0, r1
 800629a:	4611      	mov	r1, r2
 800629c:	6023      	str	r3, [r4, #0]
 800629e:	f7fa fe06 	bl	8000eae <_fstat>
 80062a2:	1c43      	adds	r3, r0, #1
 80062a4:	d102      	bne.n	80062ac <_fstat_r+0x1c>
 80062a6:	6823      	ldr	r3, [r4, #0]
 80062a8:	b103      	cbz	r3, 80062ac <_fstat_r+0x1c>
 80062aa:	602b      	str	r3, [r5, #0]
 80062ac:	bd38      	pop	{r3, r4, r5, pc}
 80062ae:	bf00      	nop
 80062b0:	20000240 	.word	0x20000240

080062b4 <_isatty_r>:
 80062b4:	b538      	push	{r3, r4, r5, lr}
 80062b6:	2300      	movs	r3, #0
 80062b8:	4c05      	ldr	r4, [pc, #20]	; (80062d0 <_isatty_r+0x1c>)
 80062ba:	4605      	mov	r5, r0
 80062bc:	4608      	mov	r0, r1
 80062be:	6023      	str	r3, [r4, #0]
 80062c0:	f7fa fe04 	bl	8000ecc <_isatty>
 80062c4:	1c43      	adds	r3, r0, #1
 80062c6:	d102      	bne.n	80062ce <_isatty_r+0x1a>
 80062c8:	6823      	ldr	r3, [r4, #0]
 80062ca:	b103      	cbz	r3, 80062ce <_isatty_r+0x1a>
 80062cc:	602b      	str	r3, [r5, #0]
 80062ce:	bd38      	pop	{r3, r4, r5, pc}
 80062d0:	20000240 	.word	0x20000240

080062d4 <_lseek_r>:
 80062d4:	b538      	push	{r3, r4, r5, lr}
 80062d6:	4605      	mov	r5, r0
 80062d8:	4608      	mov	r0, r1
 80062da:	4611      	mov	r1, r2
 80062dc:	2200      	movs	r2, #0
 80062de:	4c05      	ldr	r4, [pc, #20]	; (80062f4 <_lseek_r+0x20>)
 80062e0:	6022      	str	r2, [r4, #0]
 80062e2:	461a      	mov	r2, r3
 80062e4:	f7fa fdfc 	bl	8000ee0 <_lseek>
 80062e8:	1c43      	adds	r3, r0, #1
 80062ea:	d102      	bne.n	80062f2 <_lseek_r+0x1e>
 80062ec:	6823      	ldr	r3, [r4, #0]
 80062ee:	b103      	cbz	r3, 80062f2 <_lseek_r+0x1e>
 80062f0:	602b      	str	r3, [r5, #0]
 80062f2:	bd38      	pop	{r3, r4, r5, pc}
 80062f4:	20000240 	.word	0x20000240

080062f8 <memmove>:
 80062f8:	4288      	cmp	r0, r1
 80062fa:	b510      	push	{r4, lr}
 80062fc:	eb01 0302 	add.w	r3, r1, r2
 8006300:	d807      	bhi.n	8006312 <memmove+0x1a>
 8006302:	1e42      	subs	r2, r0, #1
 8006304:	4299      	cmp	r1, r3
 8006306:	d00a      	beq.n	800631e <memmove+0x26>
 8006308:	f811 4b01 	ldrb.w	r4, [r1], #1
 800630c:	f802 4f01 	strb.w	r4, [r2, #1]!
 8006310:	e7f8      	b.n	8006304 <memmove+0xc>
 8006312:	4283      	cmp	r3, r0
 8006314:	d9f5      	bls.n	8006302 <memmove+0xa>
 8006316:	1881      	adds	r1, r0, r2
 8006318:	1ad2      	subs	r2, r2, r3
 800631a:	42d3      	cmn	r3, r2
 800631c:	d100      	bne.n	8006320 <memmove+0x28>
 800631e:	bd10      	pop	{r4, pc}
 8006320:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006324:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8006328:	e7f7      	b.n	800631a <memmove+0x22>

0800632a <__malloc_lock>:
 800632a:	4770      	bx	lr

0800632c <__malloc_unlock>:
 800632c:	4770      	bx	lr

0800632e <_realloc_r>:
 800632e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006330:	4607      	mov	r7, r0
 8006332:	4614      	mov	r4, r2
 8006334:	460e      	mov	r6, r1
 8006336:	b921      	cbnz	r1, 8006342 <_realloc_r+0x14>
 8006338:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800633c:	4611      	mov	r1, r2
 800633e:	f7ff bd67 	b.w	8005e10 <_malloc_r>
 8006342:	b922      	cbnz	r2, 800634e <_realloc_r+0x20>
 8006344:	f7ff fd18 	bl	8005d78 <_free_r>
 8006348:	4625      	mov	r5, r4
 800634a:	4628      	mov	r0, r5
 800634c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800634e:	f000 f827 	bl	80063a0 <_malloc_usable_size_r>
 8006352:	42a0      	cmp	r0, r4
 8006354:	d20f      	bcs.n	8006376 <_realloc_r+0x48>
 8006356:	4621      	mov	r1, r4
 8006358:	4638      	mov	r0, r7
 800635a:	f7ff fd59 	bl	8005e10 <_malloc_r>
 800635e:	4605      	mov	r5, r0
 8006360:	2800      	cmp	r0, #0
 8006362:	d0f2      	beq.n	800634a <_realloc_r+0x1c>
 8006364:	4631      	mov	r1, r6
 8006366:	4622      	mov	r2, r4
 8006368:	f7ff f8f4 	bl	8005554 <memcpy>
 800636c:	4631      	mov	r1, r6
 800636e:	4638      	mov	r0, r7
 8006370:	f7ff fd02 	bl	8005d78 <_free_r>
 8006374:	e7e9      	b.n	800634a <_realloc_r+0x1c>
 8006376:	4635      	mov	r5, r6
 8006378:	e7e7      	b.n	800634a <_realloc_r+0x1c>
	...

0800637c <_read_r>:
 800637c:	b538      	push	{r3, r4, r5, lr}
 800637e:	4605      	mov	r5, r0
 8006380:	4608      	mov	r0, r1
 8006382:	4611      	mov	r1, r2
 8006384:	2200      	movs	r2, #0
 8006386:	4c05      	ldr	r4, [pc, #20]	; (800639c <_read_r+0x20>)
 8006388:	6022      	str	r2, [r4, #0]
 800638a:	461a      	mov	r2, r3
 800638c:	f7fa fd4b 	bl	8000e26 <_read>
 8006390:	1c43      	adds	r3, r0, #1
 8006392:	d102      	bne.n	800639a <_read_r+0x1e>
 8006394:	6823      	ldr	r3, [r4, #0]
 8006396:	b103      	cbz	r3, 800639a <_read_r+0x1e>
 8006398:	602b      	str	r3, [r5, #0]
 800639a:	bd38      	pop	{r3, r4, r5, pc}
 800639c:	20000240 	.word	0x20000240

080063a0 <_malloc_usable_size_r>:
 80063a0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80063a4:	1f18      	subs	r0, r3, #4
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	bfbc      	itt	lt
 80063aa:	580b      	ldrlt	r3, [r1, r0]
 80063ac:	18c0      	addlt	r0, r0, r3
 80063ae:	4770      	bx	lr

080063b0 <_init>:
 80063b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80063b2:	bf00      	nop
 80063b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80063b6:	bc08      	pop	{r3}
 80063b8:	469e      	mov	lr, r3
 80063ba:	4770      	bx	lr

080063bc <_fini>:
 80063bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80063be:	bf00      	nop
 80063c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80063c2:	bc08      	pop	{r3}
 80063c4:	469e      	mov	lr, r3
 80063c6:	4770      	bx	lr
